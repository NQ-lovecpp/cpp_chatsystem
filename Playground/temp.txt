
# 5. brpc安装及使用

## 5.1 介绍

Brpc 是一个用 C++ 语言编写的工业级 RPC 框架，常用于搜索、存储、机器学习、广告、推荐等高性能系统。它支持多协议、多线程、异步处理，并提供了丰富的客户端与服务端接口，适合搭建高性能的分布式系统。

### 5.1.1 brpc的特点

- **多协议支持**：支持 HTTP/HTTPS, h2/gRPC, Redis, Memcached 等多种协议。
- **多线程与异步支持**：Server 能同步或异步处理请求，Client 支持同步、异步、半同步的调用方式。
- **高性能**：通过优化延时和吞吐量，brpc 能在高负载下保持良好的性能表现。
- **可扩展性**：支持自定义协议、负载均衡算法、命名服务等。

## 5.2 对比其他 RPC 框架

Brpc 提供了对比其他 RPC 框架的优势，如更好的延时和吞吐、多协议支持以及强大的扩展性。详细信息可以参考 [brpc 官方文档](https://brpc.apache.org/zh/docs/overview/)。

## 5.3 安装

在安装 brpc 之前，首先需要安装相关依赖。

### 5.3.1 安装依赖

```bash
sudo apt-get install -y git g++ make libssl-dev libprotobuf-dev libprotoc-dev protobuf-compiler libleveldb-dev
```

### 5.3.2 安装 brpc

```bash
git clone https://github.com/apache/brpc.git
cd brpc/
mkdir build && cd build
cmake -DCMAKE_INSTALL_PREFIX=/usr .. && cmake --build . -j6
make && sudo make install
```

## 5.4 类与接口介绍

### 5.4.1 日志输出类与接口

在使用 brpc 时，通常并不需要使用 brpc 提供的日志输出功能，可以通过如下方式关闭日志输出：

```cpp
#include <butil/logging.h>

namespace logging {
    enum LoggingDestination {
        LOG_TO_NONE = 0
    };
    struct BUTIL_EXPORT LoggingSettings {
        LoggingSettings();
        LoggingDestination logging_dest;
    };
    bool InitLogging(const LoggingSettings& settings);
}
```

### 5.4.2 Protobuf类与接口

Brpc 使用 Protobuf 作为消息格式，提供了如下接口：

```cpp
namespace google {
namespace protobuf {
    class PROTOBUF_EXPORT Closure {
    public:
        Closure() {}
        virtual ~Closure();
        virtual void Run() = 0;
    };
    inline Closure* NewCallback(void (*function)());
    class PROTOBUF_EXPORT RpcController {
        bool Failed();
        std::string ErrorText();
    }
}
}
```

### 5.4.3 服务端类与接口

Brpc 提供了丰富的服务端接口，以便开发者快速构建高性能服务器：

```cpp
namespace brpc {
struct ServerOptions {
    int idle_timeout_sec; // Default: -1 (disabled)
    int num_threads; // Default: #cpu-cores
};

enum ServiceOwnership {
    SERVER_OWNS_SERVICE, 
    SERVER_DOESNT_OWN_SERVICE
};

class Server {
    int AddService(google::protobuf::Service* service, ServiceOwnership ownership);
    int Start(int port, const ServerOptions* opt);
    int Stop(int closewait_ms);
    int Join();
    void RunUntilAskedToQuit();
};

class ClosureGuard {
    explicit ClosureGuard(google::protobuf::Closure* done);
    ~ClosureGuard() { if (_done) _done->Run(); }
};

class HttpHeader {
    void set_content_type(const std::string& type);
    const std::string* GetHeader(const std::string& key);
    void SetHeader(const std::string& key, const std::string& value);
    const URI& uri() const { return _uri; }
    HttpMethod method() const { return _method; }
    void set_method(const HttpMethod method);
    int status_code();
    void set_status_code(int status_code);
};

class Controller : public google::protobuf::RpcController {
    void set_timeout_ms(int64_t timeout_ms);
    void set_max_retry(int max_retry);
    google::protobuf::Message* response();
    HttpHeader& http_response();
    HttpHeader& http_request();
    bool Failed();
    std::string ErrorText();
};
}
```

### 5.4.4 客户端类与接口

Brpc 客户端类 `Channel` 提供了简单的接口，用于客户端与服务器端的通信：

```cpp
namespace brpc {
struct ChannelOptions {
    int32_t connect_timeout_ms; // Default: 200 milliseconds
    int32_t timeout_ms; // Default: 500 milliseconds
    int max_retry; // Default: 3
    AdaptiveProtocolType protocol;
};

class Channel : public ChannelBase {
    int Init(const char* server_addr_and_port, const ChannelOptions* options);
};
}
```

## 5.5 使用

### 5.5.1 同步调用

同步调用是指客户端会阻塞直到收到服务器端的响应或发生错误。以下是一个简单的 Echo 服务的同步 RPC 调用示例：

#### 5.5.1.1 创建 proto 文件

```protobuf
syntax = "proto3";
package example;

message EchoRequest {
    string message = 1;
}

message EchoResponse {
    string message = 1;
}

service EchoService {
    rpc Echo(EchoRequest) returns (EchoResponse);
}
```

#### 5.5.1.2 创建服务端源码

```cpp
#include <gflags/gflags.h>
#include <butil/logging.h>
#include <brpc/server.h>
#include <json2pb/pb_to_json.h>
#include "main.pb.h"

DEFINE_int32(listen_port, 8000, "服务器地址信息");
DEFINE_int32(idle_timeout_s, -1, "空闲连接超时关闭时间");
DEFINE_int32(thread_count, 3, "服务器启动线程数量");

namespace example {
class EchoServiceImpl : public EchoService {
public:
    EchoServiceImpl() {}
    virtual ~EchoServiceImpl() {}
    virtual void Echo(google::protobuf::RpcController* cntl_base,
                      const EchoRequest* request,
                      EchoResponse* response,
                      google::protobuf::Closure* done) {
        brpc::ClosureGuard done_guard(done);
        brpc::Controller* cntl = static_cast<brpc::Controller*>(cntl_base);

        cntl->set_after_rpc_resp_fn(std::bind(&EchoServiceImpl::CallAfterRpc,
            std::placeholders::_1, std::placeholders::_2,
            std::placeholders::_3));

        std::cout << "请求内容：" << request->message() << std::endl;
        response->set_message(request->message() + " Hello");
    }

    static void CallAfterRpc(brpc::Controller* cntl,
                        const google::protobuf::Message* req,
                        const google::protobuf::Message* res) {
        std::string req_str;
        std::string res_str;
        json2pb::ProtoMessageToJson(*req, &req_str, NULL);
        json2pb::ProtoMessageToJson(*res, &res_str, NULL);
        std::cout << "req:" << req_str << std::endl;
        std::cout << "res:" << res_str << std::endl;
    }
};
} // namespace example

int main(int argc, char* argv[]) {
    logging::LoggingSettings log_setting;
    log_setting.logging_dest = logging::LoggingDestination::LOG_TO_NONE;
    logging::InitLogging(log_setting);
    google::ParseCommandLineFlags(&argc, &argv, true);

    brpc::Server server;
    example::EchoServiceImpl echo_service_impl;

    if (server.AddService(&echo_service_impl,
        brpc::SERVER_DOESNT_OWN_SERVICE) != 0) {
        std::cout << "add service failed!\n";
        return -1;
    }
    brpc::ServerOptions options;
    options.idle_timeout_sec = FLAGS_idle_timeout_s;
    options.num_threads = FLAGS_thread_count;
    if (server.Start(FLAGS_listen_port, &options) != 0) {
        std::cout << "Fail to start EchoServer";
        return -1;
    }
    server.RunUntilAskedToQuit();
    return 0;
}
```

#### 5.5.1.3 创建客户端源码

```cpp
#include <gflags/gflags.h>
#include <butil/logging.h>
#include <butil/time.h>
#include <brpc/channel.h>
#include "main.pb.h"

DEFINE_string(protocol, "baidu_std", "通信协议类型");
DEFINE_string(server_host, "127.0.0.1:8000", "服务器地址信息");
DEFINE_int32(timeout_ms, 500, "Rpc 请求超时时间");
DEFINE_int32(max_retry, 3, "请求重试次数");

int main(int argc, char* argv[]) {
    google::ParseCommandLineFlags(&argc, &argv, true);

    brpc::Channel channel;
    brpc::ChannelOptions options;
    options.protocol = FLAGS_protocol;
    options.timeout_ms = FLAGS_timeout_ms;
    options.max_retry = FLAGS_max_retry;
    if (channel.Init(FLAGS_server_host.c_str(), &options) != 0) {
        LOG(ERROR) << "

Fail to initialize channel";
        return -1;
    }

    example::EchoService_Stub stub(&channel);

    example::EchoRequest request;
    example::EchoResponse response;
    brpc::Controller cntl;

    request.set_message("hello world");

    stub.Echo(&cntl, &request, &response, NULL);
    if (cntl.Failed()) {
        std::cout << "请求失败: " << cntl.ErrorText() << std::endl;
        return -1;
    }
    std::cout << "响应：" << response.message() << std::endl;
    return 0;
}
```

#### 5.5.1.4 编写 Makefile

```makefile
all: brpc_server brpc_client

brpc_server: brpc_server.cc main.pb.cc
    g++ -std=c++17 $^ -o $@ -lbrpc -lleveldb -lgflags -lssl -lcrypto -lprotobuf

brpc_client: brpc_client.cc main.pb.cc
    g++ -std=c++17 $^ -o $@ -lbrpc -lleveldb -lgflags -lssl -lcrypto -lprotobuf

%.pb.cc : %.proto
    protoc --cpp_out ./ $<
```

### 5.5.2 异步调用

异步调用是指客户端注册一个响应处理回调函数，当调用一个 RPC 接口时立即返回，不会阻塞等待响应。当服务器端返回响应时会调用传入的回调函数处理响应。以下是异步调用的伪代码：

```cpp
static void OnRPCDone(MyResponse* response, brpc::Controller* cntl) {     
    std::unique_ptr<MyResponse> response_guard(response);     
    std::unique_ptr<brpc::Controller> cntl_guard(cntl);     
    if (cntl->Failed()) {         
        // RPC 失败了
    } else {         
        // RPC 成功，处理响应数据
    }     
}

MyResponse* response = new MyResponse; 
brpc::Controller* cntl = new brpc::Controller; 
MyService_Stub stub(&channel);  

MyRequest request;
request.set_foo(...);
cntl->set_timeout_ms(...);
stub.some_method(cntl, &request, response, brpc::NewCallback(OnRPCDone, response, cntl));
```

## 5.6 封装思想

在进行 RPC 调用的封装时，由于不同的服务调用使用不同的 Stub，封装的意义不大。因此，可以只封装通信所需的 `Channel` 管理。

- 封装 `Channel` 的管理，每个不同的服务可能都会有多个主机提供服务，因此需要将其管理起来，并提供获取指定服务 `Channel` 的接口。
- 提供服务声明的接口，告知模块哪些服务是需要建立连接管理的，没有添加声明的服务即使上线也不需要进行连接的建立。
- 提供服务上线和下线时的处理接口，以便于新增或删除指定服务的 `Channel`。


# 6. ES安装及使用

## 6.1 ES介绍

Elasticsearch（简称 ES）是一个开源分布式搜索引擎，具备分布式、零配置、自动发现、索引自动分片、索引副本机制、RESTful 风格接口、多数据源、自动搜索负载等特点。ES 能够近乎实时地存储和检索数据，具备极强的扩展性，可扩展至上百台服务器处理 PB 级别的数据。ES 使用 Java 开发，并以 Lucene 作为核心来实现所有索引和搜索功能，同时通过简单的 RESTful API 隐藏 Lucene 的复杂性，使全文搜索变得简单。

## 6.2 ES安装

### 6.2.1 安装 ES

以下是安装 Elasticsearch 的步骤：

```bash
# 添加仓库密钥
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -

# 添加镜像源仓库
echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elasticsearch.list

# 更新软件包列表
sudo apt update

# 安装 Elasticsearch
sudo apt-get install elasticsearch=7.17.21

# 启动 Elasticsearch
sudo systemctl start elasticsearch

# 安装 IK 分词器插件
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install https://get.infini.cloud/elasticsearch/analysis-ik/7.17.21
```

如果在更新源时遇到错误，可以参考文档进行进一步的操作和配置【36†source】。

### 6.2.2 配置 Elasticsearch

Elasticsearch 安装完成后，可以通过修改配置文件 `/etc/elasticsearch/elasticsearch.yml` 设置外网访问：

```bash
# 修改 Elasticsearch 配置
vim /etc/elasticsearch/elasticsearch.yml

# 添加配置项
network.host: 0.0.0.0
http.port: 9200
cluster.initial_master_nodes: ["node-1"]

# 启动 Elasticsearch
sudo systemctl start elasticsearch
```

### 6.2.3 验证安装

验证 Elasticsearch 是否成功安装：

```bash
curl -X GET "http://localhost:9200/"
```

### 6.2.4 安装 Kibana

安装 Kibana 来管理和可视化 Elasticsearch 数据：

```bash
# 安装 Kibana
sudo apt install kibana

# 配置 Kibana
sudo vim /etc/kibana/kibana.yml
elasticsearch.host: "http://localhost:9200"

# 启动 Kibana
sudo systemctl start kibana

# 设置 Kibana 开机自启
sudo systemctl enable kibana

# 验证 Kibana 服务状态
sudo systemctl status kibana
```

## 6.3 ES核心概念

### 6.3.1 索引（Index）

一个索引是具有相似特征文档的集合。索引有一个唯一标识的名字，必须全部使用小写字母。在一个集群中，可以定义任意多个索引。

### 6.3.2 类型（Type）

在一个索引中，可以定义一种或多种类型。类型是索引的逻辑分类或分区。

### 6.3.3 字段（Field）

字段是数据表的字段，用于对文档数据根据不同属性进行分类标识。

### 6.3.4 映射（Mapping）

映射定义了数据处理的方式和规则，如字段的数据类型、默认值、分析器、是否被索引等。

### 6.3.5 文档（Document）

文档是可被索引的基础信息单元，表示为 JSON 格式。一个文档必须被索引到特定的索引和类型中。

## 6.4 Kibana 访问 ES 进行测试

使用 Kibana 创建索引并添加数据：

```json
POST /user/_doc
{
    "settings": {
        "analysis": {
            "analyzer": {
                "ik": {
                    "tokenizer": "ik_max_word"
                }
            }
        }
    },
    "mappings": {
        "dynamic": true,
        "properties": {
            "nickname": {
                "type": "text",
                "analyzer": "ik_max_word"
            },
            "user_id": {
                "type": "keyword",
                "analyzer": "standard"
            },
            "phone": {
                "type": "keyword",
                "analyzer": "standard"
            },
            "description": {
                "type": "text",
                "enabled": false
            },
            "avatar_id": {
                "type": "keyword",
                "enabled": false
            }
        }
    }
}
```

批量添加数据：

```json
POST /user/_doc/_bulk
{"index":{"_id":"1"}}
{"user_id" : "USER4b862aaa-2df8654a-7eb4bb65-e3507f66","nickname" : "昵称 1","phone" : "手机号 1","description" : "签名 1","avatar_id" : "头像 1"}
{"index":{"_id":"2"}}
{"user_id" : "USER14eeeaa5-442771b9-0262e455-e4663d1d","nickname" : "昵称 2","phone" : "手机号 2","description" : "签名 2","avatar_id" : "头像 2"}
```

查询数据：

```json
GET /user/_doc/_search?pretty
{
    "query": {
        "bool": {
            "must_not": [
                {
                    "terms": {
                        "user_id.keyword": [
                            "USER4b862aaa-2df8654a-7eb4bb65-e3507f66",
                            "USER14eeeaa5-442771b9-0262e455-e4663d1d",
                            "USER484a6734-03a124f0-996c169d-d05c1869"
                        ]
                    }
                }
            ],
            "should": [
                {
                    "match": {
                        "user_id": "昵称"
                    }
                },
                {
                    "match": {
                        "nickname": "昵称"
                    }
                },
                {
                    "match": {
                        "phone": "昵称"
                    }
                }
            ]
        }
    }
}
```

删除索引：

```json
DELETE /user
```

## 6.5 ES客户端的安装

使用 Elasticlient 库作为 ES 的 C++ 客户端：

```bash
# 克隆代码
git clone https://github.com/seznam/elasticlient

# 切换目录
cd elasticlient

# 更新子模块
git submodule update --init --recursive

# 编译代码
mkdir build
cd build
cmake ..
make

# 安装
make install
```

### 6.5.1 解决安装问题

安装过程中可能遇到的问题和解决方案：

- 安装 MicroHTTPD 库：

```bash
sudo apt-get install libmicrohttpd-dev
```

- 手动安装子模块：

```bash
cd ../external/googletest/
mkdir cmake && cd cmake/
cmake -DCMAKE_INSTALL_PREFIX=/usr ..
make && sudo make install
```

## 6.6 ES客户端接口介绍

Elasticlient 提供了丰富的接口用于操作 Elasticsearch，如 `search`、`get`、`index`、`remove` 等。

```cpp
cpr::Response search(const std::string &indexName, const std::string &docType, const std::string &body, const std::string &routing = std::string());
cpr::Response get(const std::string &indexName, const std::string &docType, const std::string &id = std::string(), const std::string &routing = std::string());
cpr::Response index(const std::string &indexName, const std::string &docType, const std::string &id, const std::string &body, const std::string &routing = std::string());
cpr::Response remove(const std::string &indexName, const std::string &docType, const std::string &id, const std::string &routing = std::string());
```

## 6.7 入门案例

以下是使用 ES 客户端检索文档的简单示例：

```cpp
#include <string>
#include <vector>
#include <iostream>
#include <cpr/response.h>
#include <elasticlient/client.h>

int main() {
    try {
        elasticlient::Client client({"http://192.168.65.138:9200/"});

        // 检索文档
        std::string search_body = R"({"query": { "match_all": {} } })";
        cpr::Response retrievedDocument = client.search("user", "_doc", search_body);
        
        std::cout << retrievedDocument.status_code << std::endl;
        std::cout << retrievedDocument.text << std::endl;
    } catch(std::exception &e) {
        std::cout << e.what() << std::endl;
    }

    return 0;
}
```

编译命令：

```bash
main : main.cc
    g++ -std=c++17 $^ -o $@ -lelasticlient -lcpr -l

jsoncpp
```

运行时需要添加动态库路径：

```bash
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
```

## 6.8 ES客户端 API 二次封装思想

封装 ES 客户端 API 主要是为了简化用户操作，将索引构造、文档新增和搜索构造过程封装起来，减少用户直接处理 JSON 数据格式的复杂度。封装内容包括索引构造过程、文档新增构造过程和搜索构造过程，简化用户的使用体验。



# 7. cpp-httplib 安装与使用

## 7.1 介绍

C++ HTTP 库（cpp-httplib）是一个轻量级的 C++ HTTP 客户端/服务器库，提供了简单的 API 用于创建 HTTP 服务器和客户端。该库支持同步和异步操作，适合多种应用场景。

### 7.1.1 cpp-httplib 的特点

- **轻量级**：只需一个头文件即可使用，无需依赖外部库。
- **跨平台**：支持 Windows、Linux、macOS 等多个操作系统。
- **同步与异步**：支持同步和异步操作，灵活选择使用场景。
- **HTTP/1.1 支持**：实现了 HTTP/1.1 协议，包括持久连接和管道化。
- **Multipart form-data 支持**：支持文件上传等操作。
- **SSL/TLS 支持**：通过 OpenSSL 或 mbedTLS，支持 HTTPS 和 WSS 协议。
- **简单易用**：API 设计简洁，适合初学者和有经验的开发者。
- **高性能**：轻量级但性能良好，适合多种应用场景。

## 7.2 安装

### 7.2.1 安装步骤

使用 Git 克隆 cpp-httplib 库：

```bash
git clone https://github.com/yhirose/cpp-httplib.git
```

cpp-httplib 是一个头文件库，不需要进行复杂的安装操作，下载后可以直接包含头文件使用。

## 7.3 类与接口

cpp-httplib 提供了用于客户端和服务器端的丰富接口，以下是一些常用类和函数：

```cpp
namespace httplib {

struct Request {
  std::string method;   // 请求方法
  std::string path;     // 请求路径
  Headers headers;      // 请求头部信息
  std::string body;     // 请求主体
  Params params;        // 请求参数
};

struct Response {
  std::string version;  // HTTP 版本
  int status = -1;      // 响应状态码
  std::string reason;   // 响应原因短语
  Headers headers;      // 响应头部信息
  std::string body;     // 响应主体

  void set_content(const std::string &s, const std::string &content_type);  // 设置响应内容
  void set_header(const std::string &key, const std::string &val);          // 设置响应头部信息
};

class Server {
    using Handler = std::function<void(const Request &, Response &)>;
    
    Server &Get(const std::string &pattern, Handler handler);      // GET 请求处理
    Server &Post(const std::string &pattern, Handler handler);     // POST 请求处理
    Server &Put(const std::string &pattern, Handler handler);      // PUT 请求处理
    Server &Delete(const std::string &pattern, Handler handler);   // DELETE 请求处理
    
    bool listen(const std::string &host, int port);                // 启动服务器
};

class Client {
    explicit Client(const std::string &host, int port);  // 创建客户端，指定服务器地址和端口
    
    Result Get(const std::string &path, const Headers &headers);   // 发送 GET 请求
    Result Post(const std::string &path, const std::string &body, const std::string &content_type);   // 发送 POST 请求
    Result Put(const std::string &path, const std::string &body, const std::string &content_type);    // 发送 PUT 请求
    Result Delete(const std::string &path, const std::string &body, const std::string &content_type); // 发送 DELETE 请求
};
}
```

## 7.4 使用示例

以下是一个使用 cpp-httplib 创建简单 HTTP 服务器的示例代码：

```cpp
#include "cpp-httplib/httplib.h"

class HelloServer {
public:
    HelloServer(int port) : _port(port) {
        _server.Get("/hi", std::bind(&HelloServer::HelloWorld, this, std::placeholders::_1, std::placeholders::_2));
    }

    void run() {
        _server.listen("0.0.0.0", _port);  // 启动服务器，监听指定端口
    }

public:
    void HelloWorld(const httplib::Request &req, httplib::Response &rsp) {
        std::string body = "<h1>HelloWorld</h1>";
        rsp.set_content(body, "text/html");  // 设置响应内容和类型
        rsp.status = 200;  // 设置 HTTP 响应状态码
    }

private:
    int _port;
    httplib::Server _server;  // 定义服务器对象
};

int main() {
    HelloServer server(8080);  // 创建服务器，监听 8080 端口
    server.run();  // 启动服务器
    return 0;
}
```

### 7.4.1 编译与运行

编译该程序需要使用 `g++` 编译器，并启用 C++17 标准：

```bash
g++ -std=c++17 main.cc -o main -pthread
```

编译完成后，运行该程序，服务器将会在 8080 端口监听 HTTP 请求。可以通过浏览器访问 `http://localhost:8080/hi`，查看服务器返回的 HTML 内容。

## 7.5 总结

cpp-httplib 是一个轻量级、简单易用的 C++ HTTP 客户端/服务器库，适合构建轻量级的 HTTP 应用程序。它支持多种操作系统和 HTTP 协议的功能，使其成为开发 C++ 网络应用程序的强大工具。


# 8. WebSocket++ 使用

## 安装

```bash
sudo apt-get install libboost-dev libboost-system-dev libwebsocketpp-dev
```

安装完毕后，若在 `/usr/include` 下有了 `websocketpp` 目录就表示安装成功了。

```bash
dev@dev-host:~$ ls /usr/include/websocketpp/
base64  common  connection.hpp  endpoint_base.hpp  frame.hpp  logger
```

## 介绍与使用

### WebSocket协议介绍

WebSocket 是从 HTML5 开始支持的一种网页端和服务端保持长连接的消息推送机制。

传统的 Web 程序都是属于 "一问一答" 的形式，即客户端给服务器发送了一个 HTTP 请求，服务器给客户端返回一个 HTTP 响应。这种情况下，服务器是属于被动的一方，如果客户端不主动发起请求，服务器就无法主动给客户端响应。

像网页即时聊天或者五子棋游戏这样的程序非常依赖 "消息推送"，即需要服务器主动推送消息到客户端。如果只是使用原生的 HTTP 协议，要想实现消息推送一般需要通过 "轮询" 的方式实现，但轮询的成本比较高且不能及时获取到消息的响应。

基于上述问题，就产生了 WebSocket 协议。WebSocket 更接近于 TCP 这种级别的通信方式，一旦连接建立完成，客户端或服务器都可以主动向对方发送数据。

### WebSocketpp 介绍

WebSocketpp 是一个跨平台的开源（BSD 许可证）头部专用 C++ 库，它实现了 RFC6455（WebSocket 协议）和 RFC7692（WebSocket Compression Extensions）。它允许将 WebSocket 客户端和服务器功能集成到 C++ 程序中。在最常见的配置中，全功能网络 I/O 由 Asio 网络库提供。

WebSocketpp 的主要特性包括：

- 事件驱动的接口
- 支持 HTTP/HTTPS、WS/WSS、IPv6
- 灵活的依赖管理 — Boost 库/C++11 标准库
- 可移植性：Posix/Windows、32/64bit、Intel/ARM
- 线程安全

WebSocketpp 同时支持 HTTP 和 WebSocket 两种网络协议，比较适用于项目中搭建 HTTP 和 WebSocket 服务器。

### WebSocketpp 使用

#### Simple http/websocket 服务器

使用 WebSocketpp 实现一个简单的 HTTP 和 WebSocket 服务器：

```cpp
#include <iostream>
#include <websocketpp/config/asio_no_tls.hpp>
#include <websocketpp/server.hpp>

using namespace std;

typedef websocketpp::server<websocketpp::config::asio> websocketsvr;
typedef websocketsvr::message_ptr message_ptr;

using websocketpp::lib::placeholders::_1;
using websocketpp::lib::placeholders::_2;
using websocketpp::lib::bind;

// WebSocket 连接成功的回调函数
void OnOpen(websocketsvr *server, websocketpp::connection_hdl hdl) {
    cout << "连接成功" << endl;
}

// WebSocket 连接关闭的回调函数
void OnClose(websocketsvr *server, websocketpp::connection_hdl hdl) {
    cout << "连接关闭" << endl;
}

// WebSocket 收到消息的回调函数
void OnMessage(websocketsvr *server, websocketpp::connection_hdl hdl, message_ptr msg) {
    cout << "收到消息: " << msg->get_payload() << endl;
    // 将收到的消息发回给 WebSocket 客户端
    server->send(hdl, msg->get_payload(), websocketpp::frame::opcode::text);
}

// WebSocket 连接异常的回调函数
void OnFail(websocketsvr *server, websocketpp::connection_hdl hdl) {
    cout << "连接异常" << endl;
}

// 处理 HTTP 请求的回调函数，返回一个 HTML 欢迎页面
void OnHttp(websocketsvr *server, websocketpp::connection_hdl hdl) {
    cout << "处理 HTTP 请求" << endl;
    websocketsvr::connection_ptr con = server->get_con_from_hdl(hdl);
    std::stringstream ss;
    ss << "<!doctype html><html><head>"
       << "<title>hello websocket</title><body>"
       << "<h1>hello websocketpp</h1>"
       << "</body></head></html>";
    con->set_body(ss.str());
    con->set_status(websocketpp::http::status_code::ok);
}

int main() {
    // 使用 WebSocketpp 库创建服务器
    websocketsvr server;
    // 设置 WebSocketpp 库的日志级别
    server.set_access_channels(websocketpp::log::alevel::none);
    // 初始化 Asio
    server.init_asio();
    // 注册 HTTP 请求的处理函数
    server.set_http_handler(bind(&OnHttp, &server, ::_1));
    // 注册 WebSocket 请求的处理函数
    server.set_open_handler(bind(&OnOpen, &server, ::_1));
    server.set_close_handler(bind(&OnClose, &server, _1));
    server.set_message_handler(bind(&OnMessage, &server, _1, _2));
    // 监听 8888 端口
    server.listen(8888);
    // 开始接收 TCP 连接
    server.start_accept();
    // 开始运行服务器
    server.run();
    return 0;
}
```

#### HTTP 客户端

使用浏览器作为 HTTP 客户端，访问服务器的 8888 端口。

#### WS客户端

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Websocket</title>
</head>
<body>
    <input type="text" id="message">
    <button id="submit">提交</button>

    <script>
        // 创建 WebSocket 实例
        let websocket = new WebSocket("ws://192.168.51.100:8888");

        // 处理连接打开的回调函数
        websocket.onopen = function() {
            console.log("连接建立");
        }

        // 处理收到消息的回调函数，控制台打印消息
        websocket.onmessage = function(e) {
            console.log("收到消息: " + e.data);
        }

        // 处理连接异常的回调函数
        websocket.onerror = function() {
            console.log("连接异常");
        }

        // 处理连接关闭的回调函数
        websocket.onclose = function() {
            console.log("连接关闭");
        }

        // 点击按钮后通过 WebSocket 实例向服务器发送请求
        let input = document.querySelector('#message');
        let button = document.querySelector('#submit');
        button.onclick = function() {
            console.log("发送消息: " + input.value);
            websocket.send(input.value);
        }
    </script>
</body>
</html>
```

在控制台中可以看到连接建立、客户端和服务器通信以及断开连接的过程（关闭服务器就会看到断开连接的现象）。

注: 通过 `F12` 或者 `Fn + F12` 打开浏览器的调试模式。







# 9. Redis安装与使用

## 介绍

Redis（Remote Dictionary Server）是一个开源的高性能键值对（key-value）数据库。它通常用作数据结构服务器，因为除了基本的键值存储功能外，Redis 还支持多种类型的数据结构，如字符串（strings）、哈希（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）以及范围查询、位图、超日志和地理空间索引等。

以下是 Redis 的一些主要特性：

1. **内存中数据库**：Redis 将所有数据存储在内存中，这使得读写速度非常快。
2. **持久化**：尽管 Redis 是内存数据库，但它提供了持久化选项，可以将内存中的数据保存到磁盘上，以防系统故障导致数据丢失。
3. **支持多种数据结构**：Redis 不仅支持基本的键值对，还支持列表、集合、有序集合等复杂的数据结构。
4. **原子操作**：Redis 支持原子操作，这意味着多个操作可以作为一个单独的原子步骤执行，这对于并发控制非常重要。
5. **发布/订阅功能**：Redis 支持发布订阅模式，允许多个客户端订阅消息，当消息发布时，所有订阅者都会收到消息。
6. **高可用性**：通过 Redis 哨兵（Sentinel）和 Redis 集群，Redis 可以提供高可用性和自动故障转移。
7. **复制**：Redis 支持主从复制，可以提高数据的可用性和读写性能。
8. **事务**：Redis 提供了事务功能，可以保证一系列操作的原子性执行。
9. **Lua 脚本**：Redis 支持使用 Lua 脚本进行复杂的数据处理，可以在服务器端执行复杂的逻辑。
10. **客户端库**：Redis 拥有丰富的客户端库，支持多种编程语言，如 Python、Ruby、Java、C# 等。
11. **性能监控**：Redis 提供了多种监控工具和命令，可以帮助开发者监控和优化性能。
12. **易于使用**：Redis 有一个简单的配置文件和命令行界面，使得设置和使用变得容易。

Redis 广泛用于缓存、会话存储、消息队列、排行榜、实时分析等领域。由于其高性能和灵活性，Redis 成为了现代应用程序中非常流行的数据存储解决方案之一。

## 安装

### 使用 apt 安装

```bash
apt install redis -y
```

### 支持远程连接

修改 `/etc/redis/redis.conf`：

- 修改 `bind 127.0.0.1` 为 `bind 0.0.0.0`
- 修改 `protected-mode yes` 为 `protected-mode no`

```plaintext
# bind 127.0.0.1   # 注释掉这行 
bind 0.0.0.0       # 添加这行
 
protected-mode no  # 把 yes 改成 no
```

### 控制 Redis 启动

启动 Redis 服务：

```bash
service redis-server start
```

停止 Redis 服务：

```bash
service redis-server stop
```

重启 Redis 服务：

```bash
service redis-server restart
```

## 装 redis-plus-plus

C++ 操作 Redis 的库有很多，此处使用 redis-plus-plus。这个库功能强大，使用简单。

### 安装 hiredis

redis-plus-plus 是基于 hiredis 实现的。hiredis 是一个 C 语言实现的 Redis 客户端。因此需要先安装 hiredis。

```bash
apt install libhiredis-dev
```

### 下载 redis-plus-plus 源码

```bash
git clone https://github.com/sewenew/redis-plus-plus.git
```

### 编译/安装 redis-plus-plus

使用 cmake 构建：

```bash
cd redis-plus-plus
mkdir build
cd build
cmake ..
make
make install    # 这一步操作需要管理员权限。如果是非 root 用户，使用 sudo make install 执行。
```

构建成功后，会在 `/usr/local/include/` 中多出 `sw` 目录，并且内部包含 redis-plus-plus 的一系列头文件。会在 `/usr/local/lib/` 中多出一系列 `libredis` 库文件。

## 接口

Redis 本身支持很多数据类型的键值对，但在聊天室项目中只涉及字符串键值对的操作，因此这里主要介绍字符串键值对的基础操作。

```cpp
namespace sw { 
namespace redis { 
    struct ConnectionOptions { 
        std::string host; 
        int port = 6379; 
        std::string path; 
        std::string user = "default"; 
        std::string password; 
        int db = 0; // 默认 0 号库 
        bool keep_alive = false; 
    }; 
    struct ConnectionPoolOptions { 
        std::size_t size = 1; // 最大连接数量 
    }; 
    class Redis { 
        explicit Redis(const std::string &uri); 
        explicit Redis(const ConnectionOptions &connection_opts, 
            const ConnectionPoolOptions &pool_opts = {}); 
        void flushdb(bool async = false); // 删除当前库中所有数据 
        long long del(const StringView &key); // 删除指定键值对 
        long long exists(const StringView &key); // 判断指定键值对是否存在 
        OptionalString get(const StringView &key); // 获取一个 string 键值对 
        bool set(const StringView &key, 
                const StringView &val, 
                const std::chrono::milliseconds &ttl =  
                    std::chrono::milliseconds(0), // 0 表示不设置超时 
                UpdateType type = UpdateType::ALWAYS); // 存放一个 string 键值对，且设置过期时间-毫秒 
        void setex(const StringView &key, 
                long long ttl, 
                const StringView &val); // 设置超时并存放键值对 
        long long rpush(const StringView &key, const StringView &val); // 向列表尾插 string 键值对 
        long long lpush(const StringView &key, const StringView &val); // 向列表头插 string 键值对 
        void lrange(const StringView &key, long long start, long long stop, Output output); // 获取列表区间数据 
    }; 
} 
} 
```

## 使用

这里只进行字符串键值对的增删改查操作以及数据的生命周期设置。

```cpp
#include <sw/redis++/redis.h> 
#include <iostream> 
#include <string> 
#include <thread> 
#include <gflags/gflags.h> 

DEFINE_bool(redis_keep_alive, true, "是否保持长连接"); 
DEFINE_int32(redis_db, 0, "redis 库号"); 
DEFINE_int32(redis_port, 6379, "redis 服务器端口"); 
DEFINE_string(redis_host, "127.0.0.1", "redis 服务器 IP 地址"); 

std::shared_ptr<sw::redis::Redis> predis; 

void add() { 
    predis->set("用户会话 1", "用户 ID1"); 
    predis->set("用户会话 2", "用户 ID2",  
        std::chrono::milliseconds(1000)); //设置 1000ms 过期时间 
    predis->set("用户会话 3", "用户 ID3"); 
    predis->set("用户会话 4", "用户 ID4"); 
    predis->set("用户会话 5", "用户 ID5"); 
}

void get() { 
    auto res1 =  predis->get("用户会话 1"); 
    if (res1) std::cout << *res1 << std::endl; 
 
    auto res2 =  predis->get("用户会话 2"); 
    if (res2) std::cout << *res2 << std::endl; 
 
    auto res3 =  predis->get("用户会话 3"); 
    if (res3) std::cout << *res3 << std::endl; 
 
    auto res4 =  predis->get("用户会话 4"); 
    if (res4) std::cout << *res4 << std::endl; 
 
    auto res5 =  predis->get("用户会话 5"); 
    if (res5) std::cout << *res5 << std::endl; 
}

void update() { 
    predis->set("用户会话 1", "用户 ID 变成 31"); 
    predis->set("用户会话 4", "用户 ID 变成 41",  
        std::chrono::milliseconds(1000)); 
    predis->del("用户会话 5"); 
} 

void push_test() { 
    predis->rpush("群聊会话 1", "成员 1"); 
    predis->rpush("群聊会话 1", "成员 2"); 
    predis->rpush("群聊会话 1", "成员 3"); 
    predis->rpush("群聊会话 1", "成员 4"); 
    predis->rpush("群聊会话 1", "成员 5"); 
 
    predis->rpush("

群聊会话 2", "成员 6"); 
    predis->rpush("群聊会话 2", "成员 7"); 
    predis->rpush("群聊会话 2", "成员 8"); 
    predis->rpush("群聊会话 2", "成员 9"); 
    predis->rpush("群聊会话 2", "成员 0"); 
 
    std::vector<std::string> res; 
    predis->lrange("群聊会话 1", 0, -1, std::back_inserter(res)); 
    for (const auto &r : res) { 
        std::cout << r << std::endl; 
    } 
}

int main() { 
    sw::redis::ConnectionOptions opts; 
    opts.host = FLAGS_redis_host; 
    opts.port = FLAGS_redis_port; 
    opts.db = FLAGS_redis_db; 
    opts.keep_alive  = FLAGS_redis_keep_alive; 
    predis = std::make_shared<sw::redis::Redis>(opts); 
    std::cout << "--------add-------\n"; 
    add(); 
    std::cout << "--------get-------\n"; 
    get(); 
    std::cout << "--------2s get-------\n"; 
    std::this_thread::sleep_for(std::chrono::seconds(2)); 
    get(); 
    std::cout << "--------update-------\n"; 
    update(); 
    std::cout << "--------2s get-------\n"; 
    std::this_thread::sleep_for(std::chrono::seconds(2)); 
    get(); 
    std::cout << "--------push-------\n"; 
    push_test(); 
    return 0; 
}
```

编写 Makefile：

```makefile
main : main.cc 
    g++ -std=c++17 $^ -o $@ -lredis++ -lhiredis -lgflags -pthread 
```


# 10. ODB安装与使用

## 10.1 ODB2.5版本安装

### 10.1.1 安装build2

整个安装过程在 3 - 5 小时左右，视网络情况而定。

因为 build2 安装时，有可能会版本更新，因此在安装之前，先从 build2 官网查看安装步骤。

安装步骤可以参考官方网站：[https://build2.org/install.xhtml#unix](https://build2.org/install.xhtml#unix)

安装命令：

```bash
curl -sSfO https://download.build2.org/0.17.0/build2-install-0.17.0.sh
sh build2-install-0.17.0.sh
```

如果安装过程中遇到网络问题导致超时失败，可以通过以下命令延长超时时间：

```bash
sh build2-install-0.17.0.sh --timeout 1800
```

### 10.1.2 安装odb-compiler

安装命令：

```bash
sudo apt-get install gcc-11-plugin-dev
mkdir odb-build && cd odb-build
bpkg create -d odb-gcc-N cc \
  config.cxx=g++ \
  config.cc.coptions=-O3 \
  config.bin.rpath=/usr/lib \
  config.install.root=/usr/ \
  config.install.sudo=sudo
cd odb-gcc-N
bpkg build odb@https://pkg.cppget.org/1/beta
bpkg test odb
bpkg install odb
```

安装完毕后，检查版本：

```bash
odb --version
```

如果报错找不到 `odb`，执行以下命令：

```bash
sudo echo 'export PATH=${PATH}:/usr/local/bin' >> ~/.bashrc  
export PATH=${PATH}:/usr/local/bin
```

### 10.1.3 安装ODB运行时库

安装命令：

```bash
cd ..
bpkg create -d libodb-gcc-N cc \
  config.cxx=g++ \
  config.cc.coptions=-O3 \
  config.install.root=/usr/ \
  config.install.sudo=sudo
cd libodb-gcc-N
bpkg add https://pkg.cppget.org/1/beta
bpkg fetch
bpkg build libodb
bpkg build libodb-mysql
```

### 10.1.4 安装mysql和客户端开发包

安装命令：

```bash
sudo apt install mysql-server
sudo apt install -y libmysqlclient-dev
```

配置 MySQL：

```bash
sudo vim /etc/my.cnf  # 或者 /etc/mysql/my.cnf，有哪个修改哪个
```

添加以下内容：

```plaintext
[client]
default-character-set=utf8

[mysql]
default-character-set=utf8

[mysqld]
character-set-server=utf8
bind-address = 0.0.0.0
```

修改 root 用户密码：

```bash
sudo cat /etc/mysql/debian.cnf
sudo mysql -u debian-sys-maint -p
```

输入密码后执行以下命令修改 root 密码：

```sql
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'xxxxxx';
FLUSH PRIVILEGES;
```

重启 MySQL 并设置开机启动：

```bash
sudo systemctl restart mysql
sudo systemctl enable mysql
```

### 10.1.5 安装boost profile库

安装命令：

```bash
bpkg build libodb-boost
```

### 10.1.6 总体打包安装

打包安装命令：

```bash
bpkg install --all --recursive
```

### 10.1.7 总体卸载

卸载命令：

```bash
bpkg uninstall --all --recursive
```

### 10.1.8 总体升级

升级命令：

```bash
bpkg fetch
bpkg status
bpkg uninstall --all --recursive
bpkg build --upgrade --recursive
bpkg install --all --recursive
```

## 10.2 测试样例

### 10.2.1 编写数据结构文件：person.hxx

```cpp
#pragma once
#include <string>
#include <cstddef> // std::size_t
#include <boost/date_time/posix_time/posix_time.hpp>
#include <odb/core.hxx>

typedef boost::posix_time::ptime ptime;

#pragma db object
class Person {
    public:
        Person(const std::string &name, int age, const ptime &update)
            : _name(name), _age(age), _update(update) {}
        void age(int val) { _age = val; }
        int age() { return _age; }
        void name(const std::string& val) { _name = val; }
        std::string name() { return _name; }
        void update(const ptime &update) { _update = update; }
        std::string update() { return boost::posix_time::to_simple_string(_update); }
    private:
        friend class odb::access;
        Person() {}
        #pragma db id auto
        unsigned long _id;
        unsigned short _age;
        std::string _name;
        #pragma db type("TIMESTAMP") not_null
        boost::posix_time::ptime _update;
};
```

### 10.2.2 生成数据库支持的代码文件

生成命令：

```bash
odb -d mysql --std c++11 --generate-query --generate-schema --profile boost/date-time person.hxx
```

### 10.2.3 编写主函数代码：test.cc

```cpp
#include <string>
#include <memory>
#include <cstdlib>
#include <iostream>
#include <odb/database.hxx>
#include <odb/mysql/database.hxx>
#include "person.hxx"
#include "person-odb.hxx"

int main() {
    std::shared_ptr<odb::core::database> db(
        new odb::mysql::database("root", "Zwc111...", "mytest", "127.0.0.1", 0, 0, "utf8"));
    if (!db) { return -1; }

    ptime p = boost::posix_time::second_clock::local_time();
    Person zhang("小张", 18, p);
    Person wang("小王", 19, p);

    typedef odb::query<Person> query;
    typedef odb::result<Person> result;

    {
        odb::core::transaction t(db->begin());
        size_t zid = db->persist(zhang);
        size_t wid = db->persist(wang);
        t.commit();
    }

    {
        ptime p = boost::posix_time::time_from_string("2024-05-22 09:09:39");
        ptime e = boost::posix_time::time_from_string("2024-05-22 09:13:29");
        odb::core::transaction t(db->begin());
        result r(db->query<Person>(query::update < e && query::update > p));
        for (result::iterator i(r.begin()); i != r.end(); ++i) {
            std::cout << "Hello, " << i->name() << " " << i->age() << " " << i->update() << std::endl;
        }
        t.commit();
    }
    return 0;
}
```

### 10.2.4 代码编译

编译命令：

```bash
c++ -o test test.cpp person-odb.cxx -lodb-mysql -lodb -lodb-boost
```

如果运行时报错找不到库文件，可能是因为库文件安装在 `/usr/local/lib` 下，可以通过设置 `LD_LIBRARY_PATH` 解决：

```bash
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
```

## 10.3 ODB常见操作介绍

### 10.3.1 ODB类型映射

在 ODB 编程中，可以使用 `#pragma` 提供元数据指示如何将 C++ 类型映射到数据库模式。常用的 `#pragma` 指令包括：

1. `#pragma db object`: 声明一个类为数据库对象。
2. `#pragma db table("table_name")`: 指定类映射到数据库中的表名。
3. `#pragma db id`: 标记类中的一个成员变量为数据库表的主键。
4. `#pragma db column("column_name")`: 指定类成员映射到数据库表中的列名。
5. `#pragma db view`: 声明一个类为数据库视图。
6. `#pragma db session`: 声明一个全局或成员变量为数据库会话。
7. `#pragma db query("query")`: 定义自定义的查询函数。
8. `#pragma db index("index_name")`: 指定成员变量应该被索引。
9. `#pragma db default("default_value")`: 指定成员变量的默认值。
10. `#pragma db unique`: 指定成员变量或一组变量具有唯一性约束。
11. `#pragma db not_null`: 指定成员变量不允许为空。
12. `#pragma db auto`: 指定成员变量的值在插入时自动生成。
13. `#pragma db transient`: 指定成员变量不应该被持久化到数据库中。
14. `#pragma db type("type_name")`: 指定成员变量的数据库类型。
15. `#pragma db convert("converter")`: 指定用于成员变量

的自定义类型转换器。
16. `#pragma db pool("pool_name")`: 指定用于数据库连接的连接池。
17. `#pragma db trigger("trigger_name")`: 指定在插入、更新或删除操作时触发的触发器。

### 10.3.2 使用样例

使用 ODB 进行数据库操作的样例代码包括增删改查的基础操作、基于原生 SQL 语句的查询和基于多表连接的复杂查找等。



# 11. RabbitMq C++客户端的使用

## 11.1 安装RabbitMQ

### 11.1.1 安装教程

使用以下命令安装 RabbitMQ：

```bash
sudo apt install rabbitmq-server
```

### 11.1.2 RabbitMQ的简单使用

启动服务：

```bash
sudo systemctl start rabbitmq-server.service
```

查看服务状态：

```bash
sudo systemctl status rabbitmq-server.service
```

创建一个 `administrator` 用户，以便远程登录和发布订阅消息：

```bash
sudo rabbitmqctl add_user root 123456
sudo rabbitmqctl set_user_tags root administrator
sudo rabbitmqctl set_permissions -p / root "." "." ".*"
```

启用 RabbitMQ 自带的 web 管理界面：

```bash
sudo rabbitmq-plugins enable rabbitmq_management
```

访问 webUI 界面， 默认端口为 15672。

## 11.2 安装RabbitMQ客户端库

安装 `librabbitmq` 库：

```bash
sudo apt-get install librabbitmq-dev
```

这将在系统上安装 RabbitMQ 的客户端库，包括头文件和静态库文件。

## 11.3 安装RabbitMQ的C++客户端库

RabbitMQ 的 C++ 客户端库 AMQP-CPP 可以从以下地址获取：

- C 语言库：[https://github.com/alanxz/rabbitmq-c](https://github.com/alanxz/rabbitmq-c)
- C++ 库: [https://github.com/CopernicaMarketingSoftware/AMQP-CPP/tree/master](https://github.com/CopernicaMarketingSoftware/AMQP-CPP/tree/master)

### 11.3.1 安装AMQP-CPP

安装 `libev` 网络库组件：

```bash
sudo apt install libev-dev
```

使用以下命令下载并安装 AMQP-CPP 库：

```bash
git clone https://github.com/CopernicaMarketingSoftware/AMQP-CPP.git
cd AMQP-CPP/
make  
make install
```

## 11.4 AMQP-CPP库的简单使用

### 11.4.1 介绍

AMQP-CPP 是一个用于与 RabbitMq 消息中间件通信的 C++ 库。它能解析从 RabbitMq 服务发送来的数据，也可以生成发向 RabbitMq 的数据包。AMQP-CPP 库不会向 RabbitMq 建立网络连接，所有的网络 IO 由用户完成。AMQP-CPP 提供了可选的网络层接口，支持 TCP 模块，以及 libevent、libev、libuv、asio 等异步通信组件。

### 11.4.2 使用

AMQP-CPP 的使用有两种模式：

- 使用默认的 TCP 模块进行网络通信
- 使用扩展的 libevent、libev、libuv、asio 异步通信组件进行通信

#### 11.4.2.1 TCP模式

要实现一个 TCP 模式的客户端，需要继承 `AMQP::TcpHandler` 类并重写相关方法，例如 `onAttached`、`onConnected`、`onReady`、`onError` 等。`monitor` 函数需要实现将文件描述符放入事件循环中监控，当文件描述符可读可写时，调用 `AMQP-CPP` 的 `connection->process(fd, flags)` 方法。

```cpp
#include <amqpcpp.h>
#include <amqpcpp/linux_tcp.h>

class MyTcpHandler : public AMQP::TcpHandler {
    // 重写各种回调函数
    virtual void onAttached(AMQP::TcpConnection *connection) override {}
    virtual void onConnected(AMQP::TcpConnection *connection) override {}
    virtual void onReady(AMQP::TcpConnection *connection) override {}
    virtual void onError(AMQP::TcpConnection *connection, const char *message) override {}
    virtual void monitor(AMQP::TcpConnection *connection, int fd, int flags) override {
        // 将文件描述符添加到事件循环
    }
};
```

#### 11.4.2.2 扩展模式

使用扩展模式时，例如 libev，不必自己实现 `monitor` 函数，可以直接使用 `AMQP::LibEvHandler`。

### 11.4.3 常用类与接口介绍

#### 11.4.3.1 Channel

`Channel` 是一个虚拟连接，一个连接上可以建立多个通道。所有的 RabbitMq 指令都是通过 `Channel` 传输的。`Channel` 的操作是异步的，返回的是 `Deferred` 类，可以使用它安装处理函数。

#### 11.4.3.2 ev

`ev` 是一个基于事件的库，用于处理异步操作。

## 11.5 二次封装思想

在项目中使用 RabbitMQ 时，可以对操作进行简单的封装，提供声明交换机与队列、绑定交换机与队列、发布消息、订阅消息并设置回调函数等功能。封装的 `MQClient` 可以简化在项目中对 RabbitMQ 的操作。


