version: "3.8"


#   etcd:
#     image: etcd:latest

#   mysql:
#     image: mysql:latest

#   redis:
#     image: redis:latest

#   elasticsearch:
#     image: elasticsearch:latest

#   rabbitmq:
#     image: rabbitmq:latest


services:

  speech_server:
    build: ./1.Speech_Server
    image: speech_server:v2
    container_name: speech_server-service
    volumes:
      # 1. 希望容器内的程序能够访问宿主机上的文件
      # 2. 希望容器内程序运行所产生的数据文件能落在宿主机上
      # 挂载的信息： entrypoint.sh文件 数据目录(im/logs, im/data), 配置文件
      - ./Configs/speech_server.conf:/im/conf/speech_server.conf
      - ./docker_image_data/logs:/im/logs:rw
      - ./docker_image_data/data:/im/data:rw
      - ./entrypoint.sh:/im/bin/entrypoint.sh
    network_mode: host
    ports:
      - 10001:10001
    restart: always
    # entrypoint:
    #   # 跟dockerfile中的cmd比较类似，都是容器启动后的默认操作--替代dockerfile中的cmd
    #   /im/bin/entrypoint.sh -h 127.0.0.1 -p 2379 -c "/im/bin/speech_server -flagfile=/im/conf/speech_server.conf"

  file_server:
    build: ./2.File_Server
    image: file_server:v2
    container_name: file_server-service
    volumes:
      # 1. 希望容器内的程序能够访问宿主机上的文件
      # 2. 希望容器内程序运行所产生的数据文件能落在宿主机上
      # 挂载的信息： entrypoint.sh文件 数据目录(im/logs, im/data), 配置文件
      - ./Configs/file_server.conf:/im/conf/file_server.conf
      - ./docker_image_data/logs:/im/logs:rw
      - ./entrypoint.sh:/im/bin/entrypoint.sh
    network_mode: host
    ports:
      - 10002:10002
    restart: always
    # entrypoint:
    #   # 跟dockerfile中的cmd比较类似，都是容器启动后的默认操作--替代dockerfile中的cmd
    #   /im/bin/entrypoint.sh -h 127.0.0.1 -p 2379 -c "/im/bin/file_server -flagfile=/im/conf/file_server.conf"

  user_server:
    build: ./3.User_Server
    image: user_server:v2
    container_name: user_server-service
    volumes:
      # 1. 希望容器内的程序能够访问宿主机上的文件
      # 2. 希望容器内程序运行所产生的数据文件能落在宿主机上
      # 挂载的信息： entrypoint.sh文件 数据目录(im/logs, im/data), 配置文件
      - ./Configs/user_server.conf:/im/conf/user_server.conf
      - ./docker_image_data/logs:/im/logs:rw
      - ./entrypoint.sh:/im/bin/entrypoint.sh
    network_mode: host
    ports:
      - 10003:10003
    restart: always
    # entrypoint:
    #   # 跟dockerfile中的cmd比较类似，都是容器启动后的默认操作--替代dockerfile中的cmd
    #   /im/bin/entrypoint.sh -h 127.0.0.1 -p 2379,3306,5672,9200 -c "/im/bin/user_server -flagfile=/im/conf/user_server.conf"

  message_transmit_server:
    build: ./4.Message_Transmit_Server
    image: message_transmit_server:v2
    container_name: message_transmit_server-service
    volumes:
      # 1. 希望容器内的程序能够访问宿主机上的文件
      # 2. 希望容器内程序运行所产生的数据文件能落在宿主机上
      # 挂载的信息： entrypoint.sh文件 数据目录(im/logs, im/data), 配置文件
      - ./Configs/message_transmit_server.conf:/im/conf/message_transmit_server.conf
      - ./docker_image_data/logs:/im/logs:rw
      - ./docker_image_data/data:/im/data:rw
      - ./entrypoint.sh:/im/bin/entrypoint.sh
    network_mode: host
    ports:
      - 10004:10004
    restart: always
    # entrypoint:
    #   # 跟dockerfile中的cmd比较类似，都是容器启动后的默认操作--替代dockerfile中的cmd
    #   /im/bin/entrypoint.sh -h 127.0.0.1 -p 2379,3306,5672 -c "/im/bin/message_transmit_server -flagfile=/im/conf/message_transmit_server.conf"

  message_store_server:
    build: ./5.Message_Store_Server
    image: message_store_server:v2
    container_name: message_store_server-service
    volumes:
      # 1. 希望容器内的程序能够访问宿主机上的文件
      # 2. 希望容器内程序运行所产生的数据文件能落在宿主机上
      # 挂载的信息： entrypoint.sh文件 数据目录(im/logs, im/data), 配置文件
      - ./Configs/message_store_server.conf:/im/conf/message_store_server.conf
      - ./docker_image_data/logs:/im/logs:rw
      - ./docker_image_data/data:/im/data:rw
      - ./entrypoint.sh:/im/bin/entrypoint.sh
    network_mode: host
    ports:
      - 10005:10005
    restart: always
    # entrypoint:
    #   # 跟dockerfile中的cmd比较类似，都是容器启动后的默认操作--替代dockerfile中的cmd
    #   /im/bin/entrypoint.sh -h 127.0.0.1 -p 2379,3306,9200,5672 -c "/im/bin/message_store_server -flagfile=/im/conf/message_store_server.conf"

  friend_server:
    build: ./6.Friend_Server
    image: friend_server:v2
    container_name: friend_server-service
    volumes:
      # 1. 希望容器内的程序能够访问宿主机上的文件
      # 2. 希望容器内程序运行所产生的数据文件能落在宿主机上
      # 挂载的信息： entrypoint.sh文件 数据目录(im/logs, im/data), 配置文件
      - ./Configs/friend_server.conf:/im/conf/friend_server.conf
      - ./docker_image_data/logs:/im/logs:rw
      - ./docker_image_data/data:/im/data:rw
      - ./entrypoint.sh:/im/bin/entrypoint.sh
    network_mode: host  
    ports:
      - 10006:10006
    restart: always
    # entrypoint:
    #   # 跟dockerfile中的cmd比较类似，都是容器启动后的默认操作--替代dockerfile中的cmd
    #   /im/bin/entrypoint.sh -h 127.0.0.1 -p 2379,3306,9200 -c "/im/bin/friend_server -flagfile=/im/conf/friend_server.conf"
  
  gateway_server:
    build: ./7.Gateway_Server
    image: gateway_server:v2
    container_name: gateway_server-service
    volumes:
      # 1. 希望容器内的程序能够访问宿主机上的文件
      # 2. 希望容器内程序运行所产生的数据文件能落在宿主机上
      # 挂载的信息： entrypoint.sh文件 数据目录(im/logs, im/data), 配置文件
      - ./Configs/gateway_server.conf:/im/conf/gateway_server.conf
      - ./docker_image_data/logs:/im/logs:rw
      - ./docker_image_data/data:/im/data:rw
      - ./entrypoint.sh:/im/bin/entrypoint.sh
    network_mode: host
    ports:
      - 9000:9000
      - 9001:9001
    restart: always
    depends_on:
      - speech_server
      - file_server
      - user_server
      - message_transmit_server
      - message_store_server
      - friend_server
    # entrypoint:
    #   # 跟dockerfile中的cmd比较类似，都是容器启动后的默认操作--替代dockerfile中的cmd
    #   /im/bin/entrypoint.sh -h 127.0.0.1 -p 2379,6379 -c "/im/bin/gateway_server -flagfile=/im/conf/gateway_server.conf"
