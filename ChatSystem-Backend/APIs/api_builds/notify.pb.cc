// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify.proto

#include "notify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_base_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChatSessionInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MessageInfo;
}  // namespace protobuf_base_2eproto
namespace protobuf_notify_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_notify_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NotifyFriendRemove;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_notify_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NotifyFriendAddApply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_notify_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NotifyFriendAddProcess;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_notify_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NotifyNewChatSession;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_notify_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NotifyNewMessage;
}  // namespace protobuf_notify_2eproto
namespace chen_im {
class NotifyFriendAddApplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyFriendAddApply>
      _instance;
} _NotifyFriendAddApply_default_instance_;
class NotifyFriendAddProcessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyFriendAddProcess>
      _instance;
} _NotifyFriendAddProcess_default_instance_;
class NotifyFriendRemoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyFriendRemove>
      _instance;
} _NotifyFriendRemove_default_instance_;
class NotifyNewChatSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyNewChatSession>
      _instance;
} _NotifyNewChatSession_default_instance_;
class NotifyNewMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyNewMessage>
      _instance;
} _NotifyNewMessage_default_instance_;
class NotifyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyMessage>
      _instance;
  const ::chen_im::NotifyFriendAddApply* friend_add_apply_;
  const ::chen_im::NotifyFriendAddProcess* friend_process_result_;
  const ::chen_im::NotifyFriendRemove* friend_remove_;
  const ::chen_im::NotifyNewChatSession* new_chat_session_info_;
  const ::chen_im::NotifyNewMessage* new_message_info_;
} _NotifyMessage_default_instance_;
}  // namespace chen_im
namespace protobuf_notify_2eproto {
static void InitDefaultsNotifyFriendAddApply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NotifyFriendAddApply_default_instance_;
    new (ptr) ::chen_im::NotifyFriendAddApply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NotifyFriendAddApply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotifyFriendAddApply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotifyFriendAddApply}, {
      &protobuf_base_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsNotifyFriendAddProcess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NotifyFriendAddProcess_default_instance_;
    new (ptr) ::chen_im::NotifyFriendAddProcess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NotifyFriendAddProcess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotifyFriendAddProcess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotifyFriendAddProcess}, {
      &protobuf_base_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsNotifyFriendRemove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NotifyFriendRemove_default_instance_;
    new (ptr) ::chen_im::NotifyFriendRemove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NotifyFriendRemove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyFriendRemove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyFriendRemove}, {}};

static void InitDefaultsNotifyNewChatSession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NotifyNewChatSession_default_instance_;
    new (ptr) ::chen_im::NotifyNewChatSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NotifyNewChatSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotifyNewChatSession =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotifyNewChatSession}, {
      &protobuf_base_2eproto::scc_info_ChatSessionInfo.base,}};

static void InitDefaultsNotifyNewMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NotifyNewMessage_default_instance_;
    new (ptr) ::chen_im::NotifyNewMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NotifyNewMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotifyNewMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotifyNewMessage}, {
      &protobuf_base_2eproto::scc_info_MessageInfo.base,}};

static void InitDefaultsNotifyMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NotifyMessage_default_instance_;
    new (ptr) ::chen_im::NotifyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NotifyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_NotifyMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsNotifyMessage}, {
      &protobuf_notify_2eproto::scc_info_NotifyFriendAddApply.base,
      &protobuf_notify_2eproto::scc_info_NotifyFriendAddProcess.base,
      &protobuf_notify_2eproto::scc_info_NotifyFriendRemove.base,
      &protobuf_notify_2eproto::scc_info_NotifyNewChatSession.base,
      &protobuf_notify_2eproto::scc_info_NotifyNewMessage.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyFriendAddApply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyFriendAddProcess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyFriendRemove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyNewChatSession.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyNewMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyMessage.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyFriendAddApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyFriendAddApply, user_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyFriendAddProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyFriendAddProcess, agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyFriendAddProcess, user_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyFriendRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyFriendRemove, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyNewChatSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyNewChatSession, chat_session_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyNewMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyNewMessage, message_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyMessage, notify_event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyMessage, notify_type_),
  offsetof(::chen_im::NotifyMessageDefaultTypeInternal, friend_add_apply_),
  offsetof(::chen_im::NotifyMessageDefaultTypeInternal, friend_process_result_),
  offsetof(::chen_im::NotifyMessageDefaultTypeInternal, friend_remove_),
  offsetof(::chen_im::NotifyMessageDefaultTypeInternal, new_chat_session_info_),
  offsetof(::chen_im::NotifyMessageDefaultTypeInternal, new_message_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NotifyMessage, notify_remarks_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chen_im::NotifyFriendAddApply)},
  { 6, -1, sizeof(::chen_im::NotifyFriendAddProcess)},
  { 13, -1, sizeof(::chen_im::NotifyFriendRemove)},
  { 19, -1, sizeof(::chen_im::NotifyNewChatSession)},
  { 25, -1, sizeof(::chen_im::NotifyNewMessage)},
  { 31, -1, sizeof(::chen_im::NotifyMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NotifyFriendAddApply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NotifyFriendAddProcess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NotifyFriendRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NotifyNewChatSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NotifyNewMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NotifyMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "notify.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014notify.proto\022\007chen_im\032\nbase.proto\"<\n\024N"
      "otifyFriendAddApply\022$\n\tuser_info\030\001 \001(\0132\021"
      ".chen_im.UserInfo\"M\n\026NotifyFriendAddProc"
      "ess\022\r\n\005agree\030\001 \001(\010\022$\n\tuser_info\030\002 \001(\0132\021."
      "chen_im.UserInfo\"%\n\022NotifyFriendRemove\022\017"
      "\n\007user_id\030\001 \001(\t\"K\n\024NotifyNewChatSession\022"
      "3\n\021chat_session_info\030\001 \001(\0132\030.chen_im.Cha"
      "tSessionInfo\">\n\020NotifyNewMessage\022*\n\014mess"
      "age_info\030\001 \001(\0132\024.chen_im.MessageInfo\"\216\003\n"
      "\rNotifyMessage\022\027\n\017notify_event_id\030\001 \001(\t\022"
      "(\n\013notify_type\030\002 \001(\0162\023.chen_im.NotifyTyp"
      "e\0229\n\020friend_add_apply\030\003 \001(\0132\035.chen_im.No"
      "tifyFriendAddApplyH\000\022@\n\025friend_process_r"
      "esult\030\004 \001(\0132\037.chen_im.NotifyFriendAddPro"
      "cessH\000\0224\n\rfriend_remove\030\007 \001(\0132\033.chen_im."
      "NotifyFriendRemoveH\000\022>\n\025new_chat_session"
      "_info\030\005 \001(\0132\035.chen_im.NotifyNewChatSessi"
      "onH\000\0225\n\020new_message_info\030\006 \001(\0132\031.chen_im"
      ".NotifyNewMessageH\000B\020\n\016notify_remarks*\233\001"
      "\n\nNotifyType\022\033\n\027FRIEND_ADD_APPLY_NOTIFY\020"
      "\000\022\035\n\031FRIEND_ADD_PROCESS_NOTIFY\020\001\022\036\n\032CHAT"
      "_SESSION_CREATE_NOTIFY\020\002\022\027\n\023CHAT_MESSAGE"
      "_NOTIFY\020\003\022\030\n\024FRIEND_REMOVE_NOTIFY\020\004B\003\200\001\001"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 928);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "notify.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_notify_2eproto
namespace chen_im {
const ::google::protobuf::EnumDescriptor* NotifyType_descriptor() {
  protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_notify_2eproto::file_level_enum_descriptors[0];
}
bool NotifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NotifyFriendAddApply::InitAsDefaultInstance() {
  ::chen_im::_NotifyFriendAddApply_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::chen_im::UserInfo*>(
      ::chen_im::UserInfo::internal_default_instance());
}
void NotifyFriendAddApply::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyFriendAddApply::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyFriendAddApply::NotifyFriendAddApply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_notify_2eproto::scc_info_NotifyFriendAddApply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NotifyFriendAddApply)
}
NotifyFriendAddApply::NotifyFriendAddApply(const NotifyFriendAddApply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_info()) {
    user_info_ = new ::chen_im::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.NotifyFriendAddApply)
}

void NotifyFriendAddApply::SharedCtor() {
  user_info_ = NULL;
}

NotifyFriendAddApply::~NotifyFriendAddApply() {
  // @@protoc_insertion_point(destructor:chen_im.NotifyFriendAddApply)
  SharedDtor();
}

void NotifyFriendAddApply::SharedDtor() {
  if (this != internal_default_instance()) delete user_info_;
}

void NotifyFriendAddApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyFriendAddApply::descriptor() {
  ::protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyFriendAddApply& NotifyFriendAddApply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_notify_2eproto::scc_info_NotifyFriendAddApply.base);
  return *internal_default_instance();
}


void NotifyFriendAddApply::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NotifyFriendAddApply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  _internal_metadata_.Clear();
}

bool NotifyFriendAddApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NotifyFriendAddApply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chen_im.UserInfo user_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NotifyFriendAddApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NotifyFriendAddApply)
  return false;
#undef DO_
}

void NotifyFriendAddApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NotifyFriendAddApply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.UserInfo user_info = 1;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NotifyFriendAddApply)
}

::google::protobuf::uint8* NotifyFriendAddApply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NotifyFriendAddApply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.UserInfo user_info = 1;
  if (this->has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NotifyFriendAddApply)
  return target;
}

size_t NotifyFriendAddApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NotifyFriendAddApply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .chen_im.UserInfo user_info = 1;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyFriendAddApply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NotifyFriendAddApply)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyFriendAddApply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyFriendAddApply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NotifyFriendAddApply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NotifyFriendAddApply)
    MergeFrom(*source);
  }
}

void NotifyFriendAddApply::MergeFrom(const NotifyFriendAddApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NotifyFriendAddApply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_info()) {
    mutable_user_info()->::chen_im::UserInfo::MergeFrom(from.user_info());
  }
}

void NotifyFriendAddApply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NotifyFriendAddApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFriendAddApply::CopyFrom(const NotifyFriendAddApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NotifyFriendAddApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendAddApply::IsInitialized() const {
  return true;
}

void NotifyFriendAddApply::Swap(NotifyFriendAddApply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyFriendAddApply::InternalSwap(NotifyFriendAddApply* other) {
  using std::swap;
  swap(user_info_, other->user_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyFriendAddApply::GetMetadata() const {
  protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotifyFriendAddProcess::InitAsDefaultInstance() {
  ::chen_im::_NotifyFriendAddProcess_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::chen_im::UserInfo*>(
      ::chen_im::UserInfo::internal_default_instance());
}
void NotifyFriendAddProcess::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyFriendAddProcess::kAgreeFieldNumber;
const int NotifyFriendAddProcess::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyFriendAddProcess::NotifyFriendAddProcess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_notify_2eproto::scc_info_NotifyFriendAddProcess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NotifyFriendAddProcess)
}
NotifyFriendAddProcess::NotifyFriendAddProcess(const NotifyFriendAddProcess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_info()) {
    user_info_ = new ::chen_im::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  agree_ = from.agree_;
  // @@protoc_insertion_point(copy_constructor:chen_im.NotifyFriendAddProcess)
}

void NotifyFriendAddProcess::SharedCtor() {
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(agree_));
}

NotifyFriendAddProcess::~NotifyFriendAddProcess() {
  // @@protoc_insertion_point(destructor:chen_im.NotifyFriendAddProcess)
  SharedDtor();
}

void NotifyFriendAddProcess::SharedDtor() {
  if (this != internal_default_instance()) delete user_info_;
}

void NotifyFriendAddProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyFriendAddProcess::descriptor() {
  ::protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyFriendAddProcess& NotifyFriendAddProcess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_notify_2eproto::scc_info_NotifyFriendAddProcess.base);
  return *internal_default_instance();
}


void NotifyFriendAddProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NotifyFriendAddProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  agree_ = false;
  _internal_metadata_.Clear();
}

bool NotifyFriendAddProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NotifyFriendAddProcess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool agree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.UserInfo user_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NotifyFriendAddProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NotifyFriendAddProcess)
  return false;
#undef DO_
}

void NotifyFriendAddProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NotifyFriendAddProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // .chen_im.UserInfo user_info = 2;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_user_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NotifyFriendAddProcess)
}

::google::protobuf::uint8* NotifyFriendAddProcess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NotifyFriendAddProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  // .chen_im.UserInfo user_info = 2;
  if (this->has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_user_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NotifyFriendAddProcess)
  return target;
}

size_t NotifyFriendAddProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NotifyFriendAddProcess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .chen_im.UserInfo user_info = 2;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // bool agree = 1;
  if (this->agree() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyFriendAddProcess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NotifyFriendAddProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyFriendAddProcess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyFriendAddProcess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NotifyFriendAddProcess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NotifyFriendAddProcess)
    MergeFrom(*source);
  }
}

void NotifyFriendAddProcess::MergeFrom(const NotifyFriendAddProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NotifyFriendAddProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_info()) {
    mutable_user_info()->::chen_im::UserInfo::MergeFrom(from.user_info());
  }
  if (from.agree() != 0) {
    set_agree(from.agree());
  }
}

void NotifyFriendAddProcess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NotifyFriendAddProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFriendAddProcess::CopyFrom(const NotifyFriendAddProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NotifyFriendAddProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendAddProcess::IsInitialized() const {
  return true;
}

void NotifyFriendAddProcess::Swap(NotifyFriendAddProcess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyFriendAddProcess::InternalSwap(NotifyFriendAddProcess* other) {
  using std::swap;
  swap(user_info_, other->user_info_);
  swap(agree_, other->agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyFriendAddProcess::GetMetadata() const {
  protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotifyFriendRemove::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyFriendRemove::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyFriendRemove::NotifyFriendRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_notify_2eproto::scc_info_NotifyFriendRemove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NotifyFriendRemove)
}
NotifyFriendRemove::NotifyFriendRemove(const NotifyFriendRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.NotifyFriendRemove)
}

void NotifyFriendRemove::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NotifyFriendRemove::~NotifyFriendRemove() {
  // @@protoc_insertion_point(destructor:chen_im.NotifyFriendRemove)
  SharedDtor();
}

void NotifyFriendRemove::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotifyFriendRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyFriendRemove::descriptor() {
  ::protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyFriendRemove& NotifyFriendRemove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_notify_2eproto::scc_info_NotifyFriendRemove.base);
  return *internal_default_instance();
}


void NotifyFriendRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NotifyFriendRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NotifyFriendRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NotifyFriendRemove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NotifyFriendRemove.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NotifyFriendRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NotifyFriendRemove)
  return false;
#undef DO_
}

void NotifyFriendRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NotifyFriendRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NotifyFriendRemove.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NotifyFriendRemove)
}

::google::protobuf::uint8* NotifyFriendRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NotifyFriendRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NotifyFriendRemove.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NotifyFriendRemove)
  return target;
}

size_t NotifyFriendRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NotifyFriendRemove)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyFriendRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NotifyFriendRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyFriendRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyFriendRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NotifyFriendRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NotifyFriendRemove)
    MergeFrom(*source);
  }
}

void NotifyFriendRemove::MergeFrom(const NotifyFriendRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NotifyFriendRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void NotifyFriendRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NotifyFriendRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFriendRemove::CopyFrom(const NotifyFriendRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NotifyFriendRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendRemove::IsInitialized() const {
  return true;
}

void NotifyFriendRemove::Swap(NotifyFriendRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyFriendRemove::InternalSwap(NotifyFriendRemove* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyFriendRemove::GetMetadata() const {
  protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotifyNewChatSession::InitAsDefaultInstance() {
  ::chen_im::_NotifyNewChatSession_default_instance_._instance.get_mutable()->chat_session_info_ = const_cast< ::chen_im::ChatSessionInfo*>(
      ::chen_im::ChatSessionInfo::internal_default_instance());
}
void NotifyNewChatSession::clear_chat_session_info() {
  if (GetArenaNoVirtual() == NULL && chat_session_info_ != NULL) {
    delete chat_session_info_;
  }
  chat_session_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyNewChatSession::kChatSessionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyNewChatSession::NotifyNewChatSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_notify_2eproto::scc_info_NotifyNewChatSession.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NotifyNewChatSession)
}
NotifyNewChatSession::NotifyNewChatSession(const NotifyNewChatSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chat_session_info()) {
    chat_session_info_ = new ::chen_im::ChatSessionInfo(*from.chat_session_info_);
  } else {
    chat_session_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.NotifyNewChatSession)
}

void NotifyNewChatSession::SharedCtor() {
  chat_session_info_ = NULL;
}

NotifyNewChatSession::~NotifyNewChatSession() {
  // @@protoc_insertion_point(destructor:chen_im.NotifyNewChatSession)
  SharedDtor();
}

void NotifyNewChatSession::SharedDtor() {
  if (this != internal_default_instance()) delete chat_session_info_;
}

void NotifyNewChatSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyNewChatSession::descriptor() {
  ::protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyNewChatSession& NotifyNewChatSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_notify_2eproto::scc_info_NotifyNewChatSession.base);
  return *internal_default_instance();
}


void NotifyNewChatSession::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NotifyNewChatSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && chat_session_info_ != NULL) {
    delete chat_session_info_;
  }
  chat_session_info_ = NULL;
  _internal_metadata_.Clear();
}

bool NotifyNewChatSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NotifyNewChatSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chen_im.ChatSessionInfo chat_session_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_session_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NotifyNewChatSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NotifyNewChatSession)
  return false;
#undef DO_
}

void NotifyNewChatSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NotifyNewChatSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.ChatSessionInfo chat_session_info = 1;
  if (this->has_chat_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_chat_session_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NotifyNewChatSession)
}

::google::protobuf::uint8* NotifyNewChatSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NotifyNewChatSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.ChatSessionInfo chat_session_info = 1;
  if (this->has_chat_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_chat_session_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NotifyNewChatSession)
  return target;
}

size_t NotifyNewChatSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NotifyNewChatSession)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .chen_im.ChatSessionInfo chat_session_info = 1;
  if (this->has_chat_session_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_session_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyNewChatSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NotifyNewChatSession)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyNewChatSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyNewChatSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NotifyNewChatSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NotifyNewChatSession)
    MergeFrom(*source);
  }
}

void NotifyNewChatSession::MergeFrom(const NotifyNewChatSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NotifyNewChatSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_session_info()) {
    mutable_chat_session_info()->::chen_im::ChatSessionInfo::MergeFrom(from.chat_session_info());
  }
}

void NotifyNewChatSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NotifyNewChatSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNewChatSession::CopyFrom(const NotifyNewChatSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NotifyNewChatSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewChatSession::IsInitialized() const {
  return true;
}

void NotifyNewChatSession::Swap(NotifyNewChatSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyNewChatSession::InternalSwap(NotifyNewChatSession* other) {
  using std::swap;
  swap(chat_session_info_, other->chat_session_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyNewChatSession::GetMetadata() const {
  protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotifyNewMessage::InitAsDefaultInstance() {
  ::chen_im::_NotifyNewMessage_default_instance_._instance.get_mutable()->message_info_ = const_cast< ::chen_im::MessageInfo*>(
      ::chen_im::MessageInfo::internal_default_instance());
}
void NotifyNewMessage::clear_message_info() {
  if (GetArenaNoVirtual() == NULL && message_info_ != NULL) {
    delete message_info_;
  }
  message_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyNewMessage::kMessageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyNewMessage::NotifyNewMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_notify_2eproto::scc_info_NotifyNewMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NotifyNewMessage)
}
NotifyNewMessage::NotifyNewMessage(const NotifyNewMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_info()) {
    message_info_ = new ::chen_im::MessageInfo(*from.message_info_);
  } else {
    message_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.NotifyNewMessage)
}

void NotifyNewMessage::SharedCtor() {
  message_info_ = NULL;
}

NotifyNewMessage::~NotifyNewMessage() {
  // @@protoc_insertion_point(destructor:chen_im.NotifyNewMessage)
  SharedDtor();
}

void NotifyNewMessage::SharedDtor() {
  if (this != internal_default_instance()) delete message_info_;
}

void NotifyNewMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyNewMessage::descriptor() {
  ::protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyNewMessage& NotifyNewMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_notify_2eproto::scc_info_NotifyNewMessage.base);
  return *internal_default_instance();
}


void NotifyNewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NotifyNewMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && message_info_ != NULL) {
    delete message_info_;
  }
  message_info_ = NULL;
  _internal_metadata_.Clear();
}

bool NotifyNewMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NotifyNewMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chen_im.MessageInfo message_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NotifyNewMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NotifyNewMessage)
  return false;
#undef DO_
}

void NotifyNewMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NotifyNewMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.MessageInfo message_info = 1;
  if (this->has_message_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_message_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NotifyNewMessage)
}

::google::protobuf::uint8* NotifyNewMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NotifyNewMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.MessageInfo message_info = 1;
  if (this->has_message_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_message_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NotifyNewMessage)
  return target;
}

size_t NotifyNewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NotifyNewMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .chen_im.MessageInfo message_info = 1;
  if (this->has_message_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyNewMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NotifyNewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyNewMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyNewMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NotifyNewMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NotifyNewMessage)
    MergeFrom(*source);
  }
}

void NotifyNewMessage::MergeFrom(const NotifyNewMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NotifyNewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_info()) {
    mutable_message_info()->::chen_im::MessageInfo::MergeFrom(from.message_info());
  }
}

void NotifyNewMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NotifyNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNewMessage::CopyFrom(const NotifyNewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NotifyNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewMessage::IsInitialized() const {
  return true;
}

void NotifyNewMessage::Swap(NotifyNewMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyNewMessage::InternalSwap(NotifyNewMessage* other) {
  using std::swap;
  swap(message_info_, other->message_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyNewMessage::GetMetadata() const {
  protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotifyMessage::InitAsDefaultInstance() {
  ::chen_im::_NotifyMessage_default_instance_.friend_add_apply_ = const_cast< ::chen_im::NotifyFriendAddApply*>(
      ::chen_im::NotifyFriendAddApply::internal_default_instance());
  ::chen_im::_NotifyMessage_default_instance_.friend_process_result_ = const_cast< ::chen_im::NotifyFriendAddProcess*>(
      ::chen_im::NotifyFriendAddProcess::internal_default_instance());
  ::chen_im::_NotifyMessage_default_instance_.friend_remove_ = const_cast< ::chen_im::NotifyFriendRemove*>(
      ::chen_im::NotifyFriendRemove::internal_default_instance());
  ::chen_im::_NotifyMessage_default_instance_.new_chat_session_info_ = const_cast< ::chen_im::NotifyNewChatSession*>(
      ::chen_im::NotifyNewChatSession::internal_default_instance());
  ::chen_im::_NotifyMessage_default_instance_.new_message_info_ = const_cast< ::chen_im::NotifyNewMessage*>(
      ::chen_im::NotifyNewMessage::internal_default_instance());
}
void NotifyMessage::set_allocated_friend_add_apply(::chen_im::NotifyFriendAddApply* friend_add_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_notify_remarks();
  if (friend_add_apply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      friend_add_apply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friend_add_apply, submessage_arena);
    }
    set_has_friend_add_apply();
    notify_remarks_.friend_add_apply_ = friend_add_apply;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyMessage.friend_add_apply)
}
void NotifyMessage::set_allocated_friend_process_result(::chen_im::NotifyFriendAddProcess* friend_process_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_notify_remarks();
  if (friend_process_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      friend_process_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friend_process_result, submessage_arena);
    }
    set_has_friend_process_result();
    notify_remarks_.friend_process_result_ = friend_process_result;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyMessage.friend_process_result)
}
void NotifyMessage::set_allocated_friend_remove(::chen_im::NotifyFriendRemove* friend_remove) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_notify_remarks();
  if (friend_remove) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      friend_remove = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friend_remove, submessage_arena);
    }
    set_has_friend_remove();
    notify_remarks_.friend_remove_ = friend_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyMessage.friend_remove)
}
void NotifyMessage::set_allocated_new_chat_session_info(::chen_im::NotifyNewChatSession* new_chat_session_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_notify_remarks();
  if (new_chat_session_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_chat_session_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_chat_session_info, submessage_arena);
    }
    set_has_new_chat_session_info();
    notify_remarks_.new_chat_session_info_ = new_chat_session_info;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyMessage.new_chat_session_info)
}
void NotifyMessage::set_allocated_new_message_info(::chen_im::NotifyNewMessage* new_message_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_notify_remarks();
  if (new_message_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_message_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_message_info, submessage_arena);
    }
    set_has_new_message_info();
    notify_remarks_.new_message_info_ = new_message_info;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyMessage.new_message_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyMessage::kNotifyEventIdFieldNumber;
const int NotifyMessage::kNotifyTypeFieldNumber;
const int NotifyMessage::kFriendAddApplyFieldNumber;
const int NotifyMessage::kFriendProcessResultFieldNumber;
const int NotifyMessage::kFriendRemoveFieldNumber;
const int NotifyMessage::kNewChatSessionInfoFieldNumber;
const int NotifyMessage::kNewMessageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyMessage::NotifyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_notify_2eproto::scc_info_NotifyMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NotifyMessage)
}
NotifyMessage::NotifyMessage(const NotifyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notify_event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.notify_event_id().size() > 0) {
    notify_event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_event_id_);
  }
  notify_type_ = from.notify_type_;
  clear_has_notify_remarks();
  switch (from.notify_remarks_case()) {
    case kFriendAddApply: {
      mutable_friend_add_apply()->::chen_im::NotifyFriendAddApply::MergeFrom(from.friend_add_apply());
      break;
    }
    case kFriendProcessResult: {
      mutable_friend_process_result()->::chen_im::NotifyFriendAddProcess::MergeFrom(from.friend_process_result());
      break;
    }
    case kFriendRemove: {
      mutable_friend_remove()->::chen_im::NotifyFriendRemove::MergeFrom(from.friend_remove());
      break;
    }
    case kNewChatSessionInfo: {
      mutable_new_chat_session_info()->::chen_im::NotifyNewChatSession::MergeFrom(from.new_chat_session_info());
      break;
    }
    case kNewMessageInfo: {
      mutable_new_message_info()->::chen_im::NotifyNewMessage::MergeFrom(from.new_message_info());
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.NotifyMessage)
}

void NotifyMessage::SharedCtor() {
  notify_event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_type_ = 0;
  clear_has_notify_remarks();
}

NotifyMessage::~NotifyMessage() {
  // @@protoc_insertion_point(destructor:chen_im.NotifyMessage)
  SharedDtor();
}

void NotifyMessage::SharedDtor() {
  notify_event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_notify_remarks()) {
    clear_notify_remarks();
  }
}

void NotifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyMessage::descriptor() {
  ::protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyMessage& NotifyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_notify_2eproto::scc_info_NotifyMessage.base);
  return *internal_default_instance();
}


void NotifyMessage::clear_notify_remarks() {
// @@protoc_insertion_point(one_of_clear_start:chen_im.NotifyMessage)
  switch (notify_remarks_case()) {
    case kFriendAddApply: {
      delete notify_remarks_.friend_add_apply_;
      break;
    }
    case kFriendProcessResult: {
      delete notify_remarks_.friend_process_result_;
      break;
    }
    case kFriendRemove: {
      delete notify_remarks_.friend_remove_;
      break;
    }
    case kNewChatSessionInfo: {
      delete notify_remarks_.new_chat_session_info_;
      break;
    }
    case kNewMessageInfo: {
      delete notify_remarks_.new_message_info_;
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NOTIFY_REMARKS_NOT_SET;
}


void NotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NotifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notify_event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_type_ = 0;
  clear_notify_remarks();
  _internal_metadata_.Clear();
}

bool NotifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NotifyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string notify_event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify_event_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NotifyMessage.notify_event_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.NotifyType notify_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_notify_type(static_cast< ::chen_im::NotifyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.NotifyFriendAddApply friend_add_apply = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_friend_add_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.NotifyFriendAddProcess friend_process_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_friend_process_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.NotifyNewChatSession new_chat_session_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_chat_session_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.NotifyNewMessage new_message_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_message_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.NotifyFriendRemove friend_remove = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_friend_remove()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NotifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NotifyMessage)
  return false;
#undef DO_
}

void NotifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NotifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string notify_event_id = 1;
  if (this->notify_event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NotifyMessage.notify_event_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notify_event_id(), output);
  }

  // .chen_im.NotifyType notify_type = 2;
  if (this->notify_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->notify_type(), output);
  }

  // .chen_im.NotifyFriendAddApply friend_add_apply = 3;
  if (has_friend_add_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_friend_add_apply(), output);
  }

  // .chen_im.NotifyFriendAddProcess friend_process_result = 4;
  if (has_friend_process_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_friend_process_result(), output);
  }

  // .chen_im.NotifyNewChatSession new_chat_session_info = 5;
  if (has_new_chat_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_new_chat_session_info(), output);
  }

  // .chen_im.NotifyNewMessage new_message_info = 6;
  if (has_new_message_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_new_message_info(), output);
  }

  // .chen_im.NotifyFriendRemove friend_remove = 7;
  if (has_friend_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_friend_remove(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NotifyMessage)
}

::google::protobuf::uint8* NotifyMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NotifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string notify_event_id = 1;
  if (this->notify_event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NotifyMessage.notify_event_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notify_event_id(), target);
  }

  // .chen_im.NotifyType notify_type = 2;
  if (this->notify_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->notify_type(), target);
  }

  // .chen_im.NotifyFriendAddApply friend_add_apply = 3;
  if (has_friend_add_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_friend_add_apply(), deterministic, target);
  }

  // .chen_im.NotifyFriendAddProcess friend_process_result = 4;
  if (has_friend_process_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_friend_process_result(), deterministic, target);
  }

  // .chen_im.NotifyNewChatSession new_chat_session_info = 5;
  if (has_new_chat_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_new_chat_session_info(), deterministic, target);
  }

  // .chen_im.NotifyNewMessage new_message_info = 6;
  if (has_new_message_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_new_message_info(), deterministic, target);
  }

  // .chen_im.NotifyFriendRemove friend_remove = 7;
  if (has_friend_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_friend_remove(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NotifyMessage)
  return target;
}

size_t NotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NotifyMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string notify_event_id = 1;
  if (this->notify_event_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notify_event_id());
  }

  // .chen_im.NotifyType notify_type = 2;
  if (this->notify_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
  }

  switch (notify_remarks_case()) {
    // .chen_im.NotifyFriendAddApply friend_add_apply = 3;
    case kFriendAddApply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notify_remarks_.friend_add_apply_);
      break;
    }
    // .chen_im.NotifyFriendAddProcess friend_process_result = 4;
    case kFriendProcessResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notify_remarks_.friend_process_result_);
      break;
    }
    // .chen_im.NotifyFriendRemove friend_remove = 7;
    case kFriendRemove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notify_remarks_.friend_remove_);
      break;
    }
    // .chen_im.NotifyNewChatSession new_chat_session_info = 5;
    case kNewChatSessionInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notify_remarks_.new_chat_session_info_);
      break;
    }
    // .chen_im.NotifyNewMessage new_message_info = 6;
    case kNewMessageInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notify_remarks_.new_message_info_);
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NotifyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NotifyMessage)
    MergeFrom(*source);
  }
}

void NotifyMessage::MergeFrom(const NotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notify_event_id().size() > 0) {

    notify_event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_event_id_);
  }
  if (from.notify_type() != 0) {
    set_notify_type(from.notify_type());
  }
  switch (from.notify_remarks_case()) {
    case kFriendAddApply: {
      mutable_friend_add_apply()->::chen_im::NotifyFriendAddApply::MergeFrom(from.friend_add_apply());
      break;
    }
    case kFriendProcessResult: {
      mutable_friend_process_result()->::chen_im::NotifyFriendAddProcess::MergeFrom(from.friend_process_result());
      break;
    }
    case kFriendRemove: {
      mutable_friend_remove()->::chen_im::NotifyFriendRemove::MergeFrom(from.friend_remove());
      break;
    }
    case kNewChatSessionInfo: {
      mutable_new_chat_session_info()->::chen_im::NotifyNewChatSession::MergeFrom(from.new_chat_session_info());
      break;
    }
    case kNewMessageInfo: {
      mutable_new_message_info()->::chen_im::NotifyNewMessage::MergeFrom(from.new_message_info());
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
}

void NotifyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMessage::CopyFrom(const NotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMessage::IsInitialized() const {
  return true;
}

void NotifyMessage::Swap(NotifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyMessage::InternalSwap(NotifyMessage* other) {
  using std::swap;
  notify_event_id_.Swap(&other->notify_event_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(notify_type_, other->notify_type_);
  swap(notify_remarks_, other->notify_remarks_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyMessage::GetMetadata() const {
  protobuf_notify_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_notify_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NotifyFriendAddApply* Arena::CreateMaybeMessage< ::chen_im::NotifyFriendAddApply >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NotifyFriendAddApply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NotifyFriendAddProcess* Arena::CreateMaybeMessage< ::chen_im::NotifyFriendAddProcess >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NotifyFriendAddProcess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NotifyFriendRemove* Arena::CreateMaybeMessage< ::chen_im::NotifyFriendRemove >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NotifyFriendRemove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NotifyNewChatSession* Arena::CreateMaybeMessage< ::chen_im::NotifyNewChatSession >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NotifyNewChatSession >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NotifyNewMessage* Arena::CreateMaybeMessage< ::chen_im::NotifyNewMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NotifyNewMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NotifyMessage* Arena::CreateMaybeMessage< ::chen_im::NotifyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NotifyMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
