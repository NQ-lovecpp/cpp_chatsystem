// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_INCLUDED_user_2eproto
#define PROTOBUF_INCLUDED_user_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_user_2eproto 

namespace protobuf_user_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_user_2eproto
namespace chen_im {
class GetUserInfoReq;
class GetUserInfoReqDefaultTypeInternal;
extern GetUserInfoReqDefaultTypeInternal _GetUserInfoReq_default_instance_;
class GetUserInfoRsp;
class GetUserInfoRspDefaultTypeInternal;
extern GetUserInfoRspDefaultTypeInternal _GetUserInfoRsp_default_instance_;
class PhoneLoginReq;
class PhoneLoginReqDefaultTypeInternal;
extern PhoneLoginReqDefaultTypeInternal _PhoneLoginReq_default_instance_;
class PhoneLoginRsp;
class PhoneLoginRspDefaultTypeInternal;
extern PhoneLoginRspDefaultTypeInternal _PhoneLoginRsp_default_instance_;
class PhoneRegisterReq;
class PhoneRegisterReqDefaultTypeInternal;
extern PhoneRegisterReqDefaultTypeInternal _PhoneRegisterReq_default_instance_;
class PhoneRegisterRsp;
class PhoneRegisterRspDefaultTypeInternal;
extern PhoneRegisterRspDefaultTypeInternal _PhoneRegisterRsp_default_instance_;
class PhoneVerifyCodeReq;
class PhoneVerifyCodeReqDefaultTypeInternal;
extern PhoneVerifyCodeReqDefaultTypeInternal _PhoneVerifyCodeReq_default_instance_;
class PhoneVerifyCodeRsp;
class PhoneVerifyCodeRspDefaultTypeInternal;
extern PhoneVerifyCodeRspDefaultTypeInternal _PhoneVerifyCodeRsp_default_instance_;
class SetUserAvatarReq;
class SetUserAvatarReqDefaultTypeInternal;
extern SetUserAvatarReqDefaultTypeInternal _SetUserAvatarReq_default_instance_;
class SetUserAvatarRsp;
class SetUserAvatarRspDefaultTypeInternal;
extern SetUserAvatarRspDefaultTypeInternal _SetUserAvatarRsp_default_instance_;
class SetUserDescriptionReq;
class SetUserDescriptionReqDefaultTypeInternal;
extern SetUserDescriptionReqDefaultTypeInternal _SetUserDescriptionReq_default_instance_;
class SetUserDescriptionRsp;
class SetUserDescriptionRspDefaultTypeInternal;
extern SetUserDescriptionRspDefaultTypeInternal _SetUserDescriptionRsp_default_instance_;
class SetUserNicknameReq;
class SetUserNicknameReqDefaultTypeInternal;
extern SetUserNicknameReqDefaultTypeInternal _SetUserNicknameReq_default_instance_;
class SetUserNicknameRsp;
class SetUserNicknameRspDefaultTypeInternal;
extern SetUserNicknameRspDefaultTypeInternal _SetUserNicknameRsp_default_instance_;
class SetUserPhoneNumberReq;
class SetUserPhoneNumberReqDefaultTypeInternal;
extern SetUserPhoneNumberReqDefaultTypeInternal _SetUserPhoneNumberReq_default_instance_;
class SetUserPhoneNumberRsp;
class SetUserPhoneNumberRspDefaultTypeInternal;
extern SetUserPhoneNumberRspDefaultTypeInternal _SetUserPhoneNumberRsp_default_instance_;
class UserLoginReq;
class UserLoginReqDefaultTypeInternal;
extern UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
class UserLoginRsp;
class UserLoginRspDefaultTypeInternal;
extern UserLoginRspDefaultTypeInternal _UserLoginRsp_default_instance_;
class UserRegisterReq;
class UserRegisterReqDefaultTypeInternal;
extern UserRegisterReqDefaultTypeInternal _UserRegisterReq_default_instance_;
class UserRegisterRsp;
class UserRegisterRspDefaultTypeInternal;
extern UserRegisterRspDefaultTypeInternal _UserRegisterRsp_default_instance_;
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> ::chen_im::GetUserInfoReq* Arena::CreateMaybeMessage<::chen_im::GetUserInfoReq>(Arena*);
template<> ::chen_im::GetUserInfoRsp* Arena::CreateMaybeMessage<::chen_im::GetUserInfoRsp>(Arena*);
template<> ::chen_im::PhoneLoginReq* Arena::CreateMaybeMessage<::chen_im::PhoneLoginReq>(Arena*);
template<> ::chen_im::PhoneLoginRsp* Arena::CreateMaybeMessage<::chen_im::PhoneLoginRsp>(Arena*);
template<> ::chen_im::PhoneRegisterReq* Arena::CreateMaybeMessage<::chen_im::PhoneRegisterReq>(Arena*);
template<> ::chen_im::PhoneRegisterRsp* Arena::CreateMaybeMessage<::chen_im::PhoneRegisterRsp>(Arena*);
template<> ::chen_im::PhoneVerifyCodeReq* Arena::CreateMaybeMessage<::chen_im::PhoneVerifyCodeReq>(Arena*);
template<> ::chen_im::PhoneVerifyCodeRsp* Arena::CreateMaybeMessage<::chen_im::PhoneVerifyCodeRsp>(Arena*);
template<> ::chen_im::SetUserAvatarReq* Arena::CreateMaybeMessage<::chen_im::SetUserAvatarReq>(Arena*);
template<> ::chen_im::SetUserAvatarRsp* Arena::CreateMaybeMessage<::chen_im::SetUserAvatarRsp>(Arena*);
template<> ::chen_im::SetUserDescriptionReq* Arena::CreateMaybeMessage<::chen_im::SetUserDescriptionReq>(Arena*);
template<> ::chen_im::SetUserDescriptionRsp* Arena::CreateMaybeMessage<::chen_im::SetUserDescriptionRsp>(Arena*);
template<> ::chen_im::SetUserNicknameReq* Arena::CreateMaybeMessage<::chen_im::SetUserNicknameReq>(Arena*);
template<> ::chen_im::SetUserNicknameRsp* Arena::CreateMaybeMessage<::chen_im::SetUserNicknameRsp>(Arena*);
template<> ::chen_im::SetUserPhoneNumberReq* Arena::CreateMaybeMessage<::chen_im::SetUserPhoneNumberReq>(Arena*);
template<> ::chen_im::SetUserPhoneNumberRsp* Arena::CreateMaybeMessage<::chen_im::SetUserPhoneNumberRsp>(Arena*);
template<> ::chen_im::UserLoginReq* Arena::CreateMaybeMessage<::chen_im::UserLoginReq>(Arena*);
template<> ::chen_im::UserLoginRsp* Arena::CreateMaybeMessage<::chen_im::UserLoginRsp>(Arena*);
template<> ::chen_im::UserRegisterReq* Arena::CreateMaybeMessage<::chen_im::UserRegisterReq>(Arena*);
template<> ::chen_im::UserRegisterRsp* Arena::CreateMaybeMessage<::chen_im::UserRegisterRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chen_im {

// ===================================================================

class UserRegisterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.UserRegisterReq) */ {
 public:
  UserRegisterReq();
  virtual ~UserRegisterReq();

  UserRegisterReq(const UserRegisterReq& from);

  inline UserRegisterReq& operator=(const UserRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterReq(UserRegisterReq&& from) noexcept
    : UserRegisterReq() {
    *this = ::std::move(from);
  }

  inline UserRegisterReq& operator=(UserRegisterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterReq* internal_default_instance() {
    return reinterpret_cast<const UserRegisterReq*>(
               &_UserRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserRegisterReq* other);
  friend void swap(UserRegisterReq& a, UserRegisterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterReq* New() const final {
    return CreateMaybeMessage<UserRegisterReq>(NULL);
  }

  UserRegisterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegisterReq& from);
  void MergeFrom(const UserRegisterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string verify_code_id = 4;
  void clear_verify_code_id();
  static const int kVerifyCodeIdFieldNumber = 4;
  const ::std::string& verify_code_id() const;
  void set_verify_code_id(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code_id(::std::string&& value);
  #endif
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  ::std::string* mutable_verify_code_id();
  ::std::string* release_verify_code_id();
  void set_allocated_verify_code_id(::std::string* verify_code_id);

  // string verify_code = 5;
  void clear_verify_code();
  static const int kVerifyCodeFieldNumber = 5;
  const ::std::string& verify_code() const;
  void set_verify_code(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code(::std::string&& value);
  #endif
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  ::std::string* mutable_verify_code();
  ::std::string* release_verify_code();
  void set_allocated_verify_code(::std::string* verify_code);

  // @@protoc_insertion_point(class_scope:chen_im.UserRegisterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_id_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRegisterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.UserRegisterRsp) */ {
 public:
  UserRegisterRsp();
  virtual ~UserRegisterRsp();

  UserRegisterRsp(const UserRegisterRsp& from);

  inline UserRegisterRsp& operator=(const UserRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterRsp(UserRegisterRsp&& from) noexcept
    : UserRegisterRsp() {
    *this = ::std::move(from);
  }

  inline UserRegisterRsp& operator=(UserRegisterRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterRsp* internal_default_instance() {
    return reinterpret_cast<const UserRegisterRsp*>(
               &_UserRegisterRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserRegisterRsp* other);
  friend void swap(UserRegisterRsp& a, UserRegisterRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterRsp* New() const final {
    return CreateMaybeMessage<UserRegisterRsp>(NULL);
  }

  UserRegisterRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegisterRsp& from);
  void MergeFrom(const UserRegisterRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.UserRegisterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.UserLoginReq) */ {
 public:
  UserLoginReq();
  virtual ~UserLoginReq();

  UserLoginReq(const UserLoginReq& from);

  inline UserLoginReq& operator=(const UserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginReq(UserLoginReq&& from) noexcept
    : UserLoginReq() {
    *this = ::std::move(from);
  }

  inline UserLoginReq& operator=(UserLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginReq* internal_default_instance() {
    return reinterpret_cast<const UserLoginReq*>(
               &_UserLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserLoginReq* other);
  friend void swap(UserLoginReq& a, UserLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginReq* New() const final {
    return CreateMaybeMessage<UserLoginReq>(NULL);
  }

  UserLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLoginReq& from);
  void MergeFrom(const UserLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string verify_code_id = 4;
  void clear_verify_code_id();
  static const int kVerifyCodeIdFieldNumber = 4;
  const ::std::string& verify_code_id() const;
  void set_verify_code_id(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code_id(::std::string&& value);
  #endif
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  ::std::string* mutable_verify_code_id();
  ::std::string* release_verify_code_id();
  void set_allocated_verify_code_id(::std::string* verify_code_id);

  // string verify_code = 5;
  void clear_verify_code();
  static const int kVerifyCodeFieldNumber = 5;
  const ::std::string& verify_code() const;
  void set_verify_code(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code(::std::string&& value);
  #endif
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  ::std::string* mutable_verify_code();
  ::std::string* release_verify_code();
  void set_allocated_verify_code(::std::string* verify_code);

  // @@protoc_insertion_point(class_scope:chen_im.UserLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_id_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.UserLoginRsp) */ {
 public:
  UserLoginRsp();
  virtual ~UserLoginRsp();

  UserLoginRsp(const UserLoginRsp& from);

  inline UserLoginRsp& operator=(const UserLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginRsp(UserLoginRsp&& from) noexcept
    : UserLoginRsp() {
    *this = ::std::move(from);
  }

  inline UserLoginRsp& operator=(UserLoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRsp* internal_default_instance() {
    return reinterpret_cast<const UserLoginRsp*>(
               &_UserLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserLoginRsp* other);
  friend void swap(UserLoginRsp& a, UserLoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRsp* New() const final {
    return CreateMaybeMessage<UserLoginRsp>(NULL);
  }

  UserLoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLoginRsp& from);
  void MergeFrom(const UserLoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string login_session_id = 4;
  void clear_login_session_id();
  static const int kLoginSessionIdFieldNumber = 4;
  const ::std::string& login_session_id() const;
  void set_login_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_login_session_id(::std::string&& value);
  #endif
  void set_login_session_id(const char* value);
  void set_login_session_id(const char* value, size_t size);
  ::std::string* mutable_login_session_id();
  ::std::string* release_login_session_id();
  void set_allocated_login_session_id(::std::string* login_session_id);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.UserLoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr login_session_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneVerifyCodeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PhoneVerifyCodeReq) */ {
 public:
  PhoneVerifyCodeReq();
  virtual ~PhoneVerifyCodeReq();

  PhoneVerifyCodeReq(const PhoneVerifyCodeReq& from);

  inline PhoneVerifyCodeReq& operator=(const PhoneVerifyCodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneVerifyCodeReq(PhoneVerifyCodeReq&& from) noexcept
    : PhoneVerifyCodeReq() {
    *this = ::std::move(from);
  }

  inline PhoneVerifyCodeReq& operator=(PhoneVerifyCodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneVerifyCodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneVerifyCodeReq* internal_default_instance() {
    return reinterpret_cast<const PhoneVerifyCodeReq*>(
               &_PhoneVerifyCodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PhoneVerifyCodeReq* other);
  friend void swap(PhoneVerifyCodeReq& a, PhoneVerifyCodeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneVerifyCodeReq* New() const final {
    return CreateMaybeMessage<PhoneVerifyCodeReq>(NULL);
  }

  PhoneVerifyCodeReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneVerifyCodeReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneVerifyCodeReq& from);
  void MergeFrom(const PhoneVerifyCodeReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneVerifyCodeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string phone_number = 2;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 2;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // @@protoc_insertion_point(class_scope:chen_im.PhoneVerifyCodeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneVerifyCodeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PhoneVerifyCodeRsp) */ {
 public:
  PhoneVerifyCodeRsp();
  virtual ~PhoneVerifyCodeRsp();

  PhoneVerifyCodeRsp(const PhoneVerifyCodeRsp& from);

  inline PhoneVerifyCodeRsp& operator=(const PhoneVerifyCodeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneVerifyCodeRsp(PhoneVerifyCodeRsp&& from) noexcept
    : PhoneVerifyCodeRsp() {
    *this = ::std::move(from);
  }

  inline PhoneVerifyCodeRsp& operator=(PhoneVerifyCodeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneVerifyCodeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneVerifyCodeRsp* internal_default_instance() {
    return reinterpret_cast<const PhoneVerifyCodeRsp*>(
               &_PhoneVerifyCodeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PhoneVerifyCodeRsp* other);
  friend void swap(PhoneVerifyCodeRsp& a, PhoneVerifyCodeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneVerifyCodeRsp* New() const final {
    return CreateMaybeMessage<PhoneVerifyCodeRsp>(NULL);
  }

  PhoneVerifyCodeRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneVerifyCodeRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneVerifyCodeRsp& from);
  void MergeFrom(const PhoneVerifyCodeRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneVerifyCodeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string verify_code_id = 4;
  void clear_verify_code_id();
  static const int kVerifyCodeIdFieldNumber = 4;
  const ::std::string& verify_code_id() const;
  void set_verify_code_id(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code_id(::std::string&& value);
  #endif
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  ::std::string* mutable_verify_code_id();
  ::std::string* release_verify_code_id();
  void set_allocated_verify_code_id(::std::string* verify_code_id);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.PhoneVerifyCodeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneRegisterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PhoneRegisterReq) */ {
 public:
  PhoneRegisterReq();
  virtual ~PhoneRegisterReq();

  PhoneRegisterReq(const PhoneRegisterReq& from);

  inline PhoneRegisterReq& operator=(const PhoneRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneRegisterReq(PhoneRegisterReq&& from) noexcept
    : PhoneRegisterReq() {
    *this = ::std::move(from);
  }

  inline PhoneRegisterReq& operator=(PhoneRegisterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneRegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneRegisterReq* internal_default_instance() {
    return reinterpret_cast<const PhoneRegisterReq*>(
               &_PhoneRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PhoneRegisterReq* other);
  friend void swap(PhoneRegisterReq& a, PhoneRegisterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneRegisterReq* New() const final {
    return CreateMaybeMessage<PhoneRegisterReq>(NULL);
  }

  PhoneRegisterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneRegisterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneRegisterReq& from);
  void MergeFrom(const PhoneRegisterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneRegisterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string phone_number = 2;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 2;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // string verify_code_id = 3;
  void clear_verify_code_id();
  static const int kVerifyCodeIdFieldNumber = 3;
  const ::std::string& verify_code_id() const;
  void set_verify_code_id(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code_id(::std::string&& value);
  #endif
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  ::std::string* mutable_verify_code_id();
  ::std::string* release_verify_code_id();
  void set_allocated_verify_code_id(::std::string* verify_code_id);

  // string verify_code = 4;
  void clear_verify_code();
  static const int kVerifyCodeFieldNumber = 4;
  const ::std::string& verify_code() const;
  void set_verify_code(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code(::std::string&& value);
  #endif
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  ::std::string* mutable_verify_code();
  ::std::string* release_verify_code();
  void set_allocated_verify_code(::std::string* verify_code);

  // @@protoc_insertion_point(class_scope:chen_im.PhoneRegisterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_id_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneRegisterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PhoneRegisterRsp) */ {
 public:
  PhoneRegisterRsp();
  virtual ~PhoneRegisterRsp();

  PhoneRegisterRsp(const PhoneRegisterRsp& from);

  inline PhoneRegisterRsp& operator=(const PhoneRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneRegisterRsp(PhoneRegisterRsp&& from) noexcept
    : PhoneRegisterRsp() {
    *this = ::std::move(from);
  }

  inline PhoneRegisterRsp& operator=(PhoneRegisterRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneRegisterRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneRegisterRsp* internal_default_instance() {
    return reinterpret_cast<const PhoneRegisterRsp*>(
               &_PhoneRegisterRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PhoneRegisterRsp* other);
  friend void swap(PhoneRegisterRsp& a, PhoneRegisterRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneRegisterRsp* New() const final {
    return CreateMaybeMessage<PhoneRegisterRsp>(NULL);
  }

  PhoneRegisterRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneRegisterRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneRegisterRsp& from);
  void MergeFrom(const PhoneRegisterRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneRegisterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.PhoneRegisterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PhoneLoginReq) */ {
 public:
  PhoneLoginReq();
  virtual ~PhoneLoginReq();

  PhoneLoginReq(const PhoneLoginReq& from);

  inline PhoneLoginReq& operator=(const PhoneLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneLoginReq(PhoneLoginReq&& from) noexcept
    : PhoneLoginReq() {
    *this = ::std::move(from);
  }

  inline PhoneLoginReq& operator=(PhoneLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneLoginReq* internal_default_instance() {
    return reinterpret_cast<const PhoneLoginReq*>(
               &_PhoneLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PhoneLoginReq* other);
  friend void swap(PhoneLoginReq& a, PhoneLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneLoginReq* New() const final {
    return CreateMaybeMessage<PhoneLoginReq>(NULL);
  }

  PhoneLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneLoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneLoginReq& from);
  void MergeFrom(const PhoneLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string phone_number = 2;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 2;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // string verify_code_id = 3;
  void clear_verify_code_id();
  static const int kVerifyCodeIdFieldNumber = 3;
  const ::std::string& verify_code_id() const;
  void set_verify_code_id(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code_id(::std::string&& value);
  #endif
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  ::std::string* mutable_verify_code_id();
  ::std::string* release_verify_code_id();
  void set_allocated_verify_code_id(::std::string* verify_code_id);

  // string verify_code = 4;
  void clear_verify_code();
  static const int kVerifyCodeFieldNumber = 4;
  const ::std::string& verify_code() const;
  void set_verify_code(const ::std::string& value);
  #if LANG_CXX11
  void set_verify_code(::std::string&& value);
  #endif
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  ::std::string* mutable_verify_code();
  ::std::string* release_verify_code();
  void set_allocated_verify_code(::std::string* verify_code);

  // @@protoc_insertion_point(class_scope:chen_im.PhoneLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_id_;
  ::google::protobuf::internal::ArenaStringPtr verify_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneLoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PhoneLoginRsp) */ {
 public:
  PhoneLoginRsp();
  virtual ~PhoneLoginRsp();

  PhoneLoginRsp(const PhoneLoginRsp& from);

  inline PhoneLoginRsp& operator=(const PhoneLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneLoginRsp(PhoneLoginRsp&& from) noexcept
    : PhoneLoginRsp() {
    *this = ::std::move(from);
  }

  inline PhoneLoginRsp& operator=(PhoneLoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneLoginRsp* internal_default_instance() {
    return reinterpret_cast<const PhoneLoginRsp*>(
               &_PhoneLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(PhoneLoginRsp* other);
  friend void swap(PhoneLoginRsp& a, PhoneLoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneLoginRsp* New() const final {
    return CreateMaybeMessage<PhoneLoginRsp>(NULL);
  }

  PhoneLoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneLoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneLoginRsp& from);
  void MergeFrom(const PhoneLoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneLoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string login_session_id = 4;
  void clear_login_session_id();
  static const int kLoginSessionIdFieldNumber = 4;
  const ::std::string& login_session_id() const;
  void set_login_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_login_session_id(::std::string&& value);
  #endif
  void set_login_session_id(const char* value);
  void set_login_session_id(const char* value, size_t size);
  ::std::string* mutable_login_session_id();
  ::std::string* release_login_session_id();
  void set_allocated_login_session_id(::std::string* login_session_id);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.PhoneLoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr login_session_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUserInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetUserInfoReq) */ {
 public:
  GetUserInfoReq();
  virtual ~GetUserInfoReq();

  GetUserInfoReq(const GetUserInfoReq& from);

  inline GetUserInfoReq& operator=(const GetUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserInfoReq(GetUserInfoReq&& from) noexcept
    : GetUserInfoReq() {
    *this = ::std::move(from);
  }

  inline GetUserInfoReq& operator=(GetUserInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoReq*>(
               &_GetUserInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetUserInfoReq* other);
  friend void swap(GetUserInfoReq& a, GetUserInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfoReq* New() const final {
    return CreateMaybeMessage<GetUserInfoReq>(NULL);
  }

  GetUserInfoReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetUserInfoReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetUserInfoReq& from);
  void MergeFrom(const GetUserInfoReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:chen_im.GetUserInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUserInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetUserInfoRsp) */ {
 public:
  GetUserInfoRsp();
  virtual ~GetUserInfoRsp();

  GetUserInfoRsp(const GetUserInfoRsp& from);

  inline GetUserInfoRsp& operator=(const GetUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserInfoRsp(GetUserInfoRsp&& from) noexcept
    : GetUserInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetUserInfoRsp& operator=(GetUserInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoRsp*>(
               &_GetUserInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetUserInfoRsp* other);
  friend void swap(GetUserInfoRsp& a, GetUserInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfoRsp* New() const final {
    return CreateMaybeMessage<GetUserInfoRsp>(NULL);
  }

  GetUserInfoRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetUserInfoRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetUserInfoRsp& from);
  void MergeFrom(const GetUserInfoRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .chen_im.UserInfo user_info = 4;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  private:
  const ::chen_im::UserInfo& _internal_user_info() const;
  public:
  const ::chen_im::UserInfo& user_info() const;
  ::chen_im::UserInfo* release_user_info();
  ::chen_im::UserInfo* mutable_user_info();
  void set_allocated_user_info(::chen_im::UserInfo* user_info);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetUserInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::chen_im::UserInfo* user_info_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserAvatarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserAvatarReq) */ {
 public:
  SetUserAvatarReq();
  virtual ~SetUserAvatarReq();

  SetUserAvatarReq(const SetUserAvatarReq& from);

  inline SetUserAvatarReq& operator=(const SetUserAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserAvatarReq(SetUserAvatarReq&& from) noexcept
    : SetUserAvatarReq() {
    *this = ::std::move(from);
  }

  inline SetUserAvatarReq& operator=(SetUserAvatarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserAvatarReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserAvatarReq* internal_default_instance() {
    return reinterpret_cast<const SetUserAvatarReq*>(
               &_SetUserAvatarReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SetUserAvatarReq* other);
  friend void swap(SetUserAvatarReq& a, SetUserAvatarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserAvatarReq* New() const final {
    return CreateMaybeMessage<SetUserAvatarReq>(NULL);
  }

  SetUserAvatarReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserAvatarReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserAvatarReq& from);
  void MergeFrom(const SetUserAvatarReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserAvatarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // bytes avatar = 4;
  void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserAvatarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserAvatarRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserAvatarRsp) */ {
 public:
  SetUserAvatarRsp();
  virtual ~SetUserAvatarRsp();

  SetUserAvatarRsp(const SetUserAvatarRsp& from);

  inline SetUserAvatarRsp& operator=(const SetUserAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserAvatarRsp(SetUserAvatarRsp&& from) noexcept
    : SetUserAvatarRsp() {
    *this = ::std::move(from);
  }

  inline SetUserAvatarRsp& operator=(SetUserAvatarRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserAvatarRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserAvatarRsp*>(
               &_SetUserAvatarRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SetUserAvatarRsp* other);
  friend void swap(SetUserAvatarRsp& a, SetUserAvatarRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserAvatarRsp* New() const final {
    return CreateMaybeMessage<SetUserAvatarRsp>(NULL);
  }

  SetUserAvatarRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserAvatarRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserAvatarRsp& from);
  void MergeFrom(const SetUserAvatarRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserAvatarRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserAvatarRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserNicknameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserNicknameReq) */ {
 public:
  SetUserNicknameReq();
  virtual ~SetUserNicknameReq();

  SetUserNicknameReq(const SetUserNicknameReq& from);

  inline SetUserNicknameReq& operator=(const SetUserNicknameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserNicknameReq(SetUserNicknameReq&& from) noexcept
    : SetUserNicknameReq() {
    *this = ::std::move(from);
  }

  inline SetUserNicknameReq& operator=(SetUserNicknameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserNicknameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserNicknameReq* internal_default_instance() {
    return reinterpret_cast<const SetUserNicknameReq*>(
               &_SetUserNicknameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SetUserNicknameReq* other);
  friend void swap(SetUserNicknameReq& a, SetUserNicknameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserNicknameReq* New() const final {
    return CreateMaybeMessage<SetUserNicknameReq>(NULL);
  }

  SetUserNicknameReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserNicknameReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserNicknameReq& from);
  void MergeFrom(const SetUserNicknameReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserNicknameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string nickname = 4;
  void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserNicknameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserNicknameRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserNicknameRsp) */ {
 public:
  SetUserNicknameRsp();
  virtual ~SetUserNicknameRsp();

  SetUserNicknameRsp(const SetUserNicknameRsp& from);

  inline SetUserNicknameRsp& operator=(const SetUserNicknameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserNicknameRsp(SetUserNicknameRsp&& from) noexcept
    : SetUserNicknameRsp() {
    *this = ::std::move(from);
  }

  inline SetUserNicknameRsp& operator=(SetUserNicknameRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserNicknameRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserNicknameRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserNicknameRsp*>(
               &_SetUserNicknameRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SetUserNicknameRsp* other);
  friend void swap(SetUserNicknameRsp& a, SetUserNicknameRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserNicknameRsp* New() const final {
    return CreateMaybeMessage<SetUserNicknameRsp>(NULL);
  }

  SetUserNicknameRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserNicknameRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserNicknameRsp& from);
  void MergeFrom(const SetUserNicknameRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserNicknameRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserNicknameRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserDescriptionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserDescriptionReq) */ {
 public:
  SetUserDescriptionReq();
  virtual ~SetUserDescriptionReq();

  SetUserDescriptionReq(const SetUserDescriptionReq& from);

  inline SetUserDescriptionReq& operator=(const SetUserDescriptionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserDescriptionReq(SetUserDescriptionReq&& from) noexcept
    : SetUserDescriptionReq() {
    *this = ::std::move(from);
  }

  inline SetUserDescriptionReq& operator=(SetUserDescriptionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserDescriptionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserDescriptionReq* internal_default_instance() {
    return reinterpret_cast<const SetUserDescriptionReq*>(
               &_SetUserDescriptionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SetUserDescriptionReq* other);
  friend void swap(SetUserDescriptionReq& a, SetUserDescriptionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserDescriptionReq* New() const final {
    return CreateMaybeMessage<SetUserDescriptionReq>(NULL);
  }

  SetUserDescriptionReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserDescriptionReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserDescriptionReq& from);
  void MergeFrom(const SetUserDescriptionReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserDescriptionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserDescriptionReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserDescriptionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserDescriptionRsp) */ {
 public:
  SetUserDescriptionRsp();
  virtual ~SetUserDescriptionRsp();

  SetUserDescriptionRsp(const SetUserDescriptionRsp& from);

  inline SetUserDescriptionRsp& operator=(const SetUserDescriptionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserDescriptionRsp(SetUserDescriptionRsp&& from) noexcept
    : SetUserDescriptionRsp() {
    *this = ::std::move(from);
  }

  inline SetUserDescriptionRsp& operator=(SetUserDescriptionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserDescriptionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserDescriptionRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserDescriptionRsp*>(
               &_SetUserDescriptionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SetUserDescriptionRsp* other);
  friend void swap(SetUserDescriptionRsp& a, SetUserDescriptionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserDescriptionRsp* New() const final {
    return CreateMaybeMessage<SetUserDescriptionRsp>(NULL);
  }

  SetUserDescriptionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserDescriptionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserDescriptionRsp& from);
  void MergeFrom(const SetUserDescriptionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserDescriptionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserDescriptionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserPhoneNumberReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserPhoneNumberReq) */ {
 public:
  SetUserPhoneNumberReq();
  virtual ~SetUserPhoneNumberReq();

  SetUserPhoneNumberReq(const SetUserPhoneNumberReq& from);

  inline SetUserPhoneNumberReq& operator=(const SetUserPhoneNumberReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserPhoneNumberReq(SetUserPhoneNumberReq&& from) noexcept
    : SetUserPhoneNumberReq() {
    *this = ::std::move(from);
  }

  inline SetUserPhoneNumberReq& operator=(SetUserPhoneNumberReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserPhoneNumberReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserPhoneNumberReq* internal_default_instance() {
    return reinterpret_cast<const SetUserPhoneNumberReq*>(
               &_SetUserPhoneNumberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SetUserPhoneNumberReq* other);
  friend void swap(SetUserPhoneNumberReq& a, SetUserPhoneNumberReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserPhoneNumberReq* New() const final {
    return CreateMaybeMessage<SetUserPhoneNumberReq>(NULL);
  }

  SetUserPhoneNumberReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserPhoneNumberReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserPhoneNumberReq& from);
  void MergeFrom(const SetUserPhoneNumberReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserPhoneNumberReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string phone_number = 4;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 4;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // string phone_verify_code_id = 5;
  void clear_phone_verify_code_id();
  static const int kPhoneVerifyCodeIdFieldNumber = 5;
  const ::std::string& phone_verify_code_id() const;
  void set_phone_verify_code_id(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_verify_code_id(::std::string&& value);
  #endif
  void set_phone_verify_code_id(const char* value);
  void set_phone_verify_code_id(const char* value, size_t size);
  ::std::string* mutable_phone_verify_code_id();
  ::std::string* release_phone_verify_code_id();
  void set_allocated_phone_verify_code_id(::std::string* phone_verify_code_id);

  // string phone_verify_code = 6;
  void clear_phone_verify_code();
  static const int kPhoneVerifyCodeFieldNumber = 6;
  const ::std::string& phone_verify_code() const;
  void set_phone_verify_code(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_verify_code(::std::string&& value);
  #endif
  void set_phone_verify_code(const char* value);
  void set_phone_verify_code(const char* value, size_t size);
  ::std::string* mutable_phone_verify_code();
  ::std::string* release_phone_verify_code();
  void set_allocated_phone_verify_code(::std::string* phone_verify_code);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserPhoneNumberReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr phone_verify_code_id_;
  ::google::protobuf::internal::ArenaStringPtr phone_verify_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetUserPhoneNumberRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SetUserPhoneNumberRsp) */ {
 public:
  SetUserPhoneNumberRsp();
  virtual ~SetUserPhoneNumberRsp();

  SetUserPhoneNumberRsp(const SetUserPhoneNumberRsp& from);

  inline SetUserPhoneNumberRsp& operator=(const SetUserPhoneNumberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetUserPhoneNumberRsp(SetUserPhoneNumberRsp&& from) noexcept
    : SetUserPhoneNumberRsp() {
    *this = ::std::move(from);
  }

  inline SetUserPhoneNumberRsp& operator=(SetUserPhoneNumberRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetUserPhoneNumberRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserPhoneNumberRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserPhoneNumberRsp*>(
               &_SetUserPhoneNumberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SetUserPhoneNumberRsp* other);
  friend void swap(SetUserPhoneNumberRsp& a, SetUserPhoneNumberRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetUserPhoneNumberRsp* New() const final {
    return CreateMaybeMessage<SetUserPhoneNumberRsp>(NULL);
  }

  SetUserPhoneNumberRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetUserPhoneNumberRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetUserPhoneNumberRsp& from);
  void MergeFrom(const SetUserPhoneNumberRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserPhoneNumberRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.SetUserPhoneNumberRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// ===================================================================

class UserService_Stub;

class UserService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserService() {};
 public:
  virtual ~UserService();

  typedef UserService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void UserRegister(::google::protobuf::RpcController* controller,
                       const ::chen_im::UserRegisterReq* request,
                       ::chen_im::UserRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void UserLogin(::google::protobuf::RpcController* controller,
                       const ::chen_im::UserLoginReq* request,
                       ::chen_im::UserLoginRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPhoneVerifyCode(::google::protobuf::RpcController* controller,
                       const ::chen_im::PhoneVerifyCodeReq* request,
                       ::chen_im::PhoneVerifyCodeRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PhoneRegister(::google::protobuf::RpcController* controller,
                       const ::chen_im::PhoneRegisterReq* request,
                       ::chen_im::PhoneRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PhoneLogin(::google::protobuf::RpcController* controller,
                       const ::chen_im::PhoneLoginReq* request,
                       ::chen_im::PhoneLoginRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserInfo(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetUserInfoReq* request,
                       ::chen_im::GetUserInfoRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserAvatar(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserAvatarReq* request,
                       ::chen_im::SetUserAvatarRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserNickname(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserNicknameReq* request,
                       ::chen_im::SetUserNicknameRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserDescription(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserDescriptionReq* request,
                       ::chen_im::SetUserDescriptionRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserPhoneNumber(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserPhoneNumberReq* request,
                       ::chen_im::SetUserPhoneNumberRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService);
};

class UserService_Stub : public UserService {
 public:
  UserService_Stub(::google::protobuf::RpcChannel* channel);
  UserService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UserService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements UserService ------------------------------------------

  void UserRegister(::google::protobuf::RpcController* controller,
                       const ::chen_im::UserRegisterReq* request,
                       ::chen_im::UserRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  void UserLogin(::google::protobuf::RpcController* controller,
                       const ::chen_im::UserLoginReq* request,
                       ::chen_im::UserLoginRsp* response,
                       ::google::protobuf::Closure* done);
  void GetPhoneVerifyCode(::google::protobuf::RpcController* controller,
                       const ::chen_im::PhoneVerifyCodeReq* request,
                       ::chen_im::PhoneVerifyCodeRsp* response,
                       ::google::protobuf::Closure* done);
  void PhoneRegister(::google::protobuf::RpcController* controller,
                       const ::chen_im::PhoneRegisterReq* request,
                       ::chen_im::PhoneRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  void PhoneLogin(::google::protobuf::RpcController* controller,
                       const ::chen_im::PhoneLoginReq* request,
                       ::chen_im::PhoneLoginRsp* response,
                       ::google::protobuf::Closure* done);
  void GetUserInfo(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetUserInfoReq* request,
                       ::chen_im::GetUserInfoRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserAvatar(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserAvatarReq* request,
                       ::chen_im::SetUserAvatarRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserNickname(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserNicknameReq* request,
                       ::chen_im::SetUserNicknameRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserDescription(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserDescriptionReq* request,
                       ::chen_im::SetUserDescriptionRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserPhoneNumber(::google::protobuf::RpcController* controller,
                       const ::chen_im::SetUserPhoneNumberReq* request,
                       ::chen_im::SetUserPhoneNumberRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegisterReq

// string request_id = 1;
inline void UserRegisterReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterReq.request_id)
  return request_id_.GetNoArena();
}
inline void UserRegisterReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterReq.request_id)
}
#if LANG_CXX11
inline void UserRegisterReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserRegisterReq.request_id)
}
#endif
inline void UserRegisterReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserRegisterReq.request_id)
}
inline void UserRegisterReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserRegisterReq.request_id)
}
inline ::std::string* UserRegisterReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserRegisterReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserRegisterReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserRegisterReq.request_id)
}

// string nickname = 2;
inline void UserRegisterReq::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterReq::nickname() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterReq.nickname)
  return nickname_.GetNoArena();
}
inline void UserRegisterReq::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterReq.nickname)
}
#if LANG_CXX11
inline void UserRegisterReq::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserRegisterReq.nickname)
}
#endif
inline void UserRegisterReq::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserRegisterReq.nickname)
}
inline void UserRegisterReq::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserRegisterReq.nickname)
}
inline ::std::string* UserRegisterReq::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserRegisterReq.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterReq::release_nickname() {
  // @@protoc_insertion_point(field_release:chen_im.UserRegisterReq.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterReq::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserRegisterReq.nickname)
}

// string password = 3;
inline void UserRegisterReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterReq::password() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterReq.password)
  return password_.GetNoArena();
}
inline void UserRegisterReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterReq.password)
}
#if LANG_CXX11
inline void UserRegisterReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserRegisterReq.password)
}
#endif
inline void UserRegisterReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserRegisterReq.password)
}
inline void UserRegisterReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserRegisterReq.password)
}
inline ::std::string* UserRegisterReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserRegisterReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:chen_im.UserRegisterReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserRegisterReq.password)
}

// string verify_code_id = 4;
inline void UserRegisterReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterReq.verify_code_id)
  return verify_code_id_.GetNoArena();
}
inline void UserRegisterReq::set_verify_code_id(const ::std::string& value) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterReq.verify_code_id)
}
#if LANG_CXX11
inline void UserRegisterReq::set_verify_code_id(::std::string&& value) {
  
  verify_code_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserRegisterReq.verify_code_id)
}
#endif
inline void UserRegisterReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserRegisterReq.verify_code_id)
}
inline void UserRegisterReq::set_verify_code_id(const char* value, size_t size) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserRegisterReq.verify_code_id)
}
inline ::std::string* UserRegisterReq::mutable_verify_code_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserRegisterReq.verify_code_id)
  return verify_code_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserRegisterReq.verify_code_id)
  
  return verify_code_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterReq::set_allocated_verify_code_id(::std::string* verify_code_id) {
  if (verify_code_id != NULL) {
    
  } else {
    
  }
  verify_code_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserRegisterReq.verify_code_id)
}

// string verify_code = 5;
inline void UserRegisterReq::clear_verify_code() {
  verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterReq::verify_code() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterReq.verify_code)
  return verify_code_.GetNoArena();
}
inline void UserRegisterReq::set_verify_code(const ::std::string& value) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterReq.verify_code)
}
#if LANG_CXX11
inline void UserRegisterReq::set_verify_code(::std::string&& value) {
  
  verify_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserRegisterReq.verify_code)
}
#endif
inline void UserRegisterReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserRegisterReq.verify_code)
}
inline void UserRegisterReq::set_verify_code(const char* value, size_t size) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserRegisterReq.verify_code)
}
inline ::std::string* UserRegisterReq::mutable_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserRegisterReq.verify_code)
  return verify_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:chen_im.UserRegisterReq.verify_code)
  
  return verify_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterReq::set_allocated_verify_code(::std::string* verify_code) {
  if (verify_code != NULL) {
    
  } else {
    
  }
  verify_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserRegisterReq.verify_code)
}

// -------------------------------------------------------------------

// UserRegisterRsp

// string request_id = 1;
inline void UserRegisterRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterRsp.request_id)
  return request_id_.GetNoArena();
}
inline void UserRegisterRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterRsp.request_id)
}
#if LANG_CXX11
inline void UserRegisterRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserRegisterRsp.request_id)
}
#endif
inline void UserRegisterRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserRegisterRsp.request_id)
}
inline void UserRegisterRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserRegisterRsp.request_id)
}
inline ::std::string* UserRegisterRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserRegisterRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserRegisterRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserRegisterRsp.request_id)
}

// bool success = 2;
inline void UserRegisterRsp::clear_success() {
  success_ = false;
}
inline bool UserRegisterRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterRsp.success)
  return success_;
}
inline void UserRegisterRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterRsp.success)
}

// string errmsg = 3;
inline void UserRegisterRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.UserRegisterRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void UserRegisterRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserRegisterRsp.errmsg)
}
#if LANG_CXX11
inline void UserRegisterRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserRegisterRsp.errmsg)
}
#endif
inline void UserRegisterRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserRegisterRsp.errmsg)
}
inline void UserRegisterRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserRegisterRsp.errmsg)
}
inline ::std::string* UserRegisterRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserRegisterRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.UserRegisterRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserRegisterRsp.errmsg)
}

// -------------------------------------------------------------------

// UserLoginReq

// string request_id = 1;
inline void UserLoginReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginReq.request_id)
  return request_id_.GetNoArena();
}
inline void UserLoginReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginReq.request_id)
}
#if LANG_CXX11
inline void UserLoginReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginReq.request_id)
}
#endif
inline void UserLoginReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginReq.request_id)
}
inline void UserLoginReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginReq.request_id)
}
inline ::std::string* UserLoginReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginReq.request_id)
}

// string nickname = 2;
inline void UserLoginReq::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginReq::nickname() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginReq.nickname)
  return nickname_.GetNoArena();
}
inline void UserLoginReq::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginReq.nickname)
}
#if LANG_CXX11
inline void UserLoginReq::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginReq.nickname)
}
#endif
inline void UserLoginReq::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginReq.nickname)
}
inline void UserLoginReq::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginReq.nickname)
}
inline ::std::string* UserLoginReq::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginReq.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginReq::release_nickname() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginReq.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginReq::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginReq.nickname)
}

// string password = 3;
inline void UserLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginReq::password() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginReq.password)
  return password_.GetNoArena();
}
inline void UserLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginReq.password)
}
#if LANG_CXX11
inline void UserLoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginReq.password)
}
#endif
inline void UserLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginReq.password)
}
inline void UserLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginReq.password)
}
inline ::std::string* UserLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginReq.password)
}

// string verify_code_id = 4;
inline void UserLoginReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginReq.verify_code_id)
  return verify_code_id_.GetNoArena();
}
inline void UserLoginReq::set_verify_code_id(const ::std::string& value) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginReq.verify_code_id)
}
#if LANG_CXX11
inline void UserLoginReq::set_verify_code_id(::std::string&& value) {
  
  verify_code_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginReq.verify_code_id)
}
#endif
inline void UserLoginReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginReq.verify_code_id)
}
inline void UserLoginReq::set_verify_code_id(const char* value, size_t size) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginReq.verify_code_id)
}
inline ::std::string* UserLoginReq::mutable_verify_code_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginReq.verify_code_id)
  return verify_code_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginReq.verify_code_id)
  
  return verify_code_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginReq::set_allocated_verify_code_id(::std::string* verify_code_id) {
  if (verify_code_id != NULL) {
    
  } else {
    
  }
  verify_code_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginReq.verify_code_id)
}

// string verify_code = 5;
inline void UserLoginReq::clear_verify_code() {
  verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginReq::verify_code() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginReq.verify_code)
  return verify_code_.GetNoArena();
}
inline void UserLoginReq::set_verify_code(const ::std::string& value) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginReq.verify_code)
}
#if LANG_CXX11
inline void UserLoginReq::set_verify_code(::std::string&& value) {
  
  verify_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginReq.verify_code)
}
#endif
inline void UserLoginReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginReq.verify_code)
}
inline void UserLoginReq::set_verify_code(const char* value, size_t size) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginReq.verify_code)
}
inline ::std::string* UserLoginReq::mutable_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginReq.verify_code)
  return verify_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginReq.verify_code)
  
  return verify_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginReq::set_allocated_verify_code(::std::string* verify_code) {
  if (verify_code != NULL) {
    
  } else {
    
  }
  verify_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginReq.verify_code)
}

// -------------------------------------------------------------------

// UserLoginRsp

// string request_id = 1;
inline void UserLoginRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginRsp.request_id)
  return request_id_.GetNoArena();
}
inline void UserLoginRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginRsp.request_id)
}
#if LANG_CXX11
inline void UserLoginRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginRsp.request_id)
}
#endif
inline void UserLoginRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginRsp.request_id)
}
inline void UserLoginRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginRsp.request_id)
}
inline ::std::string* UserLoginRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginRsp.request_id)
}

// bool success = 2;
inline void UserLoginRsp::clear_success() {
  success_ = false;
}
inline bool UserLoginRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginRsp.success)
  return success_;
}
inline void UserLoginRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.UserLoginRsp.success)
}

// string errmsg = 3;
inline void UserLoginRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void UserLoginRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginRsp.errmsg)
}
#if LANG_CXX11
inline void UserLoginRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginRsp.errmsg)
}
#endif
inline void UserLoginRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginRsp.errmsg)
}
inline void UserLoginRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginRsp.errmsg)
}
inline ::std::string* UserLoginRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginRsp.errmsg)
}

// string login_session_id = 4;
inline void UserLoginRsp::clear_login_session_id() {
  login_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRsp::login_session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserLoginRsp.login_session_id)
  return login_session_id_.GetNoArena();
}
inline void UserLoginRsp::set_login_session_id(const ::std::string& value) {
  
  login_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserLoginRsp.login_session_id)
}
#if LANG_CXX11
inline void UserLoginRsp::set_login_session_id(::std::string&& value) {
  
  login_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserLoginRsp.login_session_id)
}
#endif
inline void UserLoginRsp::set_login_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserLoginRsp.login_session_id)
}
inline void UserLoginRsp::set_login_session_id(const char* value, size_t size) {
  
  login_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserLoginRsp.login_session_id)
}
inline ::std::string* UserLoginRsp::mutable_login_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserLoginRsp.login_session_id)
  return login_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRsp::release_login_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserLoginRsp.login_session_id)
  
  return login_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRsp::set_allocated_login_session_id(::std::string* login_session_id) {
  if (login_session_id != NULL) {
    
  } else {
    
  }
  login_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserLoginRsp.login_session_id)
}

// -------------------------------------------------------------------

// PhoneVerifyCodeReq

// string request_id = 1;
inline void PhoneVerifyCodeReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneVerifyCodeReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneVerifyCodeReq.request_id)
  return request_id_.GetNoArena();
}
inline void PhoneVerifyCodeReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneVerifyCodeReq.request_id)
}
#if LANG_CXX11
inline void PhoneVerifyCodeReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneVerifyCodeReq.request_id)
}
#endif
inline void PhoneVerifyCodeReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneVerifyCodeReq.request_id)
}
inline void PhoneVerifyCodeReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneVerifyCodeReq.request_id)
}
inline ::std::string* PhoneVerifyCodeReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneVerifyCodeReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneVerifyCodeReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneVerifyCodeReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneVerifyCodeReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneVerifyCodeReq.request_id)
}

// string phone_number = 2;
inline void PhoneVerifyCodeReq::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneVerifyCodeReq::phone_number() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneVerifyCodeReq.phone_number)
  return phone_number_.GetNoArena();
}
inline void PhoneVerifyCodeReq::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneVerifyCodeReq.phone_number)
}
#if LANG_CXX11
inline void PhoneVerifyCodeReq::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneVerifyCodeReq.phone_number)
}
#endif
inline void PhoneVerifyCodeReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneVerifyCodeReq.phone_number)
}
inline void PhoneVerifyCodeReq::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneVerifyCodeReq.phone_number)
}
inline ::std::string* PhoneVerifyCodeReq::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneVerifyCodeReq.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneVerifyCodeReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneVerifyCodeReq.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneVerifyCodeReq::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneVerifyCodeReq.phone_number)
}

// -------------------------------------------------------------------

// PhoneVerifyCodeRsp

// string request_id = 1;
inline void PhoneVerifyCodeRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneVerifyCodeRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneVerifyCodeRsp.request_id)
  return request_id_.GetNoArena();
}
inline void PhoneVerifyCodeRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneVerifyCodeRsp.request_id)
}
#if LANG_CXX11
inline void PhoneVerifyCodeRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneVerifyCodeRsp.request_id)
}
#endif
inline void PhoneVerifyCodeRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneVerifyCodeRsp.request_id)
}
inline void PhoneVerifyCodeRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneVerifyCodeRsp.request_id)
}
inline ::std::string* PhoneVerifyCodeRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneVerifyCodeRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneVerifyCodeRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneVerifyCodeRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneVerifyCodeRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneVerifyCodeRsp.request_id)
}

// bool success = 2;
inline void PhoneVerifyCodeRsp::clear_success() {
  success_ = false;
}
inline bool PhoneVerifyCodeRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneVerifyCodeRsp.success)
  return success_;
}
inline void PhoneVerifyCodeRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.PhoneVerifyCodeRsp.success)
}

// string errmsg = 3;
inline void PhoneVerifyCodeRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneVerifyCodeRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneVerifyCodeRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void PhoneVerifyCodeRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneVerifyCodeRsp.errmsg)
}
#if LANG_CXX11
inline void PhoneVerifyCodeRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneVerifyCodeRsp.errmsg)
}
#endif
inline void PhoneVerifyCodeRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneVerifyCodeRsp.errmsg)
}
inline void PhoneVerifyCodeRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneVerifyCodeRsp.errmsg)
}
inline ::std::string* PhoneVerifyCodeRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneVerifyCodeRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneVerifyCodeRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneVerifyCodeRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneVerifyCodeRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneVerifyCodeRsp.errmsg)
}

// string verify_code_id = 4;
inline void PhoneVerifyCodeRsp::clear_verify_code_id() {
  verify_code_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneVerifyCodeRsp::verify_code_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneVerifyCodeRsp.verify_code_id)
  return verify_code_id_.GetNoArena();
}
inline void PhoneVerifyCodeRsp::set_verify_code_id(const ::std::string& value) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneVerifyCodeRsp.verify_code_id)
}
#if LANG_CXX11
inline void PhoneVerifyCodeRsp::set_verify_code_id(::std::string&& value) {
  
  verify_code_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneVerifyCodeRsp.verify_code_id)
}
#endif
inline void PhoneVerifyCodeRsp::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneVerifyCodeRsp.verify_code_id)
}
inline void PhoneVerifyCodeRsp::set_verify_code_id(const char* value, size_t size) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneVerifyCodeRsp.verify_code_id)
}
inline ::std::string* PhoneVerifyCodeRsp::mutable_verify_code_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneVerifyCodeRsp.verify_code_id)
  return verify_code_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneVerifyCodeRsp::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneVerifyCodeRsp.verify_code_id)
  
  return verify_code_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneVerifyCodeRsp::set_allocated_verify_code_id(::std::string* verify_code_id) {
  if (verify_code_id != NULL) {
    
  } else {
    
  }
  verify_code_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneVerifyCodeRsp.verify_code_id)
}

// -------------------------------------------------------------------

// PhoneRegisterReq

// string request_id = 1;
inline void PhoneRegisterReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneRegisterReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneRegisterReq.request_id)
  return request_id_.GetNoArena();
}
inline void PhoneRegisterReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneRegisterReq.request_id)
}
#if LANG_CXX11
inline void PhoneRegisterReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneRegisterReq.request_id)
}
#endif
inline void PhoneRegisterReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneRegisterReq.request_id)
}
inline void PhoneRegisterReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneRegisterReq.request_id)
}
inline ::std::string* PhoneRegisterReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneRegisterReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneRegisterReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneRegisterReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneRegisterReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneRegisterReq.request_id)
}

// string phone_number = 2;
inline void PhoneRegisterReq::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneRegisterReq::phone_number() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneRegisterReq.phone_number)
  return phone_number_.GetNoArena();
}
inline void PhoneRegisterReq::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneRegisterReq.phone_number)
}
#if LANG_CXX11
inline void PhoneRegisterReq::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneRegisterReq.phone_number)
}
#endif
inline void PhoneRegisterReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneRegisterReq.phone_number)
}
inline void PhoneRegisterReq::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneRegisterReq.phone_number)
}
inline ::std::string* PhoneRegisterReq::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneRegisterReq.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneRegisterReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneRegisterReq.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneRegisterReq::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneRegisterReq.phone_number)
}

// string verify_code_id = 3;
inline void PhoneRegisterReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneRegisterReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneRegisterReq.verify_code_id)
  return verify_code_id_.GetNoArena();
}
inline void PhoneRegisterReq::set_verify_code_id(const ::std::string& value) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneRegisterReq.verify_code_id)
}
#if LANG_CXX11
inline void PhoneRegisterReq::set_verify_code_id(::std::string&& value) {
  
  verify_code_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneRegisterReq.verify_code_id)
}
#endif
inline void PhoneRegisterReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneRegisterReq.verify_code_id)
}
inline void PhoneRegisterReq::set_verify_code_id(const char* value, size_t size) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneRegisterReq.verify_code_id)
}
inline ::std::string* PhoneRegisterReq::mutable_verify_code_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneRegisterReq.verify_code_id)
  return verify_code_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneRegisterReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneRegisterReq.verify_code_id)
  
  return verify_code_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneRegisterReq::set_allocated_verify_code_id(::std::string* verify_code_id) {
  if (verify_code_id != NULL) {
    
  } else {
    
  }
  verify_code_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneRegisterReq.verify_code_id)
}

// string verify_code = 4;
inline void PhoneRegisterReq::clear_verify_code() {
  verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneRegisterReq::verify_code() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneRegisterReq.verify_code)
  return verify_code_.GetNoArena();
}
inline void PhoneRegisterReq::set_verify_code(const ::std::string& value) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneRegisterReq.verify_code)
}
#if LANG_CXX11
inline void PhoneRegisterReq::set_verify_code(::std::string&& value) {
  
  verify_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneRegisterReq.verify_code)
}
#endif
inline void PhoneRegisterReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneRegisterReq.verify_code)
}
inline void PhoneRegisterReq::set_verify_code(const char* value, size_t size) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneRegisterReq.verify_code)
}
inline ::std::string* PhoneRegisterReq::mutable_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneRegisterReq.verify_code)
  return verify_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneRegisterReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneRegisterReq.verify_code)
  
  return verify_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneRegisterReq::set_allocated_verify_code(::std::string* verify_code) {
  if (verify_code != NULL) {
    
  } else {
    
  }
  verify_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneRegisterReq.verify_code)
}

// -------------------------------------------------------------------

// PhoneRegisterRsp

// string request_id = 1;
inline void PhoneRegisterRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneRegisterRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneRegisterRsp.request_id)
  return request_id_.GetNoArena();
}
inline void PhoneRegisterRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneRegisterRsp.request_id)
}
#if LANG_CXX11
inline void PhoneRegisterRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneRegisterRsp.request_id)
}
#endif
inline void PhoneRegisterRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneRegisterRsp.request_id)
}
inline void PhoneRegisterRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneRegisterRsp.request_id)
}
inline ::std::string* PhoneRegisterRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneRegisterRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneRegisterRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneRegisterRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneRegisterRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneRegisterRsp.request_id)
}

// bool success = 2;
inline void PhoneRegisterRsp::clear_success() {
  success_ = false;
}
inline bool PhoneRegisterRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneRegisterRsp.success)
  return success_;
}
inline void PhoneRegisterRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.PhoneRegisterRsp.success)
}

// string errmsg = 3;
inline void PhoneRegisterRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneRegisterRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneRegisterRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void PhoneRegisterRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneRegisterRsp.errmsg)
}
#if LANG_CXX11
inline void PhoneRegisterRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneRegisterRsp.errmsg)
}
#endif
inline void PhoneRegisterRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneRegisterRsp.errmsg)
}
inline void PhoneRegisterRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneRegisterRsp.errmsg)
}
inline ::std::string* PhoneRegisterRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneRegisterRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneRegisterRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneRegisterRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneRegisterRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneRegisterRsp.errmsg)
}

// -------------------------------------------------------------------

// PhoneLoginReq

// string request_id = 1;
inline void PhoneLoginReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneLoginReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginReq.request_id)
  return request_id_.GetNoArena();
}
inline void PhoneLoginReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginReq.request_id)
}
#if LANG_CXX11
inline void PhoneLoginReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneLoginReq.request_id)
}
#endif
inline void PhoneLoginReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneLoginReq.request_id)
}
inline void PhoneLoginReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneLoginReq.request_id)
}
inline ::std::string* PhoneLoginReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneLoginReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneLoginReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneLoginReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneLoginReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneLoginReq.request_id)
}

// string phone_number = 2;
inline void PhoneLoginReq::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneLoginReq::phone_number() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginReq.phone_number)
  return phone_number_.GetNoArena();
}
inline void PhoneLoginReq::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginReq.phone_number)
}
#if LANG_CXX11
inline void PhoneLoginReq::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneLoginReq.phone_number)
}
#endif
inline void PhoneLoginReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneLoginReq.phone_number)
}
inline void PhoneLoginReq::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneLoginReq.phone_number)
}
inline ::std::string* PhoneLoginReq::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneLoginReq.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneLoginReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneLoginReq.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneLoginReq::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneLoginReq.phone_number)
}

// string verify_code_id = 3;
inline void PhoneLoginReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneLoginReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginReq.verify_code_id)
  return verify_code_id_.GetNoArena();
}
inline void PhoneLoginReq::set_verify_code_id(const ::std::string& value) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginReq.verify_code_id)
}
#if LANG_CXX11
inline void PhoneLoginReq::set_verify_code_id(::std::string&& value) {
  
  verify_code_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneLoginReq.verify_code_id)
}
#endif
inline void PhoneLoginReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneLoginReq.verify_code_id)
}
inline void PhoneLoginReq::set_verify_code_id(const char* value, size_t size) {
  
  verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneLoginReq.verify_code_id)
}
inline ::std::string* PhoneLoginReq::mutable_verify_code_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneLoginReq.verify_code_id)
  return verify_code_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneLoginReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneLoginReq.verify_code_id)
  
  return verify_code_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneLoginReq::set_allocated_verify_code_id(::std::string* verify_code_id) {
  if (verify_code_id != NULL) {
    
  } else {
    
  }
  verify_code_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneLoginReq.verify_code_id)
}

// string verify_code = 4;
inline void PhoneLoginReq::clear_verify_code() {
  verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneLoginReq::verify_code() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginReq.verify_code)
  return verify_code_.GetNoArena();
}
inline void PhoneLoginReq::set_verify_code(const ::std::string& value) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginReq.verify_code)
}
#if LANG_CXX11
inline void PhoneLoginReq::set_verify_code(::std::string&& value) {
  
  verify_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneLoginReq.verify_code)
}
#endif
inline void PhoneLoginReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneLoginReq.verify_code)
}
inline void PhoneLoginReq::set_verify_code(const char* value, size_t size) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneLoginReq.verify_code)
}
inline ::std::string* PhoneLoginReq::mutable_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneLoginReq.verify_code)
  return verify_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneLoginReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneLoginReq.verify_code)
  
  return verify_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneLoginReq::set_allocated_verify_code(::std::string* verify_code) {
  if (verify_code != NULL) {
    
  } else {
    
  }
  verify_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneLoginReq.verify_code)
}

// -------------------------------------------------------------------

// PhoneLoginRsp

// string request_id = 1;
inline void PhoneLoginRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneLoginRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginRsp.request_id)
  return request_id_.GetNoArena();
}
inline void PhoneLoginRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginRsp.request_id)
}
#if LANG_CXX11
inline void PhoneLoginRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneLoginRsp.request_id)
}
#endif
inline void PhoneLoginRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneLoginRsp.request_id)
}
inline void PhoneLoginRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneLoginRsp.request_id)
}
inline ::std::string* PhoneLoginRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneLoginRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneLoginRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneLoginRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneLoginRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneLoginRsp.request_id)
}

// bool success = 2;
inline void PhoneLoginRsp::clear_success() {
  success_ = false;
}
inline bool PhoneLoginRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginRsp.success)
  return success_;
}
inline void PhoneLoginRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginRsp.success)
}

// string errmsg = 3;
inline void PhoneLoginRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneLoginRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void PhoneLoginRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginRsp.errmsg)
}
#if LANG_CXX11
inline void PhoneLoginRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneLoginRsp.errmsg)
}
#endif
inline void PhoneLoginRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneLoginRsp.errmsg)
}
inline void PhoneLoginRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneLoginRsp.errmsg)
}
inline ::std::string* PhoneLoginRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneLoginRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneLoginRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneLoginRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneLoginRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneLoginRsp.errmsg)
}

// string login_session_id = 4;
inline void PhoneLoginRsp::clear_login_session_id() {
  login_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneLoginRsp::login_session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PhoneLoginRsp.login_session_id)
  return login_session_id_.GetNoArena();
}
inline void PhoneLoginRsp::set_login_session_id(const ::std::string& value) {
  
  login_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PhoneLoginRsp.login_session_id)
}
#if LANG_CXX11
inline void PhoneLoginRsp::set_login_session_id(::std::string&& value) {
  
  login_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PhoneLoginRsp.login_session_id)
}
#endif
inline void PhoneLoginRsp::set_login_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PhoneLoginRsp.login_session_id)
}
inline void PhoneLoginRsp::set_login_session_id(const char* value, size_t size) {
  
  login_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PhoneLoginRsp.login_session_id)
}
inline ::std::string* PhoneLoginRsp::mutable_login_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PhoneLoginRsp.login_session_id)
  return login_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneLoginRsp::release_login_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.PhoneLoginRsp.login_session_id)
  
  return login_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneLoginRsp::set_allocated_login_session_id(::std::string* login_session_id) {
  if (login_session_id != NULL) {
    
  } else {
    
  }
  login_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PhoneLoginRsp.login_session_id)
}

// -------------------------------------------------------------------

// GetUserInfoReq

// string request_id = 1;
inline void GetUserInfoReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUserInfoReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetUserInfoReq.request_id)
  return request_id_.GetNoArena();
}
inline void GetUserInfoReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetUserInfoReq.request_id)
}
#if LANG_CXX11
inline void GetUserInfoReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetUserInfoReq.request_id)
}
#endif
inline void GetUserInfoReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetUserInfoReq.request_id)
}
inline void GetUserInfoReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetUserInfoReq.request_id)
}
inline ::std::string* GetUserInfoReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetUserInfoReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserInfoReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetUserInfoReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserInfoReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetUserInfoReq.request_id)
}

// string user_id = 2;
inline void GetUserInfoReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetUserInfoReq.user_id)
  return user_id_.GetNoArena();
}
inline void GetUserInfoReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetUserInfoReq.user_id)
}
#if LANG_CXX11
inline void GetUserInfoReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetUserInfoReq.user_id)
}
#endif
inline void GetUserInfoReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetUserInfoReq.user_id)
}
inline void GetUserInfoReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetUserInfoReq.user_id)
}
inline ::std::string* GetUserInfoReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetUserInfoReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserInfoReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetUserInfoReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserInfoReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetUserInfoReq.user_id)
}

// string session_id = 3;
inline void GetUserInfoReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUserInfoReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetUserInfoReq.session_id)
  return session_id_.GetNoArena();
}
inline void GetUserInfoReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetUserInfoReq.session_id)
}
#if LANG_CXX11
inline void GetUserInfoReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetUserInfoReq.session_id)
}
#endif
inline void GetUserInfoReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetUserInfoReq.session_id)
}
inline void GetUserInfoReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetUserInfoReq.session_id)
}
inline ::std::string* GetUserInfoReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetUserInfoReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserInfoReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetUserInfoReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserInfoReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetUserInfoReq.session_id)
}

// -------------------------------------------------------------------

// GetUserInfoRsp

// string request_id = 1;
inline void GetUserInfoRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUserInfoRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetUserInfoRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetUserInfoRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetUserInfoRsp.request_id)
}
#if LANG_CXX11
inline void GetUserInfoRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetUserInfoRsp.request_id)
}
#endif
inline void GetUserInfoRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetUserInfoRsp.request_id)
}
inline void GetUserInfoRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetUserInfoRsp.request_id)
}
inline ::std::string* GetUserInfoRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetUserInfoRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserInfoRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetUserInfoRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserInfoRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetUserInfoRsp.request_id)
}

// bool success = 2;
inline void GetUserInfoRsp::clear_success() {
  success_ = false;
}
inline bool GetUserInfoRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetUserInfoRsp.success)
  return success_;
}
inline void GetUserInfoRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetUserInfoRsp.success)
}

// string errmsg = 3;
inline void GetUserInfoRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUserInfoRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetUserInfoRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetUserInfoRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetUserInfoRsp.errmsg)
}
#if LANG_CXX11
inline void GetUserInfoRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetUserInfoRsp.errmsg)
}
#endif
inline void GetUserInfoRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetUserInfoRsp.errmsg)
}
inline void GetUserInfoRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetUserInfoRsp.errmsg)
}
inline ::std::string* GetUserInfoRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetUserInfoRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserInfoRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetUserInfoRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserInfoRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetUserInfoRsp.errmsg)
}

// .chen_im.UserInfo user_info = 4;
inline bool GetUserInfoRsp::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
inline const ::chen_im::UserInfo& GetUserInfoRsp::_internal_user_info() const {
  return *user_info_;
}
inline const ::chen_im::UserInfo& GetUserInfoRsp::user_info() const {
  const ::chen_im::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:chen_im.GetUserInfoRsp.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::UserInfo*>(
      &::chen_im::_UserInfo_default_instance_);
}
inline ::chen_im::UserInfo* GetUserInfoRsp::release_user_info() {
  // @@protoc_insertion_point(field_release:chen_im.GetUserInfoRsp.user_info)
  
  ::chen_im::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::chen_im::UserInfo* GetUserInfoRsp::mutable_user_info() {
  
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::UserInfo>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.GetUserInfoRsp.user_info)
  return user_info_;
}
inline void GetUserInfoRsp::set_allocated_user_info(::chen_im::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetUserInfoRsp.user_info)
}

// -------------------------------------------------------------------

// SetUserAvatarReq

// string request_id = 1;
inline void SetUserAvatarReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserAvatarReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserAvatarReq.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserAvatarReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserAvatarReq.request_id)
}
#if LANG_CXX11
inline void SetUserAvatarReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserAvatarReq.request_id)
}
#endif
inline void SetUserAvatarReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserAvatarReq.request_id)
}
inline void SetUserAvatarReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserAvatarReq.request_id)
}
inline ::std::string* SetUserAvatarReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserAvatarReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserAvatarReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserAvatarReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserAvatarReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserAvatarReq.request_id)
}

// string user_id = 2;
inline void SetUserAvatarReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserAvatarReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserAvatarReq.user_id)
  return user_id_.GetNoArena();
}
inline void SetUserAvatarReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserAvatarReq.user_id)
}
#if LANG_CXX11
inline void SetUserAvatarReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserAvatarReq.user_id)
}
#endif
inline void SetUserAvatarReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserAvatarReq.user_id)
}
inline void SetUserAvatarReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserAvatarReq.user_id)
}
inline ::std::string* SetUserAvatarReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserAvatarReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserAvatarReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserAvatarReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserAvatarReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserAvatarReq.user_id)
}

// string session_id = 3;
inline void SetUserAvatarReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserAvatarReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserAvatarReq.session_id)
  return session_id_.GetNoArena();
}
inline void SetUserAvatarReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserAvatarReq.session_id)
}
#if LANG_CXX11
inline void SetUserAvatarReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserAvatarReq.session_id)
}
#endif
inline void SetUserAvatarReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserAvatarReq.session_id)
}
inline void SetUserAvatarReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserAvatarReq.session_id)
}
inline ::std::string* SetUserAvatarReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserAvatarReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserAvatarReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserAvatarReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserAvatarReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserAvatarReq.session_id)
}

// bytes avatar = 4;
inline void SetUserAvatarReq::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserAvatarReq::avatar() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserAvatarReq.avatar)
  return avatar_.GetNoArena();
}
inline void SetUserAvatarReq::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserAvatarReq.avatar)
}
#if LANG_CXX11
inline void SetUserAvatarReq::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserAvatarReq.avatar)
}
#endif
inline void SetUserAvatarReq::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserAvatarReq.avatar)
}
inline void SetUserAvatarReq::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserAvatarReq.avatar)
}
inline ::std::string* SetUserAvatarReq::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserAvatarReq.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserAvatarReq::release_avatar() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserAvatarReq.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserAvatarReq::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserAvatarReq.avatar)
}

// -------------------------------------------------------------------

// SetUserAvatarRsp

// string request_id = 1;
inline void SetUserAvatarRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserAvatarRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserAvatarRsp.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserAvatarRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserAvatarRsp.request_id)
}
#if LANG_CXX11
inline void SetUserAvatarRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserAvatarRsp.request_id)
}
#endif
inline void SetUserAvatarRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserAvatarRsp.request_id)
}
inline void SetUserAvatarRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserAvatarRsp.request_id)
}
inline ::std::string* SetUserAvatarRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserAvatarRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserAvatarRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserAvatarRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserAvatarRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserAvatarRsp.request_id)
}

// bool success = 2;
inline void SetUserAvatarRsp::clear_success() {
  success_ = false;
}
inline bool SetUserAvatarRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserAvatarRsp.success)
  return success_;
}
inline void SetUserAvatarRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.SetUserAvatarRsp.success)
}

// string errmsg = 3;
inline void SetUserAvatarRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserAvatarRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserAvatarRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void SetUserAvatarRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserAvatarRsp.errmsg)
}
#if LANG_CXX11
inline void SetUserAvatarRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserAvatarRsp.errmsg)
}
#endif
inline void SetUserAvatarRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserAvatarRsp.errmsg)
}
inline void SetUserAvatarRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserAvatarRsp.errmsg)
}
inline ::std::string* SetUserAvatarRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserAvatarRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserAvatarRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserAvatarRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserAvatarRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserAvatarRsp.errmsg)
}

// -------------------------------------------------------------------

// SetUserNicknameReq

// string request_id = 1;
inline void SetUserNicknameReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserNicknameReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserNicknameReq.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserNicknameReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserNicknameReq.request_id)
}
#if LANG_CXX11
inline void SetUserNicknameReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserNicknameReq.request_id)
}
#endif
inline void SetUserNicknameReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserNicknameReq.request_id)
}
inline void SetUserNicknameReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserNicknameReq.request_id)
}
inline ::std::string* SetUserNicknameReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserNicknameReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserNicknameReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserNicknameReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserNicknameReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserNicknameReq.request_id)
}

// string user_id = 2;
inline void SetUserNicknameReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserNicknameReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserNicknameReq.user_id)
  return user_id_.GetNoArena();
}
inline void SetUserNicknameReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserNicknameReq.user_id)
}
#if LANG_CXX11
inline void SetUserNicknameReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserNicknameReq.user_id)
}
#endif
inline void SetUserNicknameReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserNicknameReq.user_id)
}
inline void SetUserNicknameReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserNicknameReq.user_id)
}
inline ::std::string* SetUserNicknameReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserNicknameReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserNicknameReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserNicknameReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserNicknameReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserNicknameReq.user_id)
}

// string session_id = 3;
inline void SetUserNicknameReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserNicknameReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserNicknameReq.session_id)
  return session_id_.GetNoArena();
}
inline void SetUserNicknameReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserNicknameReq.session_id)
}
#if LANG_CXX11
inline void SetUserNicknameReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserNicknameReq.session_id)
}
#endif
inline void SetUserNicknameReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserNicknameReq.session_id)
}
inline void SetUserNicknameReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserNicknameReq.session_id)
}
inline ::std::string* SetUserNicknameReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserNicknameReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserNicknameReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserNicknameReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserNicknameReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserNicknameReq.session_id)
}

// string nickname = 4;
inline void SetUserNicknameReq::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserNicknameReq::nickname() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserNicknameReq.nickname)
  return nickname_.GetNoArena();
}
inline void SetUserNicknameReq::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserNicknameReq.nickname)
}
#if LANG_CXX11
inline void SetUserNicknameReq::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserNicknameReq.nickname)
}
#endif
inline void SetUserNicknameReq::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserNicknameReq.nickname)
}
inline void SetUserNicknameReq::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserNicknameReq.nickname)
}
inline ::std::string* SetUserNicknameReq::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserNicknameReq.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserNicknameReq::release_nickname() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserNicknameReq.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserNicknameReq::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserNicknameReq.nickname)
}

// -------------------------------------------------------------------

// SetUserNicknameRsp

// string request_id = 1;
inline void SetUserNicknameRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserNicknameRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserNicknameRsp.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserNicknameRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserNicknameRsp.request_id)
}
#if LANG_CXX11
inline void SetUserNicknameRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserNicknameRsp.request_id)
}
#endif
inline void SetUserNicknameRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserNicknameRsp.request_id)
}
inline void SetUserNicknameRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserNicknameRsp.request_id)
}
inline ::std::string* SetUserNicknameRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserNicknameRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserNicknameRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserNicknameRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserNicknameRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserNicknameRsp.request_id)
}

// bool success = 2;
inline void SetUserNicknameRsp::clear_success() {
  success_ = false;
}
inline bool SetUserNicknameRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserNicknameRsp.success)
  return success_;
}
inline void SetUserNicknameRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.SetUserNicknameRsp.success)
}

// string errmsg = 3;
inline void SetUserNicknameRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserNicknameRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserNicknameRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void SetUserNicknameRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserNicknameRsp.errmsg)
}
#if LANG_CXX11
inline void SetUserNicknameRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserNicknameRsp.errmsg)
}
#endif
inline void SetUserNicknameRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserNicknameRsp.errmsg)
}
inline void SetUserNicknameRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserNicknameRsp.errmsg)
}
inline ::std::string* SetUserNicknameRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserNicknameRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserNicknameRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserNicknameRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserNicknameRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserNicknameRsp.errmsg)
}

// -------------------------------------------------------------------

// SetUserDescriptionReq

// string request_id = 1;
inline void SetUserDescriptionReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserDescriptionReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserDescriptionReq.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserDescriptionReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserDescriptionReq.request_id)
}
#if LANG_CXX11
inline void SetUserDescriptionReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserDescriptionReq.request_id)
}
#endif
inline void SetUserDescriptionReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserDescriptionReq.request_id)
}
inline void SetUserDescriptionReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserDescriptionReq.request_id)
}
inline ::std::string* SetUserDescriptionReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserDescriptionReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserDescriptionReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserDescriptionReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserDescriptionReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserDescriptionReq.request_id)
}

// string user_id = 2;
inline void SetUserDescriptionReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserDescriptionReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserDescriptionReq.user_id)
  return user_id_.GetNoArena();
}
inline void SetUserDescriptionReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserDescriptionReq.user_id)
}
#if LANG_CXX11
inline void SetUserDescriptionReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserDescriptionReq.user_id)
}
#endif
inline void SetUserDescriptionReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserDescriptionReq.user_id)
}
inline void SetUserDescriptionReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserDescriptionReq.user_id)
}
inline ::std::string* SetUserDescriptionReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserDescriptionReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserDescriptionReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserDescriptionReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserDescriptionReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserDescriptionReq.user_id)
}

// string session_id = 3;
inline void SetUserDescriptionReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserDescriptionReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserDescriptionReq.session_id)
  return session_id_.GetNoArena();
}
inline void SetUserDescriptionReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserDescriptionReq.session_id)
}
#if LANG_CXX11
inline void SetUserDescriptionReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserDescriptionReq.session_id)
}
#endif
inline void SetUserDescriptionReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserDescriptionReq.session_id)
}
inline void SetUserDescriptionReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserDescriptionReq.session_id)
}
inline ::std::string* SetUserDescriptionReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserDescriptionReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserDescriptionReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserDescriptionReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserDescriptionReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserDescriptionReq.session_id)
}

// string description = 4;
inline void SetUserDescriptionReq::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserDescriptionReq::description() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserDescriptionReq.description)
  return description_.GetNoArena();
}
inline void SetUserDescriptionReq::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserDescriptionReq.description)
}
#if LANG_CXX11
inline void SetUserDescriptionReq::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserDescriptionReq.description)
}
#endif
inline void SetUserDescriptionReq::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserDescriptionReq.description)
}
inline void SetUserDescriptionReq::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserDescriptionReq.description)
}
inline ::std::string* SetUserDescriptionReq::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserDescriptionReq.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserDescriptionReq::release_description() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserDescriptionReq.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserDescriptionReq::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserDescriptionReq.description)
}

// -------------------------------------------------------------------

// SetUserDescriptionRsp

// string request_id = 1;
inline void SetUserDescriptionRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserDescriptionRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserDescriptionRsp.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserDescriptionRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserDescriptionRsp.request_id)
}
#if LANG_CXX11
inline void SetUserDescriptionRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserDescriptionRsp.request_id)
}
#endif
inline void SetUserDescriptionRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserDescriptionRsp.request_id)
}
inline void SetUserDescriptionRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserDescriptionRsp.request_id)
}
inline ::std::string* SetUserDescriptionRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserDescriptionRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserDescriptionRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserDescriptionRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserDescriptionRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserDescriptionRsp.request_id)
}

// bool success = 2;
inline void SetUserDescriptionRsp::clear_success() {
  success_ = false;
}
inline bool SetUserDescriptionRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserDescriptionRsp.success)
  return success_;
}
inline void SetUserDescriptionRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.SetUserDescriptionRsp.success)
}

// string errmsg = 3;
inline void SetUserDescriptionRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserDescriptionRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserDescriptionRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void SetUserDescriptionRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserDescriptionRsp.errmsg)
}
#if LANG_CXX11
inline void SetUserDescriptionRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserDescriptionRsp.errmsg)
}
#endif
inline void SetUserDescriptionRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserDescriptionRsp.errmsg)
}
inline void SetUserDescriptionRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserDescriptionRsp.errmsg)
}
inline ::std::string* SetUserDescriptionRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserDescriptionRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserDescriptionRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserDescriptionRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserDescriptionRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserDescriptionRsp.errmsg)
}

// -------------------------------------------------------------------

// SetUserPhoneNumberReq

// string request_id = 1;
inline void SetUserPhoneNumberReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberReq.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserPhoneNumberReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberReq.request_id)
}
#if LANG_CXX11
inline void SetUserPhoneNumberReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberReq.request_id)
}
#endif
inline void SetUserPhoneNumberReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberReq.request_id)
}
inline void SetUserPhoneNumberReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberReq.request_id)
}
inline ::std::string* SetUserPhoneNumberReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberReq.request_id)
}

// string user_id = 2;
inline void SetUserPhoneNumberReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberReq.user_id)
  return user_id_.GetNoArena();
}
inline void SetUserPhoneNumberReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberReq.user_id)
}
#if LANG_CXX11
inline void SetUserPhoneNumberReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberReq.user_id)
}
#endif
inline void SetUserPhoneNumberReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberReq.user_id)
}
inline void SetUserPhoneNumberReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberReq.user_id)
}
inline ::std::string* SetUserPhoneNumberReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberReq.user_id)
}

// string session_id = 3;
inline void SetUserPhoneNumberReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberReq.session_id)
  return session_id_.GetNoArena();
}
inline void SetUserPhoneNumberReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberReq.session_id)
}
#if LANG_CXX11
inline void SetUserPhoneNumberReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberReq.session_id)
}
#endif
inline void SetUserPhoneNumberReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberReq.session_id)
}
inline void SetUserPhoneNumberReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberReq.session_id)
}
inline ::std::string* SetUserPhoneNumberReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberReq.session_id)
}

// string phone_number = 4;
inline void SetUserPhoneNumberReq::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberReq::phone_number() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberReq.phone_number)
  return phone_number_.GetNoArena();
}
inline void SetUserPhoneNumberReq::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberReq.phone_number)
}
#if LANG_CXX11
inline void SetUserPhoneNumberReq::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberReq.phone_number)
}
#endif
inline void SetUserPhoneNumberReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberReq.phone_number)
}
inline void SetUserPhoneNumberReq::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberReq.phone_number)
}
inline ::std::string* SetUserPhoneNumberReq::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberReq.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberReq.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberReq::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberReq.phone_number)
}

// string phone_verify_code_id = 5;
inline void SetUserPhoneNumberReq::clear_phone_verify_code_id() {
  phone_verify_code_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberReq::phone_verify_code_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
  return phone_verify_code_id_.GetNoArena();
}
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(const ::std::string& value) {
  
  phone_verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
}
#if LANG_CXX11
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(::std::string&& value) {
  
  phone_verify_code_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
}
#endif
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
}
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(const char* value, size_t size) {
  
  phone_verify_code_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
}
inline ::std::string* SetUserPhoneNumberReq::mutable_phone_verify_code_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
  return phone_verify_code_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberReq::release_phone_verify_code_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
  
  return phone_verify_code_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberReq::set_allocated_phone_verify_code_id(::std::string* phone_verify_code_id) {
  if (phone_verify_code_id != NULL) {
    
  } else {
    
  }
  phone_verify_code_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_verify_code_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberReq.phone_verify_code_id)
}

// string phone_verify_code = 6;
inline void SetUserPhoneNumberReq::clear_phone_verify_code() {
  phone_verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberReq::phone_verify_code() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberReq.phone_verify_code)
  return phone_verify_code_.GetNoArena();
}
inline void SetUserPhoneNumberReq::set_phone_verify_code(const ::std::string& value) {
  
  phone_verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberReq.phone_verify_code)
}
#if LANG_CXX11
inline void SetUserPhoneNumberReq::set_phone_verify_code(::std::string&& value) {
  
  phone_verify_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberReq.phone_verify_code)
}
#endif
inline void SetUserPhoneNumberReq::set_phone_verify_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberReq.phone_verify_code)
}
inline void SetUserPhoneNumberReq::set_phone_verify_code(const char* value, size_t size) {
  
  phone_verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberReq.phone_verify_code)
}
inline ::std::string* SetUserPhoneNumberReq::mutable_phone_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberReq.phone_verify_code)
  return phone_verify_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberReq::release_phone_verify_code() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberReq.phone_verify_code)
  
  return phone_verify_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberReq::set_allocated_phone_verify_code(::std::string* phone_verify_code) {
  if (phone_verify_code != NULL) {
    
  } else {
    
  }
  phone_verify_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_verify_code);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberReq.phone_verify_code)
}

// -------------------------------------------------------------------

// SetUserPhoneNumberRsp

// string request_id = 1;
inline void SetUserPhoneNumberRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberRsp.request_id)
  return request_id_.GetNoArena();
}
inline void SetUserPhoneNumberRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberRsp.request_id)
}
#if LANG_CXX11
inline void SetUserPhoneNumberRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberRsp.request_id)
}
#endif
inline void SetUserPhoneNumberRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberRsp.request_id)
}
inline void SetUserPhoneNumberRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberRsp.request_id)
}
inline ::std::string* SetUserPhoneNumberRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberRsp.request_id)
}

// bool success = 2;
inline void SetUserPhoneNumberRsp::clear_success() {
  success_ = false;
}
inline bool SetUserPhoneNumberRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberRsp.success)
  return success_;
}
inline void SetUserPhoneNumberRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberRsp.success)
}

// string errmsg = 3;
inline void SetUserPhoneNumberRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetUserPhoneNumberRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.SetUserPhoneNumberRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void SetUserPhoneNumberRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SetUserPhoneNumberRsp.errmsg)
}
#if LANG_CXX11
inline void SetUserPhoneNumberRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SetUserPhoneNumberRsp.errmsg)
}
#endif
inline void SetUserPhoneNumberRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SetUserPhoneNumberRsp.errmsg)
}
inline void SetUserPhoneNumberRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SetUserPhoneNumberRsp.errmsg)
}
inline ::std::string* SetUserPhoneNumberRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SetUserPhoneNumberRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetUserPhoneNumberRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.SetUserPhoneNumberRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetUserPhoneNumberRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SetUserPhoneNumberRsp.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chen_im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_user_2eproto
