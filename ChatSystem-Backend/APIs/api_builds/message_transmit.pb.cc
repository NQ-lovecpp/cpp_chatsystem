// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_transmit.proto

#include "message_transmit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_base_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MessageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_MessageContent;
}  // namespace protobuf_base_2eproto
namespace chen_im {
class NewMessageReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewMessageReq>
      _instance;
} _NewMessageReq_default_instance_;
class NewMessageRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewMessageRsp>
      _instance;
} _NewMessageRsp_default_instance_;
class GetTransmitTargetRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTransmitTargetRsp>
      _instance;
} _GetTransmitTargetRsp_default_instance_;
}  // namespace chen_im
namespace protobuf_message_5ftransmit_2eproto {
static void InitDefaultsNewMessageReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NewMessageReq_default_instance_;
    new (ptr) ::chen_im::NewMessageReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NewMessageReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewMessageReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewMessageReq}, {
      &protobuf_base_2eproto::scc_info_MessageContent.base,}};

static void InitDefaultsNewMessageRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_NewMessageRsp_default_instance_;
    new (ptr) ::chen_im::NewMessageRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::NewMessageRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NewMessageRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNewMessageRsp}, {}};

static void InitDefaultsGetTransmitTargetRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetTransmitTargetRsp_default_instance_;
    new (ptr) ::chen_im::GetTransmitTargetRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetTransmitTargetRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTransmitTargetRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTransmitTargetRsp}, {
      &protobuf_base_2eproto::scc_info_MessageInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NewMessageReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewMessageRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTransmitTargetRsp.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageReq, chat_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageReq, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::NewMessageRsp, errmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetTransmitTargetRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetTransmitTargetRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetTransmitTargetRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetTransmitTargetRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetTransmitTargetRsp, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetTransmitTargetRsp, target_id_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chen_im::NewMessageReq)},
  { 10, -1, sizeof(::chen_im::NewMessageRsp)},
  { 18, -1, sizeof(::chen_im::GetTransmitTargetRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NewMessageReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_NewMessageRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetTransmitTargetRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "message_transmit.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026message_transmit.proto\022\007chen_im\032\nbase."
      "proto\"\213\001\n\rNewMessageReq\022\022\n\nrequest_id\030\001 "
      "\001(\t\022\017\n\007user_id\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t"
      "\022\027\n\017chat_session_id\030\004 \001(\t\022(\n\007message\030\005 \001"
      "(\0132\027.chen_im.MessageContent\"D\n\rNewMessag"
      "eRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001("
      "\010\022\016\n\006errmsg\030\003 \001(\t\"\212\001\n\024GetTransmitTargetR"
      "sp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022"
      "\016\n\006errmsg\030\003 \001(\t\022%\n\007message\030\004 \001(\0132\024.chen_"
      "im.MessageInfo\022\026\n\016target_id_list\030\005 \003(\t2`"
      "\n\022MsgTransmitService\022J\n\021GetTransmitTarge"
      "t\022\026.chen_im.NewMessageReq\032\035.chen_im.GetT"
      "ransmitTargetRspB\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_transmit.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_5ftransmit_2eproto
namespace chen_im {

// ===================================================================

void NewMessageReq::InitAsDefaultInstance() {
  ::chen_im::_NewMessageReq_default_instance_._instance.get_mutable()->message_ = const_cast< ::chen_im::MessageContent*>(
      ::chen_im::MessageContent::internal_default_instance());
}
void NewMessageReq::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMessageReq::kRequestIdFieldNumber;
const int NewMessageReq::kUserIdFieldNumber;
const int NewMessageReq::kSessionIdFieldNumber;
const int NewMessageReq::kChatSessionIdFieldNumber;
const int NewMessageReq::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMessageReq::NewMessageReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5ftransmit_2eproto::scc_info_NewMessageReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NewMessageReq)
}
NewMessageReq::NewMessageReq(const NewMessageReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_session_id().size() > 0) {
    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
  if (from.has_message()) {
    message_ = new ::chen_im::MessageContent(*from.message_);
  } else {
    message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.NewMessageReq)
}

void NewMessageReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
}

NewMessageReq::~NewMessageReq() {
  // @@protoc_insertion_point(destructor:chen_im.NewMessageReq)
  SharedDtor();
}

void NewMessageReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void NewMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewMessageReq::descriptor() {
  ::protobuf_message_5ftransmit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5ftransmit_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewMessageReq& NewMessageReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5ftransmit_2eproto::scc_info_NewMessageReq.base);
  return *internal_default_instance();
}


void NewMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NewMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
  _internal_metadata_.Clear();
}

bool NewMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NewMessageReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NewMessageReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NewMessageReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NewMessageReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NewMessageReq.chat_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.MessageContent message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NewMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NewMessageReq)
  return false;
#undef DO_
}

void NewMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NewMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // string chat_session_id = 4;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.chat_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chat_session_id(), output);
  }

  // .chen_im.MessageContent message = 5;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NewMessageReq)
}

::google::protobuf::uint8* NewMessageReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NewMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // string chat_session_id = 4;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageReq.chat_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chat_session_id(), target);
  }

  // .chen_im.MessageContent message = 5;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_message(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NewMessageReq)
  return target;
}

size_t NewMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NewMessageReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string chat_session_id = 4;
  if (this->chat_session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_session_id());
  }

  // .chen_im.MessageContent message = 5;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NewMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMessageReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewMessageReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NewMessageReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NewMessageReq)
    MergeFrom(*source);
  }
}

void NewMessageReq::MergeFrom(const NewMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NewMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.chat_session_id().size() > 0) {

    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
  if (from.has_message()) {
    mutable_message()->::chen_im::MessageContent::MergeFrom(from.message());
  }
}

void NewMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NewMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMessageReq::CopyFrom(const NewMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NewMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMessageReq::IsInitialized() const {
  return true;
}

void NewMessageReq::Swap(NewMessageReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMessageReq::InternalSwap(NewMessageReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_session_id_.Swap(&other->chat_session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewMessageReq::GetMetadata() const {
  protobuf_message_5ftransmit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5ftransmit_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewMessageRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMessageRsp::kRequestIdFieldNumber;
const int NewMessageRsp::kSuccessFieldNumber;
const int NewMessageRsp::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMessageRsp::NewMessageRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5ftransmit_2eproto::scc_info_NewMessageRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.NewMessageRsp)
}
NewMessageRsp::NewMessageRsp(const NewMessageRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.NewMessageRsp)
}

void NewMessageRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

NewMessageRsp::~NewMessageRsp() {
  // @@protoc_insertion_point(destructor:chen_im.NewMessageRsp)
  SharedDtor();
}

void NewMessageRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewMessageRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewMessageRsp::descriptor() {
  ::protobuf_message_5ftransmit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5ftransmit_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewMessageRsp& NewMessageRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5ftransmit_2eproto::scc_info_NewMessageRsp.base);
  return *internal_default_instance();
}


void NewMessageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.NewMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool NewMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.NewMessageRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NewMessageRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.NewMessageRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.NewMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.NewMessageRsp)
  return false;
#undef DO_
}

void NewMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.NewMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.NewMessageRsp)
}

::google::protobuf::uint8* NewMessageRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.NewMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.NewMessageRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.NewMessageRsp)
  return target;
}

size_t NewMessageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.NewMessageRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.NewMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMessageRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewMessageRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.NewMessageRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.NewMessageRsp)
    MergeFrom(*source);
  }
}

void NewMessageRsp::MergeFrom(const NewMessageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.NewMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void NewMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.NewMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMessageRsp::CopyFrom(const NewMessageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.NewMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMessageRsp::IsInitialized() const {
  return true;
}

void NewMessageRsp::Swap(NewMessageRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMessageRsp::InternalSwap(NewMessageRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewMessageRsp::GetMetadata() const {
  protobuf_message_5ftransmit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5ftransmit_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTransmitTargetRsp::InitAsDefaultInstance() {
  ::chen_im::_GetTransmitTargetRsp_default_instance_._instance.get_mutable()->message_ = const_cast< ::chen_im::MessageInfo*>(
      ::chen_im::MessageInfo::internal_default_instance());
}
void GetTransmitTargetRsp::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTransmitTargetRsp::kRequestIdFieldNumber;
const int GetTransmitTargetRsp::kSuccessFieldNumber;
const int GetTransmitTargetRsp::kErrmsgFieldNumber;
const int GetTransmitTargetRsp::kMessageFieldNumber;
const int GetTransmitTargetRsp::kTargetIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTransmitTargetRsp::GetTransmitTargetRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5ftransmit_2eproto::scc_info_GetTransmitTargetRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetTransmitTargetRsp)
}
GetTransmitTargetRsp::GetTransmitTargetRsp(const GetTransmitTargetRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      target_id_list_(from.target_id_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_message()) {
    message_ = new ::chen_im::MessageInfo(*from.message_);
  } else {
    message_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.GetTransmitTargetRsp)
}

void GetTransmitTargetRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&message_)) + sizeof(success_));
}

GetTransmitTargetRsp::~GetTransmitTargetRsp() {
  // @@protoc_insertion_point(destructor:chen_im.GetTransmitTargetRsp)
  SharedDtor();
}

void GetTransmitTargetRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void GetTransmitTargetRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTransmitTargetRsp::descriptor() {
  ::protobuf_message_5ftransmit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5ftransmit_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTransmitTargetRsp& GetTransmitTargetRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5ftransmit_2eproto::scc_info_GetTransmitTargetRsp.base);
  return *internal_default_instance();
}


void GetTransmitTargetRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetTransmitTargetRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_id_list_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool GetTransmitTargetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetTransmitTargetRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetTransmitTargetRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetTransmitTargetRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.MessageInfo message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target_id_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_id_list(this->target_id_list_size() - 1).data(),
            static_cast<int>(this->target_id_list(this->target_id_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetTransmitTargetRsp.target_id_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetTransmitTargetRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetTransmitTargetRsp)
  return false;
#undef DO_
}

void GetTransmitTargetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetTransmitTargetRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetTransmitTargetRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetTransmitTargetRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // .chen_im.MessageInfo message = 4;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_message(), output);
  }

  // repeated string target_id_list = 5;
  for (int i = 0, n = this->target_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_id_list(i).data(), static_cast<int>(this->target_id_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetTransmitTargetRsp.target_id_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->target_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetTransmitTargetRsp)
}

::google::protobuf::uint8* GetTransmitTargetRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetTransmitTargetRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetTransmitTargetRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetTransmitTargetRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // .chen_im.MessageInfo message = 4;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_message(), deterministic, target);
  }

  // repeated string target_id_list = 5;
  for (int i = 0, n = this->target_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_id_list(i).data(), static_cast<int>(this->target_id_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetTransmitTargetRsp.target_id_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->target_id_list(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetTransmitTargetRsp)
  return target;
}

size_t GetTransmitTargetRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetTransmitTargetRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string target_id_list = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->target_id_list_size());
  for (int i = 0, n = this->target_id_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target_id_list(i));
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // .chen_im.MessageInfo message = 4;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransmitTargetRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetTransmitTargetRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransmitTargetRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTransmitTargetRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetTransmitTargetRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetTransmitTargetRsp)
    MergeFrom(*source);
  }
}

void GetTransmitTargetRsp::MergeFrom(const GetTransmitTargetRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetTransmitTargetRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_id_list_.MergeFrom(from.target_id_list_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_message()) {
    mutable_message()->::chen_im::MessageInfo::MergeFrom(from.message());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GetTransmitTargetRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetTransmitTargetRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransmitTargetRsp::CopyFrom(const GetTransmitTargetRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetTransmitTargetRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransmitTargetRsp::IsInitialized() const {
  return true;
}

void GetTransmitTargetRsp::Swap(GetTransmitTargetRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTransmitTargetRsp::InternalSwap(GetTransmitTargetRsp* other) {
  using std::swap;
  target_id_list_.InternalSwap(CastToBase(&other->target_id_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTransmitTargetRsp::GetMetadata() const {
  protobuf_message_5ftransmit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5ftransmit_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MsgTransmitService::~MsgTransmitService() {}

const ::google::protobuf::ServiceDescriptor* MsgTransmitService::descriptor() {
  protobuf_message_5ftransmit_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_5ftransmit_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* MsgTransmitService::GetDescriptor() {
  return descriptor();
}

void MsgTransmitService::GetTransmitTarget(::google::protobuf::RpcController* controller,
                         const ::chen_im::NewMessageReq*,
                         ::chen_im::GetTransmitTargetRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTransmitTarget() not implemented.");
  done->Run();
}

void MsgTransmitService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_message_5ftransmit_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetTransmitTarget(controller,
             ::google::protobuf::down_cast<const ::chen_im::NewMessageReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::GetTransmitTargetRsp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MsgTransmitService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::NewMessageReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& MsgTransmitService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::GetTransmitTargetRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MsgTransmitService_Stub::MsgTransmitService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MsgTransmitService_Stub::MsgTransmitService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MsgTransmitService_Stub::~MsgTransmitService_Stub() {
  if (owns_channel_) delete channel_;
}

void MsgTransmitService_Stub::GetTransmitTarget(::google::protobuf::RpcController* controller,
                              const ::chen_im::NewMessageReq* request,
                              ::chen_im::GetTransmitTargetRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NewMessageReq* Arena::CreateMaybeMessage< ::chen_im::NewMessageReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NewMessageReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::NewMessageRsp* Arena::CreateMaybeMessage< ::chen_im::NewMessageRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::NewMessageRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetTransmitTargetRsp* Arena::CreateMaybeMessage< ::chen_im::GetTransmitTargetRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetTransmitTargetRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
