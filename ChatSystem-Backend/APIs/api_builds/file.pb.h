// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef PROTOBUF_INCLUDED_file_2eproto
#define PROTOBUF_INCLUDED_file_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_file_2eproto 

namespace protobuf_file_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_file_2eproto
namespace chen_im {
class GetMultiFileReq;
class GetMultiFileReqDefaultTypeInternal;
extern GetMultiFileReqDefaultTypeInternal _GetMultiFileReq_default_instance_;
class GetMultiFileRsp;
class GetMultiFileRspDefaultTypeInternal;
extern GetMultiFileRspDefaultTypeInternal _GetMultiFileRsp_default_instance_;
class GetMultiFileRsp_FileDataEntry_DoNotUse;
class GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal;
extern GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal _GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_;
class GetSingleFileReq;
class GetSingleFileReqDefaultTypeInternal;
extern GetSingleFileReqDefaultTypeInternal _GetSingleFileReq_default_instance_;
class GetSingleFileRsp;
class GetSingleFileRspDefaultTypeInternal;
extern GetSingleFileRspDefaultTypeInternal _GetSingleFileRsp_default_instance_;
class PutMultiFileReq;
class PutMultiFileReqDefaultTypeInternal;
extern PutMultiFileReqDefaultTypeInternal _PutMultiFileReq_default_instance_;
class PutMultiFileRsp;
class PutMultiFileRspDefaultTypeInternal;
extern PutMultiFileRspDefaultTypeInternal _PutMultiFileRsp_default_instance_;
class PutSingleFileReq;
class PutSingleFileReqDefaultTypeInternal;
extern PutSingleFileReqDefaultTypeInternal _PutSingleFileReq_default_instance_;
class PutSingleFileRsp;
class PutSingleFileRspDefaultTypeInternal;
extern PutSingleFileRspDefaultTypeInternal _PutSingleFileRsp_default_instance_;
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> ::chen_im::GetMultiFileReq* Arena::CreateMaybeMessage<::chen_im::GetMultiFileReq>(Arena*);
template<> ::chen_im::GetMultiFileRsp* Arena::CreateMaybeMessage<::chen_im::GetMultiFileRsp>(Arena*);
template<> ::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse* Arena::CreateMaybeMessage<::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse>(Arena*);
template<> ::chen_im::GetSingleFileReq* Arena::CreateMaybeMessage<::chen_im::GetSingleFileReq>(Arena*);
template<> ::chen_im::GetSingleFileRsp* Arena::CreateMaybeMessage<::chen_im::GetSingleFileRsp>(Arena*);
template<> ::chen_im::PutMultiFileReq* Arena::CreateMaybeMessage<::chen_im::PutMultiFileReq>(Arena*);
template<> ::chen_im::PutMultiFileRsp* Arena::CreateMaybeMessage<::chen_im::PutMultiFileRsp>(Arena*);
template<> ::chen_im::PutSingleFileReq* Arena::CreateMaybeMessage<::chen_im::PutSingleFileReq>(Arena*);
template<> ::chen_im::PutSingleFileRsp* Arena::CreateMaybeMessage<::chen_im::PutSingleFileRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chen_im {

// ===================================================================

class GetSingleFileReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetSingleFileReq) */ {
 public:
  GetSingleFileReq();
  virtual ~GetSingleFileReq();

  GetSingleFileReq(const GetSingleFileReq& from);

  inline GetSingleFileReq& operator=(const GetSingleFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSingleFileReq(GetSingleFileReq&& from) noexcept
    : GetSingleFileReq() {
    *this = ::std::move(from);
  }

  inline GetSingleFileReq& operator=(GetSingleFileReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSingleFileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSingleFileReq* internal_default_instance() {
    return reinterpret_cast<const GetSingleFileReq*>(
               &_GetSingleFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetSingleFileReq* other);
  friend void swap(GetSingleFileReq& a, GetSingleFileReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSingleFileReq* New() const final {
    return CreateMaybeMessage<GetSingleFileReq>(NULL);
  }

  GetSingleFileReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSingleFileReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSingleFileReq& from);
  void MergeFrom(const GetSingleFileReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSingleFileReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string file_id = 2;
  void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 4;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:chen_im.GetSingleFileReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSingleFileRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetSingleFileRsp) */ {
 public:
  GetSingleFileRsp();
  virtual ~GetSingleFileRsp();

  GetSingleFileRsp(const GetSingleFileRsp& from);

  inline GetSingleFileRsp& operator=(const GetSingleFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSingleFileRsp(GetSingleFileRsp&& from) noexcept
    : GetSingleFileRsp() {
    *this = ::std::move(from);
  }

  inline GetSingleFileRsp& operator=(GetSingleFileRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSingleFileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSingleFileRsp* internal_default_instance() {
    return reinterpret_cast<const GetSingleFileRsp*>(
               &_GetSingleFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetSingleFileRsp* other);
  friend void swap(GetSingleFileRsp& a, GetSingleFileRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSingleFileRsp* New() const final {
    return CreateMaybeMessage<GetSingleFileRsp>(NULL);
  }

  GetSingleFileRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSingleFileRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSingleFileRsp& from);
  void MergeFrom(const GetSingleFileRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSingleFileRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .chen_im.FileDownloadData file_data = 4;
  bool has_file_data() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 4;
  private:
  const ::chen_im::FileDownloadData& _internal_file_data() const;
  public:
  const ::chen_im::FileDownloadData& file_data() const;
  ::chen_im::FileDownloadData* release_file_data();
  ::chen_im::FileDownloadData* mutable_file_data();
  void set_allocated_file_data(::chen_im::FileDownloadData* file_data);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetSingleFileRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::chen_im::FileDownloadData* file_data_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMultiFileReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetMultiFileReq) */ {
 public:
  GetMultiFileReq();
  virtual ~GetMultiFileReq();

  GetMultiFileReq(const GetMultiFileReq& from);

  inline GetMultiFileReq& operator=(const GetMultiFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMultiFileReq(GetMultiFileReq&& from) noexcept
    : GetMultiFileReq() {
    *this = ::std::move(from);
  }

  inline GetMultiFileReq& operator=(GetMultiFileReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMultiFileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMultiFileReq* internal_default_instance() {
    return reinterpret_cast<const GetMultiFileReq*>(
               &_GetMultiFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetMultiFileReq* other);
  friend void swap(GetMultiFileReq& a, GetMultiFileReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMultiFileReq* New() const final {
    return CreateMaybeMessage<GetMultiFileReq>(NULL);
  }

  GetMultiFileReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMultiFileReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMultiFileReq& from);
  void MergeFrom(const GetMultiFileReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultiFileReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string file_id_list = 4;
  int file_id_list_size() const;
  void clear_file_id_list();
  static const int kFileIdListFieldNumber = 4;
  const ::std::string& file_id_list(int index) const;
  ::std::string* mutable_file_id_list(int index);
  void set_file_id_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_file_id_list(int index, ::std::string&& value);
  #endif
  void set_file_id_list(int index, const char* value);
  void set_file_id_list(int index, const char* value, size_t size);
  ::std::string* add_file_id_list();
  void add_file_id_list(const ::std::string& value);
  #if LANG_CXX11
  void add_file_id_list(::std::string&& value);
  #endif
  void add_file_id_list(const char* value);
  void add_file_id_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_id_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_id_list();

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:chen_im.GetMultiFileReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_id_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMultiFileRsp_FileDataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GetMultiFileRsp_FileDataEntry_DoNotUse, 
    ::std::string, ::chen_im::FileDownloadData,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GetMultiFileRsp_FileDataEntry_DoNotUse, 
    ::std::string, ::chen_im::FileDownloadData,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetMultiFileRsp_FileDataEntry_DoNotUse();
  GetMultiFileRsp_FileDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GetMultiFileRsp_FileDataEntry_DoNotUse& other);
  static const GetMultiFileRsp_FileDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetMultiFileRsp_FileDataEntry_DoNotUse*>(&_GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GetMultiFileRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetMultiFileRsp) */ {
 public:
  GetMultiFileRsp();
  virtual ~GetMultiFileRsp();

  GetMultiFileRsp(const GetMultiFileRsp& from);

  inline GetMultiFileRsp& operator=(const GetMultiFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMultiFileRsp(GetMultiFileRsp&& from) noexcept
    : GetMultiFileRsp() {
    *this = ::std::move(from);
  }

  inline GetMultiFileRsp& operator=(GetMultiFileRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMultiFileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMultiFileRsp* internal_default_instance() {
    return reinterpret_cast<const GetMultiFileRsp*>(
               &_GetMultiFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetMultiFileRsp* other);
  friend void swap(GetMultiFileRsp& a, GetMultiFileRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMultiFileRsp* New() const final {
    return CreateMaybeMessage<GetMultiFileRsp>(NULL);
  }

  GetMultiFileRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMultiFileRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMultiFileRsp& from);
  void MergeFrom(const GetMultiFileRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultiFileRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .chen_im.FileDownloadData> file_data = 4;
  int file_data_size() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >&
      file_data() const;
  ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >*
      mutable_file_data();

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetMultiFileRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      GetMultiFileRsp_FileDataEntry_DoNotUse,
      ::std::string, ::chen_im::FileDownloadData,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > file_data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutSingleFileReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PutSingleFileReq) */ {
 public:
  PutSingleFileReq();
  virtual ~PutSingleFileReq();

  PutSingleFileReq(const PutSingleFileReq& from);

  inline PutSingleFileReq& operator=(const PutSingleFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutSingleFileReq(PutSingleFileReq&& from) noexcept
    : PutSingleFileReq() {
    *this = ::std::move(from);
  }

  inline PutSingleFileReq& operator=(PutSingleFileReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutSingleFileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutSingleFileReq* internal_default_instance() {
    return reinterpret_cast<const PutSingleFileReq*>(
               &_PutSingleFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PutSingleFileReq* other);
  friend void swap(PutSingleFileReq& a, PutSingleFileReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutSingleFileReq* New() const final {
    return CreateMaybeMessage<PutSingleFileReq>(NULL);
  }

  PutSingleFileReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutSingleFileReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutSingleFileReq& from);
  void MergeFrom(const PutSingleFileReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutSingleFileReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // .chen_im.FileUploadData file_data = 4;
  bool has_file_data() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 4;
  private:
  const ::chen_im::FileUploadData& _internal_file_data() const;
  public:
  const ::chen_im::FileUploadData& file_data() const;
  ::chen_im::FileUploadData* release_file_data();
  ::chen_im::FileUploadData* mutable_file_data();
  void set_allocated_file_data(::chen_im::FileUploadData* file_data);

  // @@protoc_insertion_point(class_scope:chen_im.PutSingleFileReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::chen_im::FileUploadData* file_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutSingleFileRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PutSingleFileRsp) */ {
 public:
  PutSingleFileRsp();
  virtual ~PutSingleFileRsp();

  PutSingleFileRsp(const PutSingleFileRsp& from);

  inline PutSingleFileRsp& operator=(const PutSingleFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutSingleFileRsp(PutSingleFileRsp&& from) noexcept
    : PutSingleFileRsp() {
    *this = ::std::move(from);
  }

  inline PutSingleFileRsp& operator=(PutSingleFileRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutSingleFileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutSingleFileRsp* internal_default_instance() {
    return reinterpret_cast<const PutSingleFileRsp*>(
               &_PutSingleFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PutSingleFileRsp* other);
  friend void swap(PutSingleFileRsp& a, PutSingleFileRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutSingleFileRsp* New() const final {
    return CreateMaybeMessage<PutSingleFileRsp>(NULL);
  }

  PutSingleFileRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutSingleFileRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutSingleFileRsp& from);
  void MergeFrom(const PutSingleFileRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutSingleFileRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .chen_im.FileMessageInfo file_info = 4;
  bool has_file_info() const;
  void clear_file_info();
  static const int kFileInfoFieldNumber = 4;
  private:
  const ::chen_im::FileMessageInfo& _internal_file_info() const;
  public:
  const ::chen_im::FileMessageInfo& file_info() const;
  ::chen_im::FileMessageInfo* release_file_info();
  ::chen_im::FileMessageInfo* mutable_file_info();
  void set_allocated_file_info(::chen_im::FileMessageInfo* file_info);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.PutSingleFileRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::chen_im::FileMessageInfo* file_info_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutMultiFileReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PutMultiFileReq) */ {
 public:
  PutMultiFileReq();
  virtual ~PutMultiFileReq();

  PutMultiFileReq(const PutMultiFileReq& from);

  inline PutMultiFileReq& operator=(const PutMultiFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutMultiFileReq(PutMultiFileReq&& from) noexcept
    : PutMultiFileReq() {
    *this = ::std::move(from);
  }

  inline PutMultiFileReq& operator=(PutMultiFileReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutMultiFileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutMultiFileReq* internal_default_instance() {
    return reinterpret_cast<const PutMultiFileReq*>(
               &_PutMultiFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PutMultiFileReq* other);
  friend void swap(PutMultiFileReq& a, PutMultiFileReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutMultiFileReq* New() const final {
    return CreateMaybeMessage<PutMultiFileReq>(NULL);
  }

  PutMultiFileReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutMultiFileReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutMultiFileReq& from);
  void MergeFrom(const PutMultiFileReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMultiFileReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chen_im.FileUploadData file_data = 4;
  int file_data_size() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 4;
  ::chen_im::FileUploadData* mutable_file_data(int index);
  ::google::protobuf::RepeatedPtrField< ::chen_im::FileUploadData >*
      mutable_file_data();
  const ::chen_im::FileUploadData& file_data(int index) const;
  ::chen_im::FileUploadData* add_file_data();
  const ::google::protobuf::RepeatedPtrField< ::chen_im::FileUploadData >&
      file_data() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:chen_im.PutMultiFileReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chen_im::FileUploadData > file_data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutMultiFileRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.PutMultiFileRsp) */ {
 public:
  PutMultiFileRsp();
  virtual ~PutMultiFileRsp();

  PutMultiFileRsp(const PutMultiFileRsp& from);

  inline PutMultiFileRsp& operator=(const PutMultiFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutMultiFileRsp(PutMultiFileRsp&& from) noexcept
    : PutMultiFileRsp() {
    *this = ::std::move(from);
  }

  inline PutMultiFileRsp& operator=(PutMultiFileRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutMultiFileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutMultiFileRsp* internal_default_instance() {
    return reinterpret_cast<const PutMultiFileRsp*>(
               &_PutMultiFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PutMultiFileRsp* other);
  friend void swap(PutMultiFileRsp& a, PutMultiFileRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutMultiFileRsp* New() const final {
    return CreateMaybeMessage<PutMultiFileRsp>(NULL);
  }

  PutMultiFileRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutMultiFileRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutMultiFileRsp& from);
  void MergeFrom(const PutMultiFileRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMultiFileRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chen_im.FileMessageInfo file_info = 4;
  int file_info_size() const;
  void clear_file_info();
  static const int kFileInfoFieldNumber = 4;
  ::chen_im::FileMessageInfo* mutable_file_info(int index);
  ::google::protobuf::RepeatedPtrField< ::chen_im::FileMessageInfo >*
      mutable_file_info();
  const ::chen_im::FileMessageInfo& file_info(int index) const;
  ::chen_im::FileMessageInfo* add_file_info();
  const ::google::protobuf::RepeatedPtrField< ::chen_im::FileMessageInfo >&
      file_info() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.PutMultiFileRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chen_im::FileMessageInfo > file_info_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// ===================================================================

class FileService_Stub;

class FileService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FileService() {};
 public:
  virtual ~FileService();

  typedef FileService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetSingleFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetSingleFileReq* request,
                       ::chen_im::GetSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMultiFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetMultiFileReq* request,
                       ::chen_im::GetMultiFileRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PutSingleFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::PutSingleFileReq* request,
                       ::chen_im::PutSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PutMultiFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::PutMultiFileReq* request,
                       ::chen_im::PutMultiFileRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService);
};

class FileService_Stub : public FileService {
 public:
  FileService_Stub(::google::protobuf::RpcChannel* channel);
  FileService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FileService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements FileService ------------------------------------------

  void GetSingleFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetSingleFileReq* request,
                       ::chen_im::GetSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  void GetMultiFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetMultiFileReq* request,
                       ::chen_im::GetMultiFileRsp* response,
                       ::google::protobuf::Closure* done);
  void PutSingleFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::PutSingleFileReq* request,
                       ::chen_im::PutSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  void PutMultiFile(::google::protobuf::RpcController* controller,
                       const ::chen_im::PutMultiFileReq* request,
                       ::chen_im::PutMultiFileRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSingleFileReq

// string request_id = 1;
inline void GetSingleFileReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSingleFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileReq.request_id)
  return request_id_.GetNoArena();
}
inline void GetSingleFileReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetSingleFileReq.request_id)
}
#if LANG_CXX11
inline void GetSingleFileReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetSingleFileReq.request_id)
}
#endif
inline void GetSingleFileReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetSingleFileReq.request_id)
}
inline void GetSingleFileReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetSingleFileReq.request_id)
}
inline ::std::string* GetSingleFileReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetSingleFileReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSingleFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetSingleFileReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSingleFileReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetSingleFileReq.request_id)
}

// string file_id = 2;
inline void GetSingleFileReq::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSingleFileReq::file_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileReq.file_id)
  return file_id_.GetNoArena();
}
inline void GetSingleFileReq::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetSingleFileReq.file_id)
}
#if LANG_CXX11
inline void GetSingleFileReq::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetSingleFileReq.file_id)
}
#endif
inline void GetSingleFileReq::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetSingleFileReq.file_id)
}
inline void GetSingleFileReq::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetSingleFileReq.file_id)
}
inline ::std::string* GetSingleFileReq::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetSingleFileReq.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSingleFileReq::release_file_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetSingleFileReq.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSingleFileReq::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetSingleFileReq.file_id)
}

// string user_id = 3;
inline void GetSingleFileReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSingleFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileReq.user_id)
  return user_id_.GetNoArena();
}
inline void GetSingleFileReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetSingleFileReq.user_id)
}
#if LANG_CXX11
inline void GetSingleFileReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetSingleFileReq.user_id)
}
#endif
inline void GetSingleFileReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetSingleFileReq.user_id)
}
inline void GetSingleFileReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetSingleFileReq.user_id)
}
inline ::std::string* GetSingleFileReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetSingleFileReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSingleFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetSingleFileReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSingleFileReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetSingleFileReq.user_id)
}

// string session_id = 4;
inline void GetSingleFileReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSingleFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileReq.session_id)
  return session_id_.GetNoArena();
}
inline void GetSingleFileReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetSingleFileReq.session_id)
}
#if LANG_CXX11
inline void GetSingleFileReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetSingleFileReq.session_id)
}
#endif
inline void GetSingleFileReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetSingleFileReq.session_id)
}
inline void GetSingleFileReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetSingleFileReq.session_id)
}
inline ::std::string* GetSingleFileReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetSingleFileReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSingleFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetSingleFileReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSingleFileReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetSingleFileReq.session_id)
}

// -------------------------------------------------------------------

// GetSingleFileRsp

// string request_id = 1;
inline void GetSingleFileRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSingleFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetSingleFileRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetSingleFileRsp.request_id)
}
#if LANG_CXX11
inline void GetSingleFileRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetSingleFileRsp.request_id)
}
#endif
inline void GetSingleFileRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetSingleFileRsp.request_id)
}
inline void GetSingleFileRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetSingleFileRsp.request_id)
}
inline ::std::string* GetSingleFileRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetSingleFileRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSingleFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetSingleFileRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSingleFileRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetSingleFileRsp.request_id)
}

// bool success = 2;
inline void GetSingleFileRsp::clear_success() {
  success_ = false;
}
inline bool GetSingleFileRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileRsp.success)
  return success_;
}
inline void GetSingleFileRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetSingleFileRsp.success)
}

// string errmsg = 3;
inline void GetSingleFileRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSingleFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetSingleFileRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetSingleFileRsp.errmsg)
}
#if LANG_CXX11
inline void GetSingleFileRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetSingleFileRsp.errmsg)
}
#endif
inline void GetSingleFileRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetSingleFileRsp.errmsg)
}
inline void GetSingleFileRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetSingleFileRsp.errmsg)
}
inline ::std::string* GetSingleFileRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetSingleFileRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSingleFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetSingleFileRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSingleFileRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetSingleFileRsp.errmsg)
}

// .chen_im.FileDownloadData file_data = 4;
inline bool GetSingleFileRsp::has_file_data() const {
  return this != internal_default_instance() && file_data_ != NULL;
}
inline const ::chen_im::FileDownloadData& GetSingleFileRsp::_internal_file_data() const {
  return *file_data_;
}
inline const ::chen_im::FileDownloadData& GetSingleFileRsp::file_data() const {
  const ::chen_im::FileDownloadData* p = file_data_;
  // @@protoc_insertion_point(field_get:chen_im.GetSingleFileRsp.file_data)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::FileDownloadData*>(
      &::chen_im::_FileDownloadData_default_instance_);
}
inline ::chen_im::FileDownloadData* GetSingleFileRsp::release_file_data() {
  // @@protoc_insertion_point(field_release:chen_im.GetSingleFileRsp.file_data)
  
  ::chen_im::FileDownloadData* temp = file_data_;
  file_data_ = NULL;
  return temp;
}
inline ::chen_im::FileDownloadData* GetSingleFileRsp::mutable_file_data() {
  
  if (file_data_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::FileDownloadData>(GetArenaNoVirtual());
    file_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.GetSingleFileRsp.file_data)
  return file_data_;
}
inline void GetSingleFileRsp::set_allocated_file_data(::chen_im::FileDownloadData* file_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_data_);
  }
  if (file_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_data, submessage_arena);
    }
    
  } else {
    
  }
  file_data_ = file_data;
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetSingleFileRsp.file_data)
}

// -------------------------------------------------------------------

// GetMultiFileReq

// string request_id = 1;
inline void GetMultiFileReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMultiFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetMultiFileReq.request_id)
  return request_id_.GetNoArena();
}
inline void GetMultiFileReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileReq.request_id)
}
#if LANG_CXX11
inline void GetMultiFileReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetMultiFileReq.request_id)
}
#endif
inline void GetMultiFileReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetMultiFileReq.request_id)
}
inline void GetMultiFileReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetMultiFileReq.request_id)
}
inline ::std::string* GetMultiFileReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetMultiFileReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMultiFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetMultiFileReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiFileReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetMultiFileReq.request_id)
}

// string user_id = 2;
inline void GetMultiFileReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMultiFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetMultiFileReq.user_id)
  return user_id_.GetNoArena();
}
inline void GetMultiFileReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileReq.user_id)
}
#if LANG_CXX11
inline void GetMultiFileReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetMultiFileReq.user_id)
}
#endif
inline void GetMultiFileReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetMultiFileReq.user_id)
}
inline void GetMultiFileReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetMultiFileReq.user_id)
}
inline ::std::string* GetMultiFileReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetMultiFileReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMultiFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetMultiFileReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiFileReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetMultiFileReq.user_id)
}

// string session_id = 3;
inline void GetMultiFileReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMultiFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetMultiFileReq.session_id)
  return session_id_.GetNoArena();
}
inline void GetMultiFileReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileReq.session_id)
}
#if LANG_CXX11
inline void GetMultiFileReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetMultiFileReq.session_id)
}
#endif
inline void GetMultiFileReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetMultiFileReq.session_id)
}
inline void GetMultiFileReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetMultiFileReq.session_id)
}
inline ::std::string* GetMultiFileReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetMultiFileReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMultiFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetMultiFileReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiFileReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetMultiFileReq.session_id)
}

// repeated string file_id_list = 4;
inline int GetMultiFileReq::file_id_list_size() const {
  return file_id_list_.size();
}
inline void GetMultiFileReq::clear_file_id_list() {
  file_id_list_.Clear();
}
inline const ::std::string& GetMultiFileReq::file_id_list(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.GetMultiFileReq.file_id_list)
  return file_id_list_.Get(index);
}
inline ::std::string* GetMultiFileReq::mutable_file_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.GetMultiFileReq.file_id_list)
  return file_id_list_.Mutable(index);
}
inline void GetMultiFileReq::set_file_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileReq.file_id_list)
  file_id_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetMultiFileReq::set_file_id_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileReq.file_id_list)
  file_id_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetMultiFileReq::set_file_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chen_im.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::set_file_id_list(int index, const char* value, size_t size) {
  file_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetMultiFileReq.file_id_list)
}
inline ::std::string* GetMultiFileReq::add_file_id_list() {
  // @@protoc_insertion_point(field_add_mutable:chen_im.GetMultiFileReq.file_id_list)
  return file_id_list_.Add();
}
inline void GetMultiFileReq::add_file_id_list(const ::std::string& value) {
  file_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chen_im.GetMultiFileReq.file_id_list)
}
#if LANG_CXX11
inline void GetMultiFileReq::add_file_id_list(::std::string&& value) {
  file_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chen_im.GetMultiFileReq.file_id_list)
}
#endif
inline void GetMultiFileReq::add_file_id_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chen_im.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::add_file_id_list(const char* value, size_t size) {
  file_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chen_im.GetMultiFileReq.file_id_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetMultiFileReq::file_id_list() const {
  // @@protoc_insertion_point(field_list:chen_im.GetMultiFileReq.file_id_list)
  return file_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetMultiFileReq::mutable_file_id_list() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.GetMultiFileReq.file_id_list)
  return &file_id_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetMultiFileRsp

// string request_id = 1;
inline void GetMultiFileRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMultiFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetMultiFileRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetMultiFileRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileRsp.request_id)
}
#if LANG_CXX11
inline void GetMultiFileRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetMultiFileRsp.request_id)
}
#endif
inline void GetMultiFileRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetMultiFileRsp.request_id)
}
inline void GetMultiFileRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetMultiFileRsp.request_id)
}
inline ::std::string* GetMultiFileRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetMultiFileRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMultiFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetMultiFileRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiFileRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetMultiFileRsp.request_id)
}

// bool success = 2;
inline void GetMultiFileRsp::clear_success() {
  success_ = false;
}
inline bool GetMultiFileRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetMultiFileRsp.success)
  return success_;
}
inline void GetMultiFileRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileRsp.success)
}

// string errmsg = 3;
inline void GetMultiFileRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMultiFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetMultiFileRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetMultiFileRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetMultiFileRsp.errmsg)
}
#if LANG_CXX11
inline void GetMultiFileRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetMultiFileRsp.errmsg)
}
#endif
inline void GetMultiFileRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetMultiFileRsp.errmsg)
}
inline void GetMultiFileRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetMultiFileRsp.errmsg)
}
inline ::std::string* GetMultiFileRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetMultiFileRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMultiFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetMultiFileRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiFileRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetMultiFileRsp.errmsg)
}

// map<string, .chen_im.FileDownloadData> file_data = 4;
inline int GetMultiFileRsp::file_data_size() const {
  return file_data_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >&
GetMultiFileRsp::file_data() const {
  // @@protoc_insertion_point(field_map:chen_im.GetMultiFileRsp.file_data)
  return file_data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >*
GetMultiFileRsp::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable_map:chen_im.GetMultiFileRsp.file_data)
  return file_data_.MutableMap();
}

// -------------------------------------------------------------------

// PutSingleFileReq

// string request_id = 1;
inline void PutSingleFileReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutSingleFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileReq.request_id)
  return request_id_.GetNoArena();
}
inline void PutSingleFileReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutSingleFileReq.request_id)
}
#if LANG_CXX11
inline void PutSingleFileReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutSingleFileReq.request_id)
}
#endif
inline void PutSingleFileReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutSingleFileReq.request_id)
}
inline void PutSingleFileReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutSingleFileReq.request_id)
}
inline ::std::string* PutSingleFileReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutSingleFileReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutSingleFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutSingleFileReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutSingleFileReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutSingleFileReq.request_id)
}

// string user_id = 2;
inline void PutSingleFileReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutSingleFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileReq.user_id)
  return user_id_.GetNoArena();
}
inline void PutSingleFileReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutSingleFileReq.user_id)
}
#if LANG_CXX11
inline void PutSingleFileReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutSingleFileReq.user_id)
}
#endif
inline void PutSingleFileReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutSingleFileReq.user_id)
}
inline void PutSingleFileReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutSingleFileReq.user_id)
}
inline ::std::string* PutSingleFileReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutSingleFileReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutSingleFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutSingleFileReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutSingleFileReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutSingleFileReq.user_id)
}

// string session_id = 3;
inline void PutSingleFileReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutSingleFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileReq.session_id)
  return session_id_.GetNoArena();
}
inline void PutSingleFileReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutSingleFileReq.session_id)
}
#if LANG_CXX11
inline void PutSingleFileReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutSingleFileReq.session_id)
}
#endif
inline void PutSingleFileReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutSingleFileReq.session_id)
}
inline void PutSingleFileReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutSingleFileReq.session_id)
}
inline ::std::string* PutSingleFileReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutSingleFileReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutSingleFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutSingleFileReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutSingleFileReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutSingleFileReq.session_id)
}

// .chen_im.FileUploadData file_data = 4;
inline bool PutSingleFileReq::has_file_data() const {
  return this != internal_default_instance() && file_data_ != NULL;
}
inline const ::chen_im::FileUploadData& PutSingleFileReq::_internal_file_data() const {
  return *file_data_;
}
inline const ::chen_im::FileUploadData& PutSingleFileReq::file_data() const {
  const ::chen_im::FileUploadData* p = file_data_;
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileReq.file_data)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::FileUploadData*>(
      &::chen_im::_FileUploadData_default_instance_);
}
inline ::chen_im::FileUploadData* PutSingleFileReq::release_file_data() {
  // @@protoc_insertion_point(field_release:chen_im.PutSingleFileReq.file_data)
  
  ::chen_im::FileUploadData* temp = file_data_;
  file_data_ = NULL;
  return temp;
}
inline ::chen_im::FileUploadData* PutSingleFileReq::mutable_file_data() {
  
  if (file_data_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::FileUploadData>(GetArenaNoVirtual());
    file_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.PutSingleFileReq.file_data)
  return file_data_;
}
inline void PutSingleFileReq::set_allocated_file_data(::chen_im::FileUploadData* file_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_data_);
  }
  if (file_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_data, submessage_arena);
    }
    
  } else {
    
  }
  file_data_ = file_data;
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutSingleFileReq.file_data)
}

// -------------------------------------------------------------------

// PutSingleFileRsp

// string request_id = 1;
inline void PutSingleFileRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutSingleFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileRsp.request_id)
  return request_id_.GetNoArena();
}
inline void PutSingleFileRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutSingleFileRsp.request_id)
}
#if LANG_CXX11
inline void PutSingleFileRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutSingleFileRsp.request_id)
}
#endif
inline void PutSingleFileRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutSingleFileRsp.request_id)
}
inline void PutSingleFileRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutSingleFileRsp.request_id)
}
inline ::std::string* PutSingleFileRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutSingleFileRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutSingleFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutSingleFileRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutSingleFileRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutSingleFileRsp.request_id)
}

// bool success = 2;
inline void PutSingleFileRsp::clear_success() {
  success_ = false;
}
inline bool PutSingleFileRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileRsp.success)
  return success_;
}
inline void PutSingleFileRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.PutSingleFileRsp.success)
}

// string errmsg = 3;
inline void PutSingleFileRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutSingleFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void PutSingleFileRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutSingleFileRsp.errmsg)
}
#if LANG_CXX11
inline void PutSingleFileRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutSingleFileRsp.errmsg)
}
#endif
inline void PutSingleFileRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutSingleFileRsp.errmsg)
}
inline void PutSingleFileRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutSingleFileRsp.errmsg)
}
inline ::std::string* PutSingleFileRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutSingleFileRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutSingleFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.PutSingleFileRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutSingleFileRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutSingleFileRsp.errmsg)
}

// .chen_im.FileMessageInfo file_info = 4;
inline bool PutSingleFileRsp::has_file_info() const {
  return this != internal_default_instance() && file_info_ != NULL;
}
inline const ::chen_im::FileMessageInfo& PutSingleFileRsp::_internal_file_info() const {
  return *file_info_;
}
inline const ::chen_im::FileMessageInfo& PutSingleFileRsp::file_info() const {
  const ::chen_im::FileMessageInfo* p = file_info_;
  // @@protoc_insertion_point(field_get:chen_im.PutSingleFileRsp.file_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::FileMessageInfo*>(
      &::chen_im::_FileMessageInfo_default_instance_);
}
inline ::chen_im::FileMessageInfo* PutSingleFileRsp::release_file_info() {
  // @@protoc_insertion_point(field_release:chen_im.PutSingleFileRsp.file_info)
  
  ::chen_im::FileMessageInfo* temp = file_info_;
  file_info_ = NULL;
  return temp;
}
inline ::chen_im::FileMessageInfo* PutSingleFileRsp::mutable_file_info() {
  
  if (file_info_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::FileMessageInfo>(GetArenaNoVirtual());
    file_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.PutSingleFileRsp.file_info)
  return file_info_;
}
inline void PutSingleFileRsp::set_allocated_file_info(::chen_im::FileMessageInfo* file_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_info_);
  }
  if (file_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_info, submessage_arena);
    }
    
  } else {
    
  }
  file_info_ = file_info;
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutSingleFileRsp.file_info)
}

// -------------------------------------------------------------------

// PutMultiFileReq

// string request_id = 1;
inline void PutMultiFileReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMultiFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileReq.request_id)
  return request_id_.GetNoArena();
}
inline void PutMultiFileReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutMultiFileReq.request_id)
}
#if LANG_CXX11
inline void PutMultiFileReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutMultiFileReq.request_id)
}
#endif
inline void PutMultiFileReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutMultiFileReq.request_id)
}
inline void PutMultiFileReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutMultiFileReq.request_id)
}
inline ::std::string* PutMultiFileReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutMultiFileReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMultiFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutMultiFileReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMultiFileReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutMultiFileReq.request_id)
}

// string user_id = 2;
inline void PutMultiFileReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMultiFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileReq.user_id)
  return user_id_.GetNoArena();
}
inline void PutMultiFileReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutMultiFileReq.user_id)
}
#if LANG_CXX11
inline void PutMultiFileReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutMultiFileReq.user_id)
}
#endif
inline void PutMultiFileReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutMultiFileReq.user_id)
}
inline void PutMultiFileReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutMultiFileReq.user_id)
}
inline ::std::string* PutMultiFileReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutMultiFileReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMultiFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutMultiFileReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMultiFileReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutMultiFileReq.user_id)
}

// string session_id = 3;
inline void PutMultiFileReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMultiFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileReq.session_id)
  return session_id_.GetNoArena();
}
inline void PutMultiFileReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutMultiFileReq.session_id)
}
#if LANG_CXX11
inline void PutMultiFileReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutMultiFileReq.session_id)
}
#endif
inline void PutMultiFileReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutMultiFileReq.session_id)
}
inline void PutMultiFileReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutMultiFileReq.session_id)
}
inline ::std::string* PutMultiFileReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutMultiFileReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMultiFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutMultiFileReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMultiFileReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutMultiFileReq.session_id)
}

// repeated .chen_im.FileUploadData file_data = 4;
inline int PutMultiFileReq::file_data_size() const {
  return file_data_.size();
}
inline ::chen_im::FileUploadData* PutMultiFileReq::mutable_file_data(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.PutMultiFileReq.file_data)
  return file_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chen_im::FileUploadData >*
PutMultiFileReq::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.PutMultiFileReq.file_data)
  return &file_data_;
}
inline const ::chen_im::FileUploadData& PutMultiFileReq::file_data(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileReq.file_data)
  return file_data_.Get(index);
}
inline ::chen_im::FileUploadData* PutMultiFileReq::add_file_data() {
  // @@protoc_insertion_point(field_add:chen_im.PutMultiFileReq.file_data)
  return file_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chen_im::FileUploadData >&
PutMultiFileReq::file_data() const {
  // @@protoc_insertion_point(field_list:chen_im.PutMultiFileReq.file_data)
  return file_data_;
}

// -------------------------------------------------------------------

// PutMultiFileRsp

// string request_id = 1;
inline void PutMultiFileRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMultiFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileRsp.request_id)
  return request_id_.GetNoArena();
}
inline void PutMultiFileRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutMultiFileRsp.request_id)
}
#if LANG_CXX11
inline void PutMultiFileRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutMultiFileRsp.request_id)
}
#endif
inline void PutMultiFileRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutMultiFileRsp.request_id)
}
inline void PutMultiFileRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutMultiFileRsp.request_id)
}
inline ::std::string* PutMultiFileRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutMultiFileRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMultiFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.PutMultiFileRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMultiFileRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutMultiFileRsp.request_id)
}

// bool success = 2;
inline void PutMultiFileRsp::clear_success() {
  success_ = false;
}
inline bool PutMultiFileRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileRsp.success)
  return success_;
}
inline void PutMultiFileRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.PutMultiFileRsp.success)
}

// string errmsg = 3;
inline void PutMultiFileRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMultiFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void PutMultiFileRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.PutMultiFileRsp.errmsg)
}
#if LANG_CXX11
inline void PutMultiFileRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.PutMultiFileRsp.errmsg)
}
#endif
inline void PutMultiFileRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.PutMultiFileRsp.errmsg)
}
inline void PutMultiFileRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.PutMultiFileRsp.errmsg)
}
inline ::std::string* PutMultiFileRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.PutMultiFileRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMultiFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.PutMultiFileRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMultiFileRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.PutMultiFileRsp.errmsg)
}

// repeated .chen_im.FileMessageInfo file_info = 4;
inline int PutMultiFileRsp::file_info_size() const {
  return file_info_.size();
}
inline ::chen_im::FileMessageInfo* PutMultiFileRsp::mutable_file_info(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.PutMultiFileRsp.file_info)
  return file_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chen_im::FileMessageInfo >*
PutMultiFileRsp::mutable_file_info() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.PutMultiFileRsp.file_info)
  return &file_info_;
}
inline const ::chen_im::FileMessageInfo& PutMultiFileRsp::file_info(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.PutMultiFileRsp.file_info)
  return file_info_.Get(index);
}
inline ::chen_im::FileMessageInfo* PutMultiFileRsp::add_file_info() {
  // @@protoc_insertion_point(field_add:chen_im.PutMultiFileRsp.file_info)
  return file_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chen_im::FileMessageInfo >&
PutMultiFileRsp::file_info() const {
  // @@protoc_insertion_point(field_list:chen_im.PutMultiFileRsp.file_info)
  return file_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chen_im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_file_2eproto
