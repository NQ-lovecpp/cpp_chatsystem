// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify.proto

#ifndef PROTOBUF_INCLUDED_notify_2eproto
#define PROTOBUF_INCLUDED_notify_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_notify_2eproto 

namespace protobuf_notify_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_notify_2eproto
namespace chen_im {
class NotifyFriendAddApply;
class NotifyFriendAddApplyDefaultTypeInternal;
extern NotifyFriendAddApplyDefaultTypeInternal _NotifyFriendAddApply_default_instance_;
class NotifyFriendAddProcess;
class NotifyFriendAddProcessDefaultTypeInternal;
extern NotifyFriendAddProcessDefaultTypeInternal _NotifyFriendAddProcess_default_instance_;
class NotifyFriendRemove;
class NotifyFriendRemoveDefaultTypeInternal;
extern NotifyFriendRemoveDefaultTypeInternal _NotifyFriendRemove_default_instance_;
class NotifyMessage;
class NotifyMessageDefaultTypeInternal;
extern NotifyMessageDefaultTypeInternal _NotifyMessage_default_instance_;
class NotifyNewChatSession;
class NotifyNewChatSessionDefaultTypeInternal;
extern NotifyNewChatSessionDefaultTypeInternal _NotifyNewChatSession_default_instance_;
class NotifyNewMessage;
class NotifyNewMessageDefaultTypeInternal;
extern NotifyNewMessageDefaultTypeInternal _NotifyNewMessage_default_instance_;
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> ::chen_im::NotifyFriendAddApply* Arena::CreateMaybeMessage<::chen_im::NotifyFriendAddApply>(Arena*);
template<> ::chen_im::NotifyFriendAddProcess* Arena::CreateMaybeMessage<::chen_im::NotifyFriendAddProcess>(Arena*);
template<> ::chen_im::NotifyFriendRemove* Arena::CreateMaybeMessage<::chen_im::NotifyFriendRemove>(Arena*);
template<> ::chen_im::NotifyMessage* Arena::CreateMaybeMessage<::chen_im::NotifyMessage>(Arena*);
template<> ::chen_im::NotifyNewChatSession* Arena::CreateMaybeMessage<::chen_im::NotifyNewChatSession>(Arena*);
template<> ::chen_im::NotifyNewMessage* Arena::CreateMaybeMessage<::chen_im::NotifyNewMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chen_im {

enum NotifyType {
  FRIEND_ADD_APPLY_NOTIFY = 0,
  FRIEND_ADD_PROCESS_NOTIFY = 1,
  CHAT_SESSION_CREATE_NOTIFY = 2,
  CHAT_MESSAGE_NOTIFY = 3,
  FRIEND_REMOVE_NOTIFY = 4,
  NotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NotifyType_IsValid(int value);
const NotifyType NotifyType_MIN = FRIEND_ADD_APPLY_NOTIFY;
const NotifyType NotifyType_MAX = FRIEND_REMOVE_NOTIFY;
const int NotifyType_ARRAYSIZE = NotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyType_descriptor();
inline const ::std::string& NotifyType_Name(NotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyType_descriptor(), value);
}
inline bool NotifyType_Parse(
    const ::std::string& name, NotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyType>(
    NotifyType_descriptor(), name, value);
}
// ===================================================================

class NotifyFriendAddApply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NotifyFriendAddApply) */ {
 public:
  NotifyFriendAddApply();
  virtual ~NotifyFriendAddApply();

  NotifyFriendAddApply(const NotifyFriendAddApply& from);

  inline NotifyFriendAddApply& operator=(const NotifyFriendAddApply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyFriendAddApply(NotifyFriendAddApply&& from) noexcept
    : NotifyFriendAddApply() {
    *this = ::std::move(from);
  }

  inline NotifyFriendAddApply& operator=(NotifyFriendAddApply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFriendAddApply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyFriendAddApply* internal_default_instance() {
    return reinterpret_cast<const NotifyFriendAddApply*>(
               &_NotifyFriendAddApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NotifyFriendAddApply* other);
  friend void swap(NotifyFriendAddApply& a, NotifyFriendAddApply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyFriendAddApply* New() const final {
    return CreateMaybeMessage<NotifyFriendAddApply>(NULL);
  }

  NotifyFriendAddApply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyFriendAddApply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyFriendAddApply& from);
  void MergeFrom(const NotifyFriendAddApply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFriendAddApply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chen_im.UserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  private:
  const ::chen_im::UserInfo& _internal_user_info() const;
  public:
  const ::chen_im::UserInfo& user_info() const;
  ::chen_im::UserInfo* release_user_info();
  ::chen_im::UserInfo* mutable_user_info();
  void set_allocated_user_info(::chen_im::UserInfo* user_info);

  // @@protoc_insertion_point(class_scope:chen_im.NotifyFriendAddApply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::chen_im::UserInfo* user_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_notify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyFriendAddProcess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NotifyFriendAddProcess) */ {
 public:
  NotifyFriendAddProcess();
  virtual ~NotifyFriendAddProcess();

  NotifyFriendAddProcess(const NotifyFriendAddProcess& from);

  inline NotifyFriendAddProcess& operator=(const NotifyFriendAddProcess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyFriendAddProcess(NotifyFriendAddProcess&& from) noexcept
    : NotifyFriendAddProcess() {
    *this = ::std::move(from);
  }

  inline NotifyFriendAddProcess& operator=(NotifyFriendAddProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFriendAddProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyFriendAddProcess* internal_default_instance() {
    return reinterpret_cast<const NotifyFriendAddProcess*>(
               &_NotifyFriendAddProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NotifyFriendAddProcess* other);
  friend void swap(NotifyFriendAddProcess& a, NotifyFriendAddProcess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyFriendAddProcess* New() const final {
    return CreateMaybeMessage<NotifyFriendAddProcess>(NULL);
  }

  NotifyFriendAddProcess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyFriendAddProcess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyFriendAddProcess& from);
  void MergeFrom(const NotifyFriendAddProcess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFriendAddProcess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chen_im.UserInfo user_info = 2;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 2;
  private:
  const ::chen_im::UserInfo& _internal_user_info() const;
  public:
  const ::chen_im::UserInfo& user_info() const;
  ::chen_im::UserInfo* release_user_info();
  ::chen_im::UserInfo* mutable_user_info();
  void set_allocated_user_info(::chen_im::UserInfo* user_info);

  // bool agree = 1;
  void clear_agree();
  static const int kAgreeFieldNumber = 1;
  bool agree() const;
  void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.NotifyFriendAddProcess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::chen_im::UserInfo* user_info_;
  bool agree_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_notify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyFriendRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NotifyFriendRemove) */ {
 public:
  NotifyFriendRemove();
  virtual ~NotifyFriendRemove();

  NotifyFriendRemove(const NotifyFriendRemove& from);

  inline NotifyFriendRemove& operator=(const NotifyFriendRemove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyFriendRemove(NotifyFriendRemove&& from) noexcept
    : NotifyFriendRemove() {
    *this = ::std::move(from);
  }

  inline NotifyFriendRemove& operator=(NotifyFriendRemove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFriendRemove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyFriendRemove* internal_default_instance() {
    return reinterpret_cast<const NotifyFriendRemove*>(
               &_NotifyFriendRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NotifyFriendRemove* other);
  friend void swap(NotifyFriendRemove& a, NotifyFriendRemove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyFriendRemove* New() const final {
    return CreateMaybeMessage<NotifyFriendRemove>(NULL);
  }

  NotifyFriendRemove* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyFriendRemove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyFriendRemove& from);
  void MergeFrom(const NotifyFriendRemove& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFriendRemove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:chen_im.NotifyFriendRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_notify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyNewChatSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NotifyNewChatSession) */ {
 public:
  NotifyNewChatSession();
  virtual ~NotifyNewChatSession();

  NotifyNewChatSession(const NotifyNewChatSession& from);

  inline NotifyNewChatSession& operator=(const NotifyNewChatSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyNewChatSession(NotifyNewChatSession&& from) noexcept
    : NotifyNewChatSession() {
    *this = ::std::move(from);
  }

  inline NotifyNewChatSession& operator=(NotifyNewChatSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyNewChatSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyNewChatSession* internal_default_instance() {
    return reinterpret_cast<const NotifyNewChatSession*>(
               &_NotifyNewChatSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NotifyNewChatSession* other);
  friend void swap(NotifyNewChatSession& a, NotifyNewChatSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyNewChatSession* New() const final {
    return CreateMaybeMessage<NotifyNewChatSession>(NULL);
  }

  NotifyNewChatSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyNewChatSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyNewChatSession& from);
  void MergeFrom(const NotifyNewChatSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyNewChatSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chen_im.ChatSessionInfo chat_session_info = 1;
  bool has_chat_session_info() const;
  void clear_chat_session_info();
  static const int kChatSessionInfoFieldNumber = 1;
  private:
  const ::chen_im::ChatSessionInfo& _internal_chat_session_info() const;
  public:
  const ::chen_im::ChatSessionInfo& chat_session_info() const;
  ::chen_im::ChatSessionInfo* release_chat_session_info();
  ::chen_im::ChatSessionInfo* mutable_chat_session_info();
  void set_allocated_chat_session_info(::chen_im::ChatSessionInfo* chat_session_info);

  // @@protoc_insertion_point(class_scope:chen_im.NotifyNewChatSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::chen_im::ChatSessionInfo* chat_session_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_notify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyNewMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NotifyNewMessage) */ {
 public:
  NotifyNewMessage();
  virtual ~NotifyNewMessage();

  NotifyNewMessage(const NotifyNewMessage& from);

  inline NotifyNewMessage& operator=(const NotifyNewMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyNewMessage(NotifyNewMessage&& from) noexcept
    : NotifyNewMessage() {
    *this = ::std::move(from);
  }

  inline NotifyNewMessage& operator=(NotifyNewMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyNewMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyNewMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyNewMessage*>(
               &_NotifyNewMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NotifyNewMessage* other);
  friend void swap(NotifyNewMessage& a, NotifyNewMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyNewMessage* New() const final {
    return CreateMaybeMessage<NotifyNewMessage>(NULL);
  }

  NotifyNewMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyNewMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyNewMessage& from);
  void MergeFrom(const NotifyNewMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyNewMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chen_im.MessageInfo message_info = 1;
  bool has_message_info() const;
  void clear_message_info();
  static const int kMessageInfoFieldNumber = 1;
  private:
  const ::chen_im::MessageInfo& _internal_message_info() const;
  public:
  const ::chen_im::MessageInfo& message_info() const;
  ::chen_im::MessageInfo* release_message_info();
  ::chen_im::MessageInfo* mutable_message_info();
  void set_allocated_message_info(::chen_im::MessageInfo* message_info);

  // @@protoc_insertion_point(class_scope:chen_im.NotifyNewMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::chen_im::MessageInfo* message_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_notify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NotifyMessage) */ {
 public:
  NotifyMessage();
  virtual ~NotifyMessage();

  NotifyMessage(const NotifyMessage& from);

  inline NotifyMessage& operator=(const NotifyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyMessage(NotifyMessage&& from) noexcept
    : NotifyMessage() {
    *this = ::std::move(from);
  }

  inline NotifyMessage& operator=(NotifyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyMessage& default_instance();

  enum NotifyRemarksCase {
    kFriendAddApply = 3,
    kFriendProcessResult = 4,
    kFriendRemove = 7,
    kNewChatSessionInfo = 5,
    kNewMessageInfo = 6,
    NOTIFY_REMARKS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyMessage*>(
               &_NotifyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NotifyMessage* other);
  friend void swap(NotifyMessage& a, NotifyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyMessage* New() const final {
    return CreateMaybeMessage<NotifyMessage>(NULL);
  }

  NotifyMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyMessage& from);
  void MergeFrom(const NotifyMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string notify_event_id = 1;
  void clear_notify_event_id();
  static const int kNotifyEventIdFieldNumber = 1;
  const ::std::string& notify_event_id() const;
  void set_notify_event_id(const ::std::string& value);
  #if LANG_CXX11
  void set_notify_event_id(::std::string&& value);
  #endif
  void set_notify_event_id(const char* value);
  void set_notify_event_id(const char* value, size_t size);
  ::std::string* mutable_notify_event_id();
  ::std::string* release_notify_event_id();
  void set_allocated_notify_event_id(::std::string* notify_event_id);

  // .chen_im.NotifyType notify_type = 2;
  void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  ::chen_im::NotifyType notify_type() const;
  void set_notify_type(::chen_im::NotifyType value);

  // .chen_im.NotifyFriendAddApply friend_add_apply = 3;
  bool has_friend_add_apply() const;
  void clear_friend_add_apply();
  static const int kFriendAddApplyFieldNumber = 3;
  private:
  const ::chen_im::NotifyFriendAddApply& _internal_friend_add_apply() const;
  public:
  const ::chen_im::NotifyFriendAddApply& friend_add_apply() const;
  ::chen_im::NotifyFriendAddApply* release_friend_add_apply();
  ::chen_im::NotifyFriendAddApply* mutable_friend_add_apply();
  void set_allocated_friend_add_apply(::chen_im::NotifyFriendAddApply* friend_add_apply);

  // .chen_im.NotifyFriendAddProcess friend_process_result = 4;
  bool has_friend_process_result() const;
  void clear_friend_process_result();
  static const int kFriendProcessResultFieldNumber = 4;
  private:
  const ::chen_im::NotifyFriendAddProcess& _internal_friend_process_result() const;
  public:
  const ::chen_im::NotifyFriendAddProcess& friend_process_result() const;
  ::chen_im::NotifyFriendAddProcess* release_friend_process_result();
  ::chen_im::NotifyFriendAddProcess* mutable_friend_process_result();
  void set_allocated_friend_process_result(::chen_im::NotifyFriendAddProcess* friend_process_result);

  // .chen_im.NotifyFriendRemove friend_remove = 7;
  bool has_friend_remove() const;
  void clear_friend_remove();
  static const int kFriendRemoveFieldNumber = 7;
  private:
  const ::chen_im::NotifyFriendRemove& _internal_friend_remove() const;
  public:
  const ::chen_im::NotifyFriendRemove& friend_remove() const;
  ::chen_im::NotifyFriendRemove* release_friend_remove();
  ::chen_im::NotifyFriendRemove* mutable_friend_remove();
  void set_allocated_friend_remove(::chen_im::NotifyFriendRemove* friend_remove);

  // .chen_im.NotifyNewChatSession new_chat_session_info = 5;
  bool has_new_chat_session_info() const;
  void clear_new_chat_session_info();
  static const int kNewChatSessionInfoFieldNumber = 5;
  private:
  const ::chen_im::NotifyNewChatSession& _internal_new_chat_session_info() const;
  public:
  const ::chen_im::NotifyNewChatSession& new_chat_session_info() const;
  ::chen_im::NotifyNewChatSession* release_new_chat_session_info();
  ::chen_im::NotifyNewChatSession* mutable_new_chat_session_info();
  void set_allocated_new_chat_session_info(::chen_im::NotifyNewChatSession* new_chat_session_info);

  // .chen_im.NotifyNewMessage new_message_info = 6;
  bool has_new_message_info() const;
  void clear_new_message_info();
  static const int kNewMessageInfoFieldNumber = 6;
  private:
  const ::chen_im::NotifyNewMessage& _internal_new_message_info() const;
  public:
  const ::chen_im::NotifyNewMessage& new_message_info() const;
  ::chen_im::NotifyNewMessage* release_new_message_info();
  ::chen_im::NotifyNewMessage* mutable_new_message_info();
  void set_allocated_new_message_info(::chen_im::NotifyNewMessage* new_message_info);

  void clear_notify_remarks();
  NotifyRemarksCase notify_remarks_case() const;
  // @@protoc_insertion_point(class_scope:chen_im.NotifyMessage)
 private:
  void set_has_friend_add_apply();
  void set_has_friend_process_result();
  void set_has_friend_remove();
  void set_has_new_chat_session_info();
  void set_has_new_message_info();

  inline bool has_notify_remarks() const;
  inline void clear_has_notify_remarks();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr notify_event_id_;
  int notify_type_;
  union NotifyRemarksUnion {
    NotifyRemarksUnion() {}
    ::chen_im::NotifyFriendAddApply* friend_add_apply_;
    ::chen_im::NotifyFriendAddProcess* friend_process_result_;
    ::chen_im::NotifyFriendRemove* friend_remove_;
    ::chen_im::NotifyNewChatSession* new_chat_session_info_;
    ::chen_im::NotifyNewMessage* new_message_info_;
  } notify_remarks_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_notify_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotifyFriendAddApply

// .chen_im.UserInfo user_info = 1;
inline bool NotifyFriendAddApply::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
inline const ::chen_im::UserInfo& NotifyFriendAddApply::_internal_user_info() const {
  return *user_info_;
}
inline const ::chen_im::UserInfo& NotifyFriendAddApply::user_info() const {
  const ::chen_im::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:chen_im.NotifyFriendAddApply.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::UserInfo*>(
      &::chen_im::_UserInfo_default_instance_);
}
inline ::chen_im::UserInfo* NotifyFriendAddApply::release_user_info() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyFriendAddApply.user_info)
  
  ::chen_im::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::chen_im::UserInfo* NotifyFriendAddApply::mutable_user_info() {
  
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::UserInfo>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyFriendAddApply.user_info)
  return user_info_;
}
inline void NotifyFriendAddApply::set_allocated_user_info(::chen_im::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyFriendAddApply.user_info)
}

// -------------------------------------------------------------------

// NotifyFriendAddProcess

// bool agree = 1;
inline void NotifyFriendAddProcess::clear_agree() {
  agree_ = false;
}
inline bool NotifyFriendAddProcess::agree() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyFriendAddProcess.agree)
  return agree_;
}
inline void NotifyFriendAddProcess::set_agree(bool value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:chen_im.NotifyFriendAddProcess.agree)
}

// .chen_im.UserInfo user_info = 2;
inline bool NotifyFriendAddProcess::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
inline const ::chen_im::UserInfo& NotifyFriendAddProcess::_internal_user_info() const {
  return *user_info_;
}
inline const ::chen_im::UserInfo& NotifyFriendAddProcess::user_info() const {
  const ::chen_im::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:chen_im.NotifyFriendAddProcess.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::UserInfo*>(
      &::chen_im::_UserInfo_default_instance_);
}
inline ::chen_im::UserInfo* NotifyFriendAddProcess::release_user_info() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyFriendAddProcess.user_info)
  
  ::chen_im::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::chen_im::UserInfo* NotifyFriendAddProcess::mutable_user_info() {
  
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::UserInfo>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyFriendAddProcess.user_info)
  return user_info_;
}
inline void NotifyFriendAddProcess::set_allocated_user_info(::chen_im::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyFriendAddProcess.user_info)
}

// -------------------------------------------------------------------

// NotifyFriendRemove

// string user_id = 1;
inline void NotifyFriendRemove::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyFriendRemove::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyFriendRemove.user_id)
  return user_id_.GetNoArena();
}
inline void NotifyFriendRemove::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NotifyFriendRemove.user_id)
}
#if LANG_CXX11
inline void NotifyFriendRemove::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NotifyFriendRemove.user_id)
}
#endif
inline void NotifyFriendRemove::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NotifyFriendRemove.user_id)
}
inline void NotifyFriendRemove::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NotifyFriendRemove.user_id)
}
inline ::std::string* NotifyFriendRemove::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyFriendRemove.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyFriendRemove::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyFriendRemove.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyFriendRemove::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyFriendRemove.user_id)
}

// -------------------------------------------------------------------

// NotifyNewChatSession

// .chen_im.ChatSessionInfo chat_session_info = 1;
inline bool NotifyNewChatSession::has_chat_session_info() const {
  return this != internal_default_instance() && chat_session_info_ != NULL;
}
inline const ::chen_im::ChatSessionInfo& NotifyNewChatSession::_internal_chat_session_info() const {
  return *chat_session_info_;
}
inline const ::chen_im::ChatSessionInfo& NotifyNewChatSession::chat_session_info() const {
  const ::chen_im::ChatSessionInfo* p = chat_session_info_;
  // @@protoc_insertion_point(field_get:chen_im.NotifyNewChatSession.chat_session_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::ChatSessionInfo*>(
      &::chen_im::_ChatSessionInfo_default_instance_);
}
inline ::chen_im::ChatSessionInfo* NotifyNewChatSession::release_chat_session_info() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyNewChatSession.chat_session_info)
  
  ::chen_im::ChatSessionInfo* temp = chat_session_info_;
  chat_session_info_ = NULL;
  return temp;
}
inline ::chen_im::ChatSessionInfo* NotifyNewChatSession::mutable_chat_session_info() {
  
  if (chat_session_info_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::ChatSessionInfo>(GetArenaNoVirtual());
    chat_session_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyNewChatSession.chat_session_info)
  return chat_session_info_;
}
inline void NotifyNewChatSession::set_allocated_chat_session_info(::chen_im::ChatSessionInfo* chat_session_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chat_session_info_);
  }
  if (chat_session_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chat_session_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chat_session_info, submessage_arena);
    }
    
  } else {
    
  }
  chat_session_info_ = chat_session_info;
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyNewChatSession.chat_session_info)
}

// -------------------------------------------------------------------

// NotifyNewMessage

// .chen_im.MessageInfo message_info = 1;
inline bool NotifyNewMessage::has_message_info() const {
  return this != internal_default_instance() && message_info_ != NULL;
}
inline const ::chen_im::MessageInfo& NotifyNewMessage::_internal_message_info() const {
  return *message_info_;
}
inline const ::chen_im::MessageInfo& NotifyNewMessage::message_info() const {
  const ::chen_im::MessageInfo* p = message_info_;
  // @@protoc_insertion_point(field_get:chen_im.NotifyNewMessage.message_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::MessageInfo*>(
      &::chen_im::_MessageInfo_default_instance_);
}
inline ::chen_im::MessageInfo* NotifyNewMessage::release_message_info() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyNewMessage.message_info)
  
  ::chen_im::MessageInfo* temp = message_info_;
  message_info_ = NULL;
  return temp;
}
inline ::chen_im::MessageInfo* NotifyNewMessage::mutable_message_info() {
  
  if (message_info_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::MessageInfo>(GetArenaNoVirtual());
    message_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyNewMessage.message_info)
  return message_info_;
}
inline void NotifyNewMessage::set_allocated_message_info(::chen_im::MessageInfo* message_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_info_);
  }
  if (message_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_info, submessage_arena);
    }
    
  } else {
    
  }
  message_info_ = message_info;
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyNewMessage.message_info)
}

// -------------------------------------------------------------------

// NotifyMessage

// string notify_event_id = 1;
inline void NotifyMessage::clear_notify_event_id() {
  notify_event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyMessage::notify_event_id() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyMessage.notify_event_id)
  return notify_event_id_.GetNoArena();
}
inline void NotifyMessage::set_notify_event_id(const ::std::string& value) {
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NotifyMessage.notify_event_id)
}
#if LANG_CXX11
inline void NotifyMessage::set_notify_event_id(::std::string&& value) {
  
  notify_event_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NotifyMessage.notify_event_id)
}
#endif
inline void NotifyMessage::set_notify_event_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NotifyMessage.notify_event_id)
}
inline void NotifyMessage::set_notify_event_id(const char* value, size_t size) {
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NotifyMessage.notify_event_id)
}
inline ::std::string* NotifyMessage::mutable_notify_event_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyMessage.notify_event_id)
  return notify_event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyMessage::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyMessage.notify_event_id)
  
  return notify_event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyMessage::set_allocated_notify_event_id(::std::string* notify_event_id) {
  if (notify_event_id != NULL) {
    
  } else {
    
  }
  notify_event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notify_event_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NotifyMessage.notify_event_id)
}

// .chen_im.NotifyType notify_type = 2;
inline void NotifyMessage::clear_notify_type() {
  notify_type_ = 0;
}
inline ::chen_im::NotifyType NotifyMessage::notify_type() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyMessage.notify_type)
  return static_cast< ::chen_im::NotifyType >(notify_type_);
}
inline void NotifyMessage::set_notify_type(::chen_im::NotifyType value) {
  
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:chen_im.NotifyMessage.notify_type)
}

// .chen_im.NotifyFriendAddApply friend_add_apply = 3;
inline bool NotifyMessage::has_friend_add_apply() const {
  return notify_remarks_case() == kFriendAddApply;
}
inline void NotifyMessage::set_has_friend_add_apply() {
  _oneof_case_[0] = kFriendAddApply;
}
inline void NotifyMessage::clear_friend_add_apply() {
  if (has_friend_add_apply()) {
    delete notify_remarks_.friend_add_apply_;
    clear_has_notify_remarks();
  }
}
inline const ::chen_im::NotifyFriendAddApply& NotifyMessage::_internal_friend_add_apply() const {
  return *notify_remarks_.friend_add_apply_;
}
inline ::chen_im::NotifyFriendAddApply* NotifyMessage::release_friend_add_apply() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyMessage.friend_add_apply)
  if (has_friend_add_apply()) {
    clear_has_notify_remarks();
      ::chen_im::NotifyFriendAddApply* temp = notify_remarks_.friend_add_apply_;
    notify_remarks_.friend_add_apply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::NotifyFriendAddApply& NotifyMessage::friend_add_apply() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyMessage.friend_add_apply)
  return has_friend_add_apply()
      ? *notify_remarks_.friend_add_apply_
      : *reinterpret_cast< ::chen_im::NotifyFriendAddApply*>(&::chen_im::_NotifyFriendAddApply_default_instance_);
}
inline ::chen_im::NotifyFriendAddApply* NotifyMessage::mutable_friend_add_apply() {
  if (!has_friend_add_apply()) {
    clear_notify_remarks();
    set_has_friend_add_apply();
    notify_remarks_.friend_add_apply_ = CreateMaybeMessage< ::chen_im::NotifyFriendAddApply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyMessage.friend_add_apply)
  return notify_remarks_.friend_add_apply_;
}

// .chen_im.NotifyFriendAddProcess friend_process_result = 4;
inline bool NotifyMessage::has_friend_process_result() const {
  return notify_remarks_case() == kFriendProcessResult;
}
inline void NotifyMessage::set_has_friend_process_result() {
  _oneof_case_[0] = kFriendProcessResult;
}
inline void NotifyMessage::clear_friend_process_result() {
  if (has_friend_process_result()) {
    delete notify_remarks_.friend_process_result_;
    clear_has_notify_remarks();
  }
}
inline const ::chen_im::NotifyFriendAddProcess& NotifyMessage::_internal_friend_process_result() const {
  return *notify_remarks_.friend_process_result_;
}
inline ::chen_im::NotifyFriendAddProcess* NotifyMessage::release_friend_process_result() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyMessage.friend_process_result)
  if (has_friend_process_result()) {
    clear_has_notify_remarks();
      ::chen_im::NotifyFriendAddProcess* temp = notify_remarks_.friend_process_result_;
    notify_remarks_.friend_process_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::NotifyFriendAddProcess& NotifyMessage::friend_process_result() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyMessage.friend_process_result)
  return has_friend_process_result()
      ? *notify_remarks_.friend_process_result_
      : *reinterpret_cast< ::chen_im::NotifyFriendAddProcess*>(&::chen_im::_NotifyFriendAddProcess_default_instance_);
}
inline ::chen_im::NotifyFriendAddProcess* NotifyMessage::mutable_friend_process_result() {
  if (!has_friend_process_result()) {
    clear_notify_remarks();
    set_has_friend_process_result();
    notify_remarks_.friend_process_result_ = CreateMaybeMessage< ::chen_im::NotifyFriendAddProcess >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyMessage.friend_process_result)
  return notify_remarks_.friend_process_result_;
}

// .chen_im.NotifyFriendRemove friend_remove = 7;
inline bool NotifyMessage::has_friend_remove() const {
  return notify_remarks_case() == kFriendRemove;
}
inline void NotifyMessage::set_has_friend_remove() {
  _oneof_case_[0] = kFriendRemove;
}
inline void NotifyMessage::clear_friend_remove() {
  if (has_friend_remove()) {
    delete notify_remarks_.friend_remove_;
    clear_has_notify_remarks();
  }
}
inline const ::chen_im::NotifyFriendRemove& NotifyMessage::_internal_friend_remove() const {
  return *notify_remarks_.friend_remove_;
}
inline ::chen_im::NotifyFriendRemove* NotifyMessage::release_friend_remove() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyMessage.friend_remove)
  if (has_friend_remove()) {
    clear_has_notify_remarks();
      ::chen_im::NotifyFriendRemove* temp = notify_remarks_.friend_remove_;
    notify_remarks_.friend_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::NotifyFriendRemove& NotifyMessage::friend_remove() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyMessage.friend_remove)
  return has_friend_remove()
      ? *notify_remarks_.friend_remove_
      : *reinterpret_cast< ::chen_im::NotifyFriendRemove*>(&::chen_im::_NotifyFriendRemove_default_instance_);
}
inline ::chen_im::NotifyFriendRemove* NotifyMessage::mutable_friend_remove() {
  if (!has_friend_remove()) {
    clear_notify_remarks();
    set_has_friend_remove();
    notify_remarks_.friend_remove_ = CreateMaybeMessage< ::chen_im::NotifyFriendRemove >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyMessage.friend_remove)
  return notify_remarks_.friend_remove_;
}

// .chen_im.NotifyNewChatSession new_chat_session_info = 5;
inline bool NotifyMessage::has_new_chat_session_info() const {
  return notify_remarks_case() == kNewChatSessionInfo;
}
inline void NotifyMessage::set_has_new_chat_session_info() {
  _oneof_case_[0] = kNewChatSessionInfo;
}
inline void NotifyMessage::clear_new_chat_session_info() {
  if (has_new_chat_session_info()) {
    delete notify_remarks_.new_chat_session_info_;
    clear_has_notify_remarks();
  }
}
inline const ::chen_im::NotifyNewChatSession& NotifyMessage::_internal_new_chat_session_info() const {
  return *notify_remarks_.new_chat_session_info_;
}
inline ::chen_im::NotifyNewChatSession* NotifyMessage::release_new_chat_session_info() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyMessage.new_chat_session_info)
  if (has_new_chat_session_info()) {
    clear_has_notify_remarks();
      ::chen_im::NotifyNewChatSession* temp = notify_remarks_.new_chat_session_info_;
    notify_remarks_.new_chat_session_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::NotifyNewChatSession& NotifyMessage::new_chat_session_info() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyMessage.new_chat_session_info)
  return has_new_chat_session_info()
      ? *notify_remarks_.new_chat_session_info_
      : *reinterpret_cast< ::chen_im::NotifyNewChatSession*>(&::chen_im::_NotifyNewChatSession_default_instance_);
}
inline ::chen_im::NotifyNewChatSession* NotifyMessage::mutable_new_chat_session_info() {
  if (!has_new_chat_session_info()) {
    clear_notify_remarks();
    set_has_new_chat_session_info();
    notify_remarks_.new_chat_session_info_ = CreateMaybeMessage< ::chen_im::NotifyNewChatSession >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyMessage.new_chat_session_info)
  return notify_remarks_.new_chat_session_info_;
}

// .chen_im.NotifyNewMessage new_message_info = 6;
inline bool NotifyMessage::has_new_message_info() const {
  return notify_remarks_case() == kNewMessageInfo;
}
inline void NotifyMessage::set_has_new_message_info() {
  _oneof_case_[0] = kNewMessageInfo;
}
inline void NotifyMessage::clear_new_message_info() {
  if (has_new_message_info()) {
    delete notify_remarks_.new_message_info_;
    clear_has_notify_remarks();
  }
}
inline const ::chen_im::NotifyNewMessage& NotifyMessage::_internal_new_message_info() const {
  return *notify_remarks_.new_message_info_;
}
inline ::chen_im::NotifyNewMessage* NotifyMessage::release_new_message_info() {
  // @@protoc_insertion_point(field_release:chen_im.NotifyMessage.new_message_info)
  if (has_new_message_info()) {
    clear_has_notify_remarks();
      ::chen_im::NotifyNewMessage* temp = notify_remarks_.new_message_info_;
    notify_remarks_.new_message_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::NotifyNewMessage& NotifyMessage::new_message_info() const {
  // @@protoc_insertion_point(field_get:chen_im.NotifyMessage.new_message_info)
  return has_new_message_info()
      ? *notify_remarks_.new_message_info_
      : *reinterpret_cast< ::chen_im::NotifyNewMessage*>(&::chen_im::_NotifyNewMessage_default_instance_);
}
inline ::chen_im::NotifyNewMessage* NotifyMessage::mutable_new_message_info() {
  if (!has_new_message_info()) {
    clear_notify_remarks();
    set_has_new_message_info();
    notify_remarks_.new_message_info_ = CreateMaybeMessage< ::chen_im::NotifyNewMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NotifyMessage.new_message_info)
  return notify_remarks_.new_message_info_;
}

inline bool NotifyMessage::has_notify_remarks() const {
  return notify_remarks_case() != NOTIFY_REMARKS_NOT_SET;
}
inline void NotifyMessage::clear_has_notify_remarks() {
  _oneof_case_[0] = NOTIFY_REMARKS_NOT_SET;
}
inline NotifyMessage::NotifyRemarksCase NotifyMessage::notify_remarks_case() const {
  return NotifyMessage::NotifyRemarksCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chen_im

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chen_im::NotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chen_im::NotifyType>() {
  return ::chen_im::NotifyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_notify_2eproto
