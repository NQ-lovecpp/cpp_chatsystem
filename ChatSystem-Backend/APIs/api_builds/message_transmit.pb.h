// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_transmit.proto

#ifndef PROTOBUF_INCLUDED_message_5ftransmit_2eproto
#define PROTOBUF_INCLUDED_message_5ftransmit_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_5ftransmit_2eproto 

namespace protobuf_message_5ftransmit_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_5ftransmit_2eproto
namespace chen_im {
class GetTransmitTargetRsp;
class GetTransmitTargetRspDefaultTypeInternal;
extern GetTransmitTargetRspDefaultTypeInternal _GetTransmitTargetRsp_default_instance_;
class NewMessageReq;
class NewMessageReqDefaultTypeInternal;
extern NewMessageReqDefaultTypeInternal _NewMessageReq_default_instance_;
class NewMessageRsp;
class NewMessageRspDefaultTypeInternal;
extern NewMessageRspDefaultTypeInternal _NewMessageRsp_default_instance_;
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> ::chen_im::GetTransmitTargetRsp* Arena::CreateMaybeMessage<::chen_im::GetTransmitTargetRsp>(Arena*);
template<> ::chen_im::NewMessageReq* Arena::CreateMaybeMessage<::chen_im::NewMessageReq>(Arena*);
template<> ::chen_im::NewMessageRsp* Arena::CreateMaybeMessage<::chen_im::NewMessageRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chen_im {

// ===================================================================

class NewMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NewMessageReq) */ {
 public:
  NewMessageReq();
  virtual ~NewMessageReq();

  NewMessageReq(const NewMessageReq& from);

  inline NewMessageReq& operator=(const NewMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewMessageReq(NewMessageReq&& from) noexcept
    : NewMessageReq() {
    *this = ::std::move(from);
  }

  inline NewMessageReq& operator=(NewMessageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewMessageReq* internal_default_instance() {
    return reinterpret_cast<const NewMessageReq*>(
               &_NewMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewMessageReq* other);
  friend void swap(NewMessageReq& a, NewMessageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewMessageReq* New() const final {
    return CreateMaybeMessage<NewMessageReq>(NULL);
  }

  NewMessageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewMessageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewMessageReq& from);
  void MergeFrom(const NewMessageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string chat_session_id = 4;
  void clear_chat_session_id();
  static const int kChatSessionIdFieldNumber = 4;
  const ::std::string& chat_session_id() const;
  void set_chat_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_session_id(::std::string&& value);
  #endif
  void set_chat_session_id(const char* value);
  void set_chat_session_id(const char* value, size_t size);
  ::std::string* mutable_chat_session_id();
  ::std::string* release_chat_session_id();
  void set_allocated_chat_session_id(::std::string* chat_session_id);

  // .chen_im.MessageContent message = 5;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  private:
  const ::chen_im::MessageContent& _internal_message() const;
  public:
  const ::chen_im::MessageContent& message() const;
  ::chen_im::MessageContent* release_message();
  ::chen_im::MessageContent* mutable_message();
  void set_allocated_message(::chen_im::MessageContent* message);

  // @@protoc_insertion_point(class_scope:chen_im.NewMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_session_id_;
  ::chen_im::MessageContent* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_5ftransmit_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewMessageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.NewMessageRsp) */ {
 public:
  NewMessageRsp();
  virtual ~NewMessageRsp();

  NewMessageRsp(const NewMessageRsp& from);

  inline NewMessageRsp& operator=(const NewMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewMessageRsp(NewMessageRsp&& from) noexcept
    : NewMessageRsp() {
    *this = ::std::move(from);
  }

  inline NewMessageRsp& operator=(NewMessageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMessageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewMessageRsp* internal_default_instance() {
    return reinterpret_cast<const NewMessageRsp*>(
               &_NewMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NewMessageRsp* other);
  friend void swap(NewMessageRsp& a, NewMessageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewMessageRsp* New() const final {
    return CreateMaybeMessage<NewMessageRsp>(NULL);
  }

  NewMessageRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewMessageRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewMessageRsp& from);
  void MergeFrom(const NewMessageRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMessageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.NewMessageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_5ftransmit_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTransmitTargetRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetTransmitTargetRsp) */ {
 public:
  GetTransmitTargetRsp();
  virtual ~GetTransmitTargetRsp();

  GetTransmitTargetRsp(const GetTransmitTargetRsp& from);

  inline GetTransmitTargetRsp& operator=(const GetTransmitTargetRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTransmitTargetRsp(GetTransmitTargetRsp&& from) noexcept
    : GetTransmitTargetRsp() {
    *this = ::std::move(from);
  }

  inline GetTransmitTargetRsp& operator=(GetTransmitTargetRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransmitTargetRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransmitTargetRsp* internal_default_instance() {
    return reinterpret_cast<const GetTransmitTargetRsp*>(
               &_GetTransmitTargetRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetTransmitTargetRsp* other);
  friend void swap(GetTransmitTargetRsp& a, GetTransmitTargetRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTransmitTargetRsp* New() const final {
    return CreateMaybeMessage<GetTransmitTargetRsp>(NULL);
  }

  GetTransmitTargetRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTransmitTargetRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTransmitTargetRsp& from);
  void MergeFrom(const GetTransmitTargetRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransmitTargetRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string target_id_list = 5;
  int target_id_list_size() const;
  void clear_target_id_list();
  static const int kTargetIdListFieldNumber = 5;
  const ::std::string& target_id_list(int index) const;
  ::std::string* mutable_target_id_list(int index);
  void set_target_id_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_target_id_list(int index, ::std::string&& value);
  #endif
  void set_target_id_list(int index, const char* value);
  void set_target_id_list(int index, const char* value, size_t size);
  ::std::string* add_target_id_list();
  void add_target_id_list(const ::std::string& value);
  #if LANG_CXX11
  void add_target_id_list(::std::string&& value);
  #endif
  void add_target_id_list(const char* value);
  void add_target_id_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& target_id_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_target_id_list();

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .chen_im.MessageInfo message = 4;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  private:
  const ::chen_im::MessageInfo& _internal_message() const;
  public:
  const ::chen_im::MessageInfo& message() const;
  ::chen_im::MessageInfo* release_message();
  ::chen_im::MessageInfo* mutable_message();
  void set_allocated_message(::chen_im::MessageInfo* message);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetTransmitTargetRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> target_id_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::chen_im::MessageInfo* message_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_5ftransmit_2eproto::TableStruct;
};
// ===================================================================

class MsgTransmitService_Stub;

class MsgTransmitService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MsgTransmitService() {};
 public:
  virtual ~MsgTransmitService();

  typedef MsgTransmitService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetTransmitTarget(::google::protobuf::RpcController* controller,
                       const ::chen_im::NewMessageReq* request,
                       ::chen_im::GetTransmitTargetRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgTransmitService);
};

class MsgTransmitService_Stub : public MsgTransmitService {
 public:
  MsgTransmitService_Stub(::google::protobuf::RpcChannel* channel);
  MsgTransmitService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MsgTransmitService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MsgTransmitService ------------------------------------------

  void GetTransmitTarget(::google::protobuf::RpcController* controller,
                       const ::chen_im::NewMessageReq* request,
                       ::chen_im::GetTransmitTargetRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgTransmitService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewMessageReq

// string request_id = 1;
inline void NewMessageReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewMessageReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.NewMessageReq.request_id)
  return request_id_.GetNoArena();
}
inline void NewMessageReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NewMessageReq.request_id)
}
#if LANG_CXX11
inline void NewMessageReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NewMessageReq.request_id)
}
#endif
inline void NewMessageReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NewMessageReq.request_id)
}
inline void NewMessageReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NewMessageReq.request_id)
}
inline ::std::string* NewMessageReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NewMessageReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMessageReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.NewMessageReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMessageReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NewMessageReq.request_id)
}

// string user_id = 2;
inline void NewMessageReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewMessageReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.NewMessageReq.user_id)
  return user_id_.GetNoArena();
}
inline void NewMessageReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NewMessageReq.user_id)
}
#if LANG_CXX11
inline void NewMessageReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NewMessageReq.user_id)
}
#endif
inline void NewMessageReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NewMessageReq.user_id)
}
inline void NewMessageReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NewMessageReq.user_id)
}
inline ::std::string* NewMessageReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NewMessageReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMessageReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.NewMessageReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMessageReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NewMessageReq.user_id)
}

// string session_id = 3;
inline void NewMessageReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewMessageReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.NewMessageReq.session_id)
  return session_id_.GetNoArena();
}
inline void NewMessageReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NewMessageReq.session_id)
}
#if LANG_CXX11
inline void NewMessageReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NewMessageReq.session_id)
}
#endif
inline void NewMessageReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NewMessageReq.session_id)
}
inline void NewMessageReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NewMessageReq.session_id)
}
inline ::std::string* NewMessageReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NewMessageReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMessageReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.NewMessageReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMessageReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NewMessageReq.session_id)
}

// string chat_session_id = 4;
inline void NewMessageReq::clear_chat_session_id() {
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewMessageReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.NewMessageReq.chat_session_id)
  return chat_session_id_.GetNoArena();
}
inline void NewMessageReq::set_chat_session_id(const ::std::string& value) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NewMessageReq.chat_session_id)
}
#if LANG_CXX11
inline void NewMessageReq::set_chat_session_id(::std::string&& value) {
  
  chat_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NewMessageReq.chat_session_id)
}
#endif
inline void NewMessageReq::set_chat_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NewMessageReq.chat_session_id)
}
inline void NewMessageReq::set_chat_session_id(const char* value, size_t size) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NewMessageReq.chat_session_id)
}
inline ::std::string* NewMessageReq::mutable_chat_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NewMessageReq.chat_session_id)
  return chat_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMessageReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.NewMessageReq.chat_session_id)
  
  return chat_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMessageReq::set_allocated_chat_session_id(::std::string* chat_session_id) {
  if (chat_session_id != NULL) {
    
  } else {
    
  }
  chat_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NewMessageReq.chat_session_id)
}

// .chen_im.MessageContent message = 5;
inline bool NewMessageReq::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::chen_im::MessageContent& NewMessageReq::_internal_message() const {
  return *message_;
}
inline const ::chen_im::MessageContent& NewMessageReq::message() const {
  const ::chen_im::MessageContent* p = message_;
  // @@protoc_insertion_point(field_get:chen_im.NewMessageReq.message)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::MessageContent*>(
      &::chen_im::_MessageContent_default_instance_);
}
inline ::chen_im::MessageContent* NewMessageReq::release_message() {
  // @@protoc_insertion_point(field_release:chen_im.NewMessageReq.message)
  
  ::chen_im::MessageContent* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::chen_im::MessageContent* NewMessageReq::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::MessageContent>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.NewMessageReq.message)
  return message_;
}
inline void NewMessageReq::set_allocated_message(::chen_im::MessageContent* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chen_im.NewMessageReq.message)
}

// -------------------------------------------------------------------

// NewMessageRsp

// string request_id = 1;
inline void NewMessageRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewMessageRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.NewMessageRsp.request_id)
  return request_id_.GetNoArena();
}
inline void NewMessageRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NewMessageRsp.request_id)
}
#if LANG_CXX11
inline void NewMessageRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NewMessageRsp.request_id)
}
#endif
inline void NewMessageRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NewMessageRsp.request_id)
}
inline void NewMessageRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NewMessageRsp.request_id)
}
inline ::std::string* NewMessageRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NewMessageRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMessageRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.NewMessageRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMessageRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NewMessageRsp.request_id)
}

// bool success = 2;
inline void NewMessageRsp::clear_success() {
  success_ = false;
}
inline bool NewMessageRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.NewMessageRsp.success)
  return success_;
}
inline void NewMessageRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.NewMessageRsp.success)
}

// string errmsg = 3;
inline void NewMessageRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewMessageRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.NewMessageRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void NewMessageRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.NewMessageRsp.errmsg)
}
#if LANG_CXX11
inline void NewMessageRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.NewMessageRsp.errmsg)
}
#endif
inline void NewMessageRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.NewMessageRsp.errmsg)
}
inline void NewMessageRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.NewMessageRsp.errmsg)
}
inline ::std::string* NewMessageRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.NewMessageRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMessageRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.NewMessageRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMessageRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.NewMessageRsp.errmsg)
}

// -------------------------------------------------------------------

// GetTransmitTargetRsp

// string request_id = 1;
inline void GetTransmitTargetRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTransmitTargetRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetTransmitTargetRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetTransmitTargetRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetTransmitTargetRsp.request_id)
}
#if LANG_CXX11
inline void GetTransmitTargetRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetTransmitTargetRsp.request_id)
}
#endif
inline void GetTransmitTargetRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetTransmitTargetRsp.request_id)
}
inline void GetTransmitTargetRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetTransmitTargetRsp.request_id)
}
inline ::std::string* GetTransmitTargetRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetTransmitTargetRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTransmitTargetRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetTransmitTargetRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransmitTargetRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetTransmitTargetRsp.request_id)
}

// bool success = 2;
inline void GetTransmitTargetRsp::clear_success() {
  success_ = false;
}
inline bool GetTransmitTargetRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetTransmitTargetRsp.success)
  return success_;
}
inline void GetTransmitTargetRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetTransmitTargetRsp.success)
}

// string errmsg = 3;
inline void GetTransmitTargetRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTransmitTargetRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetTransmitTargetRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetTransmitTargetRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetTransmitTargetRsp.errmsg)
}
#if LANG_CXX11
inline void GetTransmitTargetRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetTransmitTargetRsp.errmsg)
}
#endif
inline void GetTransmitTargetRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetTransmitTargetRsp.errmsg)
}
inline void GetTransmitTargetRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetTransmitTargetRsp.errmsg)
}
inline ::std::string* GetTransmitTargetRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetTransmitTargetRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTransmitTargetRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetTransmitTargetRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransmitTargetRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetTransmitTargetRsp.errmsg)
}

// .chen_im.MessageInfo message = 4;
inline bool GetTransmitTargetRsp::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::chen_im::MessageInfo& GetTransmitTargetRsp::_internal_message() const {
  return *message_;
}
inline const ::chen_im::MessageInfo& GetTransmitTargetRsp::message() const {
  const ::chen_im::MessageInfo* p = message_;
  // @@protoc_insertion_point(field_get:chen_im.GetTransmitTargetRsp.message)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::MessageInfo*>(
      &::chen_im::_MessageInfo_default_instance_);
}
inline ::chen_im::MessageInfo* GetTransmitTargetRsp::release_message() {
  // @@protoc_insertion_point(field_release:chen_im.GetTransmitTargetRsp.message)
  
  ::chen_im::MessageInfo* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::chen_im::MessageInfo* GetTransmitTargetRsp::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::MessageInfo>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.GetTransmitTargetRsp.message)
  return message_;
}
inline void GetTransmitTargetRsp::set_allocated_message(::chen_im::MessageInfo* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetTransmitTargetRsp.message)
}

// repeated string target_id_list = 5;
inline int GetTransmitTargetRsp::target_id_list_size() const {
  return target_id_list_.size();
}
inline void GetTransmitTargetRsp::clear_target_id_list() {
  target_id_list_.Clear();
}
inline const ::std::string& GetTransmitTargetRsp::target_id_list(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.GetTransmitTargetRsp.target_id_list)
  return target_id_list_.Get(index);
}
inline ::std::string* GetTransmitTargetRsp::mutable_target_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.GetTransmitTargetRsp.target_id_list)
  return target_id_list_.Mutable(index);
}
inline void GetTransmitTargetRsp::set_target_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chen_im.GetTransmitTargetRsp.target_id_list)
  target_id_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetTransmitTargetRsp::set_target_id_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chen_im.GetTransmitTargetRsp.target_id_list)
  target_id_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetTransmitTargetRsp::set_target_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  target_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chen_im.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::set_target_id_list(int index, const char* value, size_t size) {
  target_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetTransmitTargetRsp.target_id_list)
}
inline ::std::string* GetTransmitTargetRsp::add_target_id_list() {
  // @@protoc_insertion_point(field_add_mutable:chen_im.GetTransmitTargetRsp.target_id_list)
  return target_id_list_.Add();
}
inline void GetTransmitTargetRsp::add_target_id_list(const ::std::string& value) {
  target_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chen_im.GetTransmitTargetRsp.target_id_list)
}
#if LANG_CXX11
inline void GetTransmitTargetRsp::add_target_id_list(::std::string&& value) {
  target_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chen_im.GetTransmitTargetRsp.target_id_list)
}
#endif
inline void GetTransmitTargetRsp::add_target_id_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  target_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chen_im.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::add_target_id_list(const char* value, size_t size) {
  target_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chen_im.GetTransmitTargetRsp.target_id_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTransmitTargetRsp::target_id_list() const {
  // @@protoc_insertion_point(field_list:chen_im.GetTransmitTargetRsp.target_id_list)
  return target_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTransmitTargetRsp::mutable_target_id_list() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.GetTransmitTargetRsp.target_id_list)
  return &target_id_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chen_im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_5ftransmit_2eproto
