// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_INCLUDED_friend_2eproto
#define PROTOBUF_INCLUDED_friend_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_friend_2eproto 

namespace protobuf_friend_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_friend_2eproto
namespace chen_im {
class ChatSessionCreateReq;
class ChatSessionCreateReqDefaultTypeInternal;
extern ChatSessionCreateReqDefaultTypeInternal _ChatSessionCreateReq_default_instance_;
class ChatSessionCreateRsp;
class ChatSessionCreateRspDefaultTypeInternal;
extern ChatSessionCreateRspDefaultTypeInternal _ChatSessionCreateRsp_default_instance_;
class FriendAddProcessReq;
class FriendAddProcessReqDefaultTypeInternal;
extern FriendAddProcessReqDefaultTypeInternal _FriendAddProcessReq_default_instance_;
class FriendAddProcessRsp;
class FriendAddProcessRspDefaultTypeInternal;
extern FriendAddProcessRspDefaultTypeInternal _FriendAddProcessRsp_default_instance_;
class FriendAddReq;
class FriendAddReqDefaultTypeInternal;
extern FriendAddReqDefaultTypeInternal _FriendAddReq_default_instance_;
class FriendAddRsp;
class FriendAddRspDefaultTypeInternal;
extern FriendAddRspDefaultTypeInternal _FriendAddRsp_default_instance_;
class FriendEvent;
class FriendEventDefaultTypeInternal;
extern FriendEventDefaultTypeInternal _FriendEvent_default_instance_;
class FriendRemoveReq;
class FriendRemoveReqDefaultTypeInternal;
extern FriendRemoveReqDefaultTypeInternal _FriendRemoveReq_default_instance_;
class FriendRemoveRsp;
class FriendRemoveRspDefaultTypeInternal;
extern FriendRemoveRspDefaultTypeInternal _FriendRemoveRsp_default_instance_;
class FriendSearchReq;
class FriendSearchReqDefaultTypeInternal;
extern FriendSearchReqDefaultTypeInternal _FriendSearchReq_default_instance_;
class FriendSearchRsp;
class FriendSearchRspDefaultTypeInternal;
extern FriendSearchRspDefaultTypeInternal _FriendSearchRsp_default_instance_;
class GetChatSessionListReq;
class GetChatSessionListReqDefaultTypeInternal;
extern GetChatSessionListReqDefaultTypeInternal _GetChatSessionListReq_default_instance_;
class GetChatSessionListRsp;
class GetChatSessionListRspDefaultTypeInternal;
extern GetChatSessionListRspDefaultTypeInternal _GetChatSessionListRsp_default_instance_;
class GetChatSessionMemberReq;
class GetChatSessionMemberReqDefaultTypeInternal;
extern GetChatSessionMemberReqDefaultTypeInternal _GetChatSessionMemberReq_default_instance_;
class GetChatSessionMemberRsp;
class GetChatSessionMemberRspDefaultTypeInternal;
extern GetChatSessionMemberRspDefaultTypeInternal _GetChatSessionMemberRsp_default_instance_;
class GetFriendListReq;
class GetFriendListReqDefaultTypeInternal;
extern GetFriendListReqDefaultTypeInternal _GetFriendListReq_default_instance_;
class GetFriendListRsp;
class GetFriendListRspDefaultTypeInternal;
extern GetFriendListRspDefaultTypeInternal _GetFriendListRsp_default_instance_;
class GetPendingFriendEventListReq;
class GetPendingFriendEventListReqDefaultTypeInternal;
extern GetPendingFriendEventListReqDefaultTypeInternal _GetPendingFriendEventListReq_default_instance_;
class GetPendingFriendEventListRsp;
class GetPendingFriendEventListRspDefaultTypeInternal;
extern GetPendingFriendEventListRspDefaultTypeInternal _GetPendingFriendEventListRsp_default_instance_;
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> ::chen_im::ChatSessionCreateReq* Arena::CreateMaybeMessage<::chen_im::ChatSessionCreateReq>(Arena*);
template<> ::chen_im::ChatSessionCreateRsp* Arena::CreateMaybeMessage<::chen_im::ChatSessionCreateRsp>(Arena*);
template<> ::chen_im::FriendAddProcessReq* Arena::CreateMaybeMessage<::chen_im::FriendAddProcessReq>(Arena*);
template<> ::chen_im::FriendAddProcessRsp* Arena::CreateMaybeMessage<::chen_im::FriendAddProcessRsp>(Arena*);
template<> ::chen_im::FriendAddReq* Arena::CreateMaybeMessage<::chen_im::FriendAddReq>(Arena*);
template<> ::chen_im::FriendAddRsp* Arena::CreateMaybeMessage<::chen_im::FriendAddRsp>(Arena*);
template<> ::chen_im::FriendEvent* Arena::CreateMaybeMessage<::chen_im::FriendEvent>(Arena*);
template<> ::chen_im::FriendRemoveReq* Arena::CreateMaybeMessage<::chen_im::FriendRemoveReq>(Arena*);
template<> ::chen_im::FriendRemoveRsp* Arena::CreateMaybeMessage<::chen_im::FriendRemoveRsp>(Arena*);
template<> ::chen_im::FriendSearchReq* Arena::CreateMaybeMessage<::chen_im::FriendSearchReq>(Arena*);
template<> ::chen_im::FriendSearchRsp* Arena::CreateMaybeMessage<::chen_im::FriendSearchRsp>(Arena*);
template<> ::chen_im::GetChatSessionListReq* Arena::CreateMaybeMessage<::chen_im::GetChatSessionListReq>(Arena*);
template<> ::chen_im::GetChatSessionListRsp* Arena::CreateMaybeMessage<::chen_im::GetChatSessionListRsp>(Arena*);
template<> ::chen_im::GetChatSessionMemberReq* Arena::CreateMaybeMessage<::chen_im::GetChatSessionMemberReq>(Arena*);
template<> ::chen_im::GetChatSessionMemberRsp* Arena::CreateMaybeMessage<::chen_im::GetChatSessionMemberRsp>(Arena*);
template<> ::chen_im::GetFriendListReq* Arena::CreateMaybeMessage<::chen_im::GetFriendListReq>(Arena*);
template<> ::chen_im::GetFriendListRsp* Arena::CreateMaybeMessage<::chen_im::GetFriendListRsp>(Arena*);
template<> ::chen_im::GetPendingFriendEventListReq* Arena::CreateMaybeMessage<::chen_im::GetPendingFriendEventListReq>(Arena*);
template<> ::chen_im::GetPendingFriendEventListRsp* Arena::CreateMaybeMessage<::chen_im::GetPendingFriendEventListRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chen_im {

// ===================================================================

class GetFriendListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetFriendListReq) */ {
 public:
  GetFriendListReq();
  virtual ~GetFriendListReq();

  GetFriendListReq(const GetFriendListReq& from);

  inline GetFriendListReq& operator=(const GetFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFriendListReq(GetFriendListReq&& from) noexcept
    : GetFriendListReq() {
    *this = ::std::move(from);
  }

  inline GetFriendListReq& operator=(GetFriendListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListReq* internal_default_instance() {
    return reinterpret_cast<const GetFriendListReq*>(
               &_GetFriendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetFriendListReq* other);
  friend void swap(GetFriendListReq& a, GetFriendListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListReq* New() const final {
    return CreateMaybeMessage<GetFriendListReq>(NULL);
  }

  GetFriendListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFriendListReq& from);
  void MergeFrom(const GetFriendListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:chen_im.GetFriendListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFriendListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetFriendListRsp) */ {
 public:
  GetFriendListRsp();
  virtual ~GetFriendListRsp();

  GetFriendListRsp(const GetFriendListRsp& from);

  inline GetFriendListRsp& operator=(const GetFriendListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFriendListRsp(GetFriendListRsp&& from) noexcept
    : GetFriendListRsp() {
    *this = ::std::move(from);
  }

  inline GetFriendListRsp& operator=(GetFriendListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListRsp* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRsp*>(
               &_GetFriendListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetFriendListRsp* other);
  friend void swap(GetFriendListRsp& a, GetFriendListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListRsp* New() const final {
    return CreateMaybeMessage<GetFriendListRsp>(NULL);
  }

  GetFriendListRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFriendListRsp& from);
  void MergeFrom(const GetFriendListRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chen_im.UserInfo friend_list = 4;
  int friend_list_size() const;
  void clear_friend_list();
  static const int kFriendListFieldNumber = 4;
  ::chen_im::UserInfo* mutable_friend_list(int index);
  ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >*
      mutable_friend_list();
  const ::chen_im::UserInfo& friend_list(int index) const;
  ::chen_im::UserInfo* add_friend_list();
  const ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >&
      friend_list() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetFriendListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo > friend_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRemoveReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendRemoveReq) */ {
 public:
  FriendRemoveReq();
  virtual ~FriendRemoveReq();

  FriendRemoveReq(const FriendRemoveReq& from);

  inline FriendRemoveReq& operator=(const FriendRemoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRemoveReq(FriendRemoveReq&& from) noexcept
    : FriendRemoveReq() {
    *this = ::std::move(from);
  }

  inline FriendRemoveReq& operator=(FriendRemoveReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRemoveReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRemoveReq* internal_default_instance() {
    return reinterpret_cast<const FriendRemoveReq*>(
               &_FriendRemoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FriendRemoveReq* other);
  friend void swap(FriendRemoveReq& a, FriendRemoveReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRemoveReq* New() const final {
    return CreateMaybeMessage<FriendRemoveReq>(NULL);
  }

  FriendRemoveReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendRemoveReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendRemoveReq& from);
  void MergeFrom(const FriendRemoveReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRemoveReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string peer_id = 4;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 4;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // @@protoc_insertion_point(class_scope:chen_im.FriendRemoveReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRemoveRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendRemoveRsp) */ {
 public:
  FriendRemoveRsp();
  virtual ~FriendRemoveRsp();

  FriendRemoveRsp(const FriendRemoveRsp& from);

  inline FriendRemoveRsp& operator=(const FriendRemoveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRemoveRsp(FriendRemoveRsp&& from) noexcept
    : FriendRemoveRsp() {
    *this = ::std::move(from);
  }

  inline FriendRemoveRsp& operator=(FriendRemoveRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRemoveRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRemoveRsp* internal_default_instance() {
    return reinterpret_cast<const FriendRemoveRsp*>(
               &_FriendRemoveRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FriendRemoveRsp* other);
  friend void swap(FriendRemoveRsp& a, FriendRemoveRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRemoveRsp* New() const final {
    return CreateMaybeMessage<FriendRemoveRsp>(NULL);
  }

  FriendRemoveRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendRemoveRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendRemoveRsp& from);
  void MergeFrom(const FriendRemoveRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRemoveRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.FriendRemoveRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendAddReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendAddReq) */ {
 public:
  FriendAddReq();
  virtual ~FriendAddReq();

  FriendAddReq(const FriendAddReq& from);

  inline FriendAddReq& operator=(const FriendAddReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendAddReq(FriendAddReq&& from) noexcept
    : FriendAddReq() {
    *this = ::std::move(from);
  }

  inline FriendAddReq& operator=(FriendAddReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendAddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddReq* internal_default_instance() {
    return reinterpret_cast<const FriendAddReq*>(
               &_FriendAddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FriendAddReq* other);
  friend void swap(FriendAddReq& a, FriendAddReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendAddReq* New() const final {
    return CreateMaybeMessage<FriendAddReq>(NULL);
  }

  FriendAddReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendAddReq& from);
  void MergeFrom(const FriendAddReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string respondent_id = 4;
  void clear_respondent_id();
  static const int kRespondentIdFieldNumber = 4;
  const ::std::string& respondent_id() const;
  void set_respondent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_respondent_id(::std::string&& value);
  #endif
  void set_respondent_id(const char* value);
  void set_respondent_id(const char* value, size_t size);
  ::std::string* mutable_respondent_id();
  ::std::string* release_respondent_id();
  void set_allocated_respondent_id(::std::string* respondent_id);

  // @@protoc_insertion_point(class_scope:chen_im.FriendAddReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr respondent_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendAddRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendAddRsp) */ {
 public:
  FriendAddRsp();
  virtual ~FriendAddRsp();

  FriendAddRsp(const FriendAddRsp& from);

  inline FriendAddRsp& operator=(const FriendAddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendAddRsp(FriendAddRsp&& from) noexcept
    : FriendAddRsp() {
    *this = ::std::move(from);
  }

  inline FriendAddRsp& operator=(FriendAddRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendAddRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddRsp* internal_default_instance() {
    return reinterpret_cast<const FriendAddRsp*>(
               &_FriendAddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FriendAddRsp* other);
  friend void swap(FriendAddRsp& a, FriendAddRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendAddRsp* New() const final {
    return CreateMaybeMessage<FriendAddRsp>(NULL);
  }

  FriendAddRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendAddRsp& from);
  void MergeFrom(const FriendAddRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string notify_event_id = 4;
  void clear_notify_event_id();
  static const int kNotifyEventIdFieldNumber = 4;
  const ::std::string& notify_event_id() const;
  void set_notify_event_id(const ::std::string& value);
  #if LANG_CXX11
  void set_notify_event_id(::std::string&& value);
  #endif
  void set_notify_event_id(const char* value);
  void set_notify_event_id(const char* value, size_t size);
  ::std::string* mutable_notify_event_id();
  ::std::string* release_notify_event_id();
  void set_allocated_notify_event_id(::std::string* notify_event_id);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.FriendAddRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr notify_event_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendAddProcessReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendAddProcessReq) */ {
 public:
  FriendAddProcessReq();
  virtual ~FriendAddProcessReq();

  FriendAddProcessReq(const FriendAddProcessReq& from);

  inline FriendAddProcessReq& operator=(const FriendAddProcessReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendAddProcessReq(FriendAddProcessReq&& from) noexcept
    : FriendAddProcessReq() {
    *this = ::std::move(from);
  }

  inline FriendAddProcessReq& operator=(FriendAddProcessReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendAddProcessReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddProcessReq* internal_default_instance() {
    return reinterpret_cast<const FriendAddProcessReq*>(
               &_FriendAddProcessReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FriendAddProcessReq* other);
  friend void swap(FriendAddProcessReq& a, FriendAddProcessReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendAddProcessReq* New() const final {
    return CreateMaybeMessage<FriendAddProcessReq>(NULL);
  }

  FriendAddProcessReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddProcessReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendAddProcessReq& from);
  void MergeFrom(const FriendAddProcessReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddProcessReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string notify_event_id = 2;
  void clear_notify_event_id();
  static const int kNotifyEventIdFieldNumber = 2;
  const ::std::string& notify_event_id() const;
  void set_notify_event_id(const ::std::string& value);
  #if LANG_CXX11
  void set_notify_event_id(::std::string&& value);
  #endif
  void set_notify_event_id(const char* value);
  void set_notify_event_id(const char* value, size_t size);
  ::std::string* mutable_notify_event_id();
  ::std::string* release_notify_event_id();
  void set_allocated_notify_event_id(::std::string* notify_event_id);

  // string apply_user_id = 4;
  void clear_apply_user_id();
  static const int kApplyUserIdFieldNumber = 4;
  const ::std::string& apply_user_id() const;
  void set_apply_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_apply_user_id(::std::string&& value);
  #endif
  void set_apply_user_id(const char* value);
  void set_apply_user_id(const char* value, size_t size);
  ::std::string* mutable_apply_user_id();
  ::std::string* release_apply_user_id();
  void set_allocated_apply_user_id(::std::string* apply_user_id);

  // string session_id = 5;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 5;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 6;
  void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // bool agree = 3;
  void clear_agree();
  static const int kAgreeFieldNumber = 3;
  bool agree() const;
  void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.FriendAddProcessReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr notify_event_id_;
  ::google::protobuf::internal::ArenaStringPtr apply_user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  bool agree_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendAddProcessRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendAddProcessRsp) */ {
 public:
  FriendAddProcessRsp();
  virtual ~FriendAddProcessRsp();

  FriendAddProcessRsp(const FriendAddProcessRsp& from);

  inline FriendAddProcessRsp& operator=(const FriendAddProcessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendAddProcessRsp(FriendAddProcessRsp&& from) noexcept
    : FriendAddProcessRsp() {
    *this = ::std::move(from);
  }

  inline FriendAddProcessRsp& operator=(FriendAddProcessRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendAddProcessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddProcessRsp* internal_default_instance() {
    return reinterpret_cast<const FriendAddProcessRsp*>(
               &_FriendAddProcessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(FriendAddProcessRsp* other);
  friend void swap(FriendAddProcessRsp& a, FriendAddProcessRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendAddProcessRsp* New() const final {
    return CreateMaybeMessage<FriendAddProcessRsp>(NULL);
  }

  FriendAddProcessRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddProcessRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendAddProcessRsp& from);
  void MergeFrom(const FriendAddProcessRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddProcessRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string new_session_id = 4;
  void clear_new_session_id();
  static const int kNewSessionIdFieldNumber = 4;
  const ::std::string& new_session_id() const;
  void set_new_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_new_session_id(::std::string&& value);
  #endif
  void set_new_session_id(const char* value);
  void set_new_session_id(const char* value, size_t size);
  ::std::string* mutable_new_session_id();
  ::std::string* release_new_session_id();
  void set_allocated_new_session_id(::std::string* new_session_id);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.FriendAddProcessRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr new_session_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPendingFriendEventListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetPendingFriendEventListReq) */ {
 public:
  GetPendingFriendEventListReq();
  virtual ~GetPendingFriendEventListReq();

  GetPendingFriendEventListReq(const GetPendingFriendEventListReq& from);

  inline GetPendingFriendEventListReq& operator=(const GetPendingFriendEventListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPendingFriendEventListReq(GetPendingFriendEventListReq&& from) noexcept
    : GetPendingFriendEventListReq() {
    *this = ::std::move(from);
  }

  inline GetPendingFriendEventListReq& operator=(GetPendingFriendEventListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPendingFriendEventListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPendingFriendEventListReq* internal_default_instance() {
    return reinterpret_cast<const GetPendingFriendEventListReq*>(
               &_GetPendingFriendEventListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetPendingFriendEventListReq* other);
  friend void swap(GetPendingFriendEventListReq& a, GetPendingFriendEventListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPendingFriendEventListReq* New() const final {
    return CreateMaybeMessage<GetPendingFriendEventListReq>(NULL);
  }

  GetPendingFriendEventListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPendingFriendEventListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPendingFriendEventListReq& from);
  void MergeFrom(const GetPendingFriendEventListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPendingFriendEventListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:chen_im.GetPendingFriendEventListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendEvent) */ {
 public:
  FriendEvent();
  virtual ~FriendEvent();

  FriendEvent(const FriendEvent& from);

  inline FriendEvent& operator=(const FriendEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendEvent(FriendEvent&& from) noexcept
    : FriendEvent() {
    *this = ::std::move(from);
  }

  inline FriendEvent& operator=(FriendEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendEvent* internal_default_instance() {
    return reinterpret_cast<const FriendEvent*>(
               &_FriendEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FriendEvent* other);
  friend void swap(FriendEvent& a, FriendEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendEvent* New() const final {
    return CreateMaybeMessage<FriendEvent>(NULL);
  }

  FriendEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendEvent& from);
  void MergeFrom(const FriendEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_id = 1;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  const ::std::string& event_id() const;
  void set_event_id(const ::std::string& value);
  #if LANG_CXX11
  void set_event_id(::std::string&& value);
  #endif
  void set_event_id(const char* value);
  void set_event_id(const char* value, size_t size);
  ::std::string* mutable_event_id();
  ::std::string* release_event_id();
  void set_allocated_event_id(::std::string* event_id);

  // .chen_im.UserInfo sender = 3;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 3;
  private:
  const ::chen_im::UserInfo& _internal_sender() const;
  public:
  const ::chen_im::UserInfo& sender() const;
  ::chen_im::UserInfo* release_sender();
  ::chen_im::UserInfo* mutable_sender();
  void set_allocated_sender(::chen_im::UserInfo* sender);

  // @@protoc_insertion_point(class_scope:chen_im.FriendEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_id_;
  ::chen_im::UserInfo* sender_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPendingFriendEventListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetPendingFriendEventListRsp) */ {
 public:
  GetPendingFriendEventListRsp();
  virtual ~GetPendingFriendEventListRsp();

  GetPendingFriendEventListRsp(const GetPendingFriendEventListRsp& from);

  inline GetPendingFriendEventListRsp& operator=(const GetPendingFriendEventListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPendingFriendEventListRsp(GetPendingFriendEventListRsp&& from) noexcept
    : GetPendingFriendEventListRsp() {
    *this = ::std::move(from);
  }

  inline GetPendingFriendEventListRsp& operator=(GetPendingFriendEventListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPendingFriendEventListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPendingFriendEventListRsp* internal_default_instance() {
    return reinterpret_cast<const GetPendingFriendEventListRsp*>(
               &_GetPendingFriendEventListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetPendingFriendEventListRsp* other);
  friend void swap(GetPendingFriendEventListRsp& a, GetPendingFriendEventListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPendingFriendEventListRsp* New() const final {
    return CreateMaybeMessage<GetPendingFriendEventListRsp>(NULL);
  }

  GetPendingFriendEventListRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPendingFriendEventListRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPendingFriendEventListRsp& from);
  void MergeFrom(const GetPendingFriendEventListRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPendingFriendEventListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chen_im.FriendEvent event = 4;
  int event_size() const;
  void clear_event();
  static const int kEventFieldNumber = 4;
  ::chen_im::FriendEvent* mutable_event(int index);
  ::google::protobuf::RepeatedPtrField< ::chen_im::FriendEvent >*
      mutable_event();
  const ::chen_im::FriendEvent& event(int index) const;
  ::chen_im::FriendEvent* add_event();
  const ::google::protobuf::RepeatedPtrField< ::chen_im::FriendEvent >&
      event() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetPendingFriendEventListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chen_im::FriendEvent > event_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendSearchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendSearchReq) */ {
 public:
  FriendSearchReq();
  virtual ~FriendSearchReq();

  FriendSearchReq(const FriendSearchReq& from);

  inline FriendSearchReq& operator=(const FriendSearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendSearchReq(FriendSearchReq&& from) noexcept
    : FriendSearchReq() {
    *this = ::std::move(from);
  }

  inline FriendSearchReq& operator=(FriendSearchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendSearchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendSearchReq* internal_default_instance() {
    return reinterpret_cast<const FriendSearchReq*>(
               &_FriendSearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FriendSearchReq* other);
  friend void swap(FriendSearchReq& a, FriendSearchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendSearchReq* New() const final {
    return CreateMaybeMessage<FriendSearchReq>(NULL);
  }

  FriendSearchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendSearchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendSearchReq& from);
  void MergeFrom(const FriendSearchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendSearchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string search_key = 2;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 2;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:chen_im.FriendSearchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendSearchRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FriendSearchRsp) */ {
 public:
  FriendSearchRsp();
  virtual ~FriendSearchRsp();

  FriendSearchRsp(const FriendSearchRsp& from);

  inline FriendSearchRsp& operator=(const FriendSearchRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendSearchRsp(FriendSearchRsp&& from) noexcept
    : FriendSearchRsp() {
    *this = ::std::move(from);
  }

  inline FriendSearchRsp& operator=(FriendSearchRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendSearchRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendSearchRsp* internal_default_instance() {
    return reinterpret_cast<const FriendSearchRsp*>(
               &_FriendSearchRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(FriendSearchRsp* other);
  friend void swap(FriendSearchRsp& a, FriendSearchRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendSearchRsp* New() const final {
    return CreateMaybeMessage<FriendSearchRsp>(NULL);
  }

  FriendSearchRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendSearchRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendSearchRsp& from);
  void MergeFrom(const FriendSearchRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendSearchRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chen_im.UserInfo user_info = 4;
  int user_info_size() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  ::chen_im::UserInfo* mutable_user_info(int index);
  ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >*
      mutable_user_info();
  const ::chen_im::UserInfo& user_info(int index) const;
  ::chen_im::UserInfo* add_user_info();
  const ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >&
      user_info() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.FriendSearchRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo > user_info_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatSessionListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetChatSessionListReq) */ {
 public:
  GetChatSessionListReq();
  virtual ~GetChatSessionListReq();

  GetChatSessionListReq(const GetChatSessionListReq& from);

  inline GetChatSessionListReq& operator=(const GetChatSessionListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChatSessionListReq(GetChatSessionListReq&& from) noexcept
    : GetChatSessionListReq() {
    *this = ::std::move(from);
  }

  inline GetChatSessionListReq& operator=(GetChatSessionListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatSessionListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionListReq* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionListReq*>(
               &_GetChatSessionListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetChatSessionListReq* other);
  friend void swap(GetChatSessionListReq& a, GetChatSessionListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionListReq* New() const final {
    return CreateMaybeMessage<GetChatSessionListReq>(NULL);
  }

  GetChatSessionListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetChatSessionListReq& from);
  void MergeFrom(const GetChatSessionListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:chen_im.GetChatSessionListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatSessionListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetChatSessionListRsp) */ {
 public:
  GetChatSessionListRsp();
  virtual ~GetChatSessionListRsp();

  GetChatSessionListRsp(const GetChatSessionListRsp& from);

  inline GetChatSessionListRsp& operator=(const GetChatSessionListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChatSessionListRsp(GetChatSessionListRsp&& from) noexcept
    : GetChatSessionListRsp() {
    *this = ::std::move(from);
  }

  inline GetChatSessionListRsp& operator=(GetChatSessionListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatSessionListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionListRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionListRsp*>(
               &_GetChatSessionListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GetChatSessionListRsp* other);
  friend void swap(GetChatSessionListRsp& a, GetChatSessionListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionListRsp* New() const final {
    return CreateMaybeMessage<GetChatSessionListRsp>(NULL);
  }

  GetChatSessionListRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionListRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetChatSessionListRsp& from);
  void MergeFrom(const GetChatSessionListRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chen_im.ChatSessionInfo chat_session_info_list = 4;
  int chat_session_info_list_size() const;
  void clear_chat_session_info_list();
  static const int kChatSessionInfoListFieldNumber = 4;
  ::chen_im::ChatSessionInfo* mutable_chat_session_info_list(int index);
  ::google::protobuf::RepeatedPtrField< ::chen_im::ChatSessionInfo >*
      mutable_chat_session_info_list();
  const ::chen_im::ChatSessionInfo& chat_session_info_list(int index) const;
  ::chen_im::ChatSessionInfo* add_chat_session_info_list();
  const ::google::protobuf::RepeatedPtrField< ::chen_im::ChatSessionInfo >&
      chat_session_info_list() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetChatSessionListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chen_im::ChatSessionInfo > chat_session_info_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatSessionCreateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.ChatSessionCreateReq) */ {
 public:
  ChatSessionCreateReq();
  virtual ~ChatSessionCreateReq();

  ChatSessionCreateReq(const ChatSessionCreateReq& from);

  inline ChatSessionCreateReq& operator=(const ChatSessionCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatSessionCreateReq(ChatSessionCreateReq&& from) noexcept
    : ChatSessionCreateReq() {
    *this = ::std::move(from);
  }

  inline ChatSessionCreateReq& operator=(ChatSessionCreateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSessionCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatSessionCreateReq* internal_default_instance() {
    return reinterpret_cast<const ChatSessionCreateReq*>(
               &_ChatSessionCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ChatSessionCreateReq* other);
  friend void swap(ChatSessionCreateReq& a, ChatSessionCreateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatSessionCreateReq* New() const final {
    return CreateMaybeMessage<ChatSessionCreateReq>(NULL);
  }

  ChatSessionCreateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatSessionCreateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatSessionCreateReq& from);
  void MergeFrom(const ChatSessionCreateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSessionCreateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string member_id_list = 5;
  int member_id_list_size() const;
  void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 5;
  const ::std::string& member_id_list(int index) const;
  ::std::string* mutable_member_id_list(int index);
  void set_member_id_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_member_id_list(int index, ::std::string&& value);
  #endif
  void set_member_id_list(int index, const char* value);
  void set_member_id_list(int index, const char* value, size_t size);
  ::std::string* add_member_id_list();
  void add_member_id_list(const ::std::string& value);
  #if LANG_CXX11
  void add_member_id_list(::std::string&& value);
  #endif
  void add_member_id_list(const char* value);
  void add_member_id_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& member_id_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_member_id_list();

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string chat_session_name = 4;
  void clear_chat_session_name();
  static const int kChatSessionNameFieldNumber = 4;
  const ::std::string& chat_session_name() const;
  void set_chat_session_name(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_session_name(::std::string&& value);
  #endif
  void set_chat_session_name(const char* value);
  void set_chat_session_name(const char* value, size_t size);
  ::std::string* mutable_chat_session_name();
  ::std::string* release_chat_session_name();
  void set_allocated_chat_session_name(::std::string* chat_session_name);

  // @@protoc_insertion_point(class_scope:chen_im.ChatSessionCreateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> member_id_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_session_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatSessionCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.ChatSessionCreateRsp) */ {
 public:
  ChatSessionCreateRsp();
  virtual ~ChatSessionCreateRsp();

  ChatSessionCreateRsp(const ChatSessionCreateRsp& from);

  inline ChatSessionCreateRsp& operator=(const ChatSessionCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatSessionCreateRsp(ChatSessionCreateRsp&& from) noexcept
    : ChatSessionCreateRsp() {
    *this = ::std::move(from);
  }

  inline ChatSessionCreateRsp& operator=(ChatSessionCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSessionCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatSessionCreateRsp* internal_default_instance() {
    return reinterpret_cast<const ChatSessionCreateRsp*>(
               &_ChatSessionCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ChatSessionCreateRsp* other);
  friend void swap(ChatSessionCreateRsp& a, ChatSessionCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatSessionCreateRsp* New() const final {
    return CreateMaybeMessage<ChatSessionCreateRsp>(NULL);
  }

  ChatSessionCreateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatSessionCreateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatSessionCreateRsp& from);
  void MergeFrom(const ChatSessionCreateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSessionCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .chen_im.ChatSessionInfo chat_session_info = 4;
  bool has_chat_session_info() const;
  void clear_chat_session_info();
  static const int kChatSessionInfoFieldNumber = 4;
  private:
  const ::chen_im::ChatSessionInfo& _internal_chat_session_info() const;
  public:
  const ::chen_im::ChatSessionInfo& chat_session_info() const;
  ::chen_im::ChatSessionInfo* release_chat_session_info();
  ::chen_im::ChatSessionInfo* mutable_chat_session_info();
  void set_allocated_chat_session_info(::chen_im::ChatSessionInfo* chat_session_info);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.ChatSessionCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::chen_im::ChatSessionInfo* chat_session_info_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatSessionMemberReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetChatSessionMemberReq) */ {
 public:
  GetChatSessionMemberReq();
  virtual ~GetChatSessionMemberReq();

  GetChatSessionMemberReq(const GetChatSessionMemberReq& from);

  inline GetChatSessionMemberReq& operator=(const GetChatSessionMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChatSessionMemberReq(GetChatSessionMemberReq&& from) noexcept
    : GetChatSessionMemberReq() {
    *this = ::std::move(from);
  }

  inline GetChatSessionMemberReq& operator=(GetChatSessionMemberReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatSessionMemberReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionMemberReq* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionMemberReq*>(
               &_GetChatSessionMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GetChatSessionMemberReq* other);
  friend void swap(GetChatSessionMemberReq& a, GetChatSessionMemberReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionMemberReq* New() const final {
    return CreateMaybeMessage<GetChatSessionMemberReq>(NULL);
  }

  GetChatSessionMemberReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionMemberReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetChatSessionMemberReq& from);
  void MergeFrom(const GetChatSessionMemberReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionMemberReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string chat_session_id = 4;
  void clear_chat_session_id();
  static const int kChatSessionIdFieldNumber = 4;
  const ::std::string& chat_session_id() const;
  void set_chat_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_session_id(::std::string&& value);
  #endif
  void set_chat_session_id(const char* value);
  void set_chat_session_id(const char* value, size_t size);
  ::std::string* mutable_chat_session_id();
  ::std::string* release_chat_session_id();
  void set_allocated_chat_session_id(::std::string* chat_session_id);

  // @@protoc_insertion_point(class_scope:chen_im.GetChatSessionMemberReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatSessionMemberRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.GetChatSessionMemberRsp) */ {
 public:
  GetChatSessionMemberRsp();
  virtual ~GetChatSessionMemberRsp();

  GetChatSessionMemberRsp(const GetChatSessionMemberRsp& from);

  inline GetChatSessionMemberRsp& operator=(const GetChatSessionMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChatSessionMemberRsp(GetChatSessionMemberRsp&& from) noexcept
    : GetChatSessionMemberRsp() {
    *this = ::std::move(from);
  }

  inline GetChatSessionMemberRsp& operator=(GetChatSessionMemberRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatSessionMemberRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionMemberRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionMemberRsp*>(
               &_GetChatSessionMemberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GetChatSessionMemberRsp* other);
  friend void swap(GetChatSessionMemberRsp& a, GetChatSessionMemberRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionMemberRsp* New() const final {
    return CreateMaybeMessage<GetChatSessionMemberRsp>(NULL);
  }

  GetChatSessionMemberRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionMemberRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetChatSessionMemberRsp& from);
  void MergeFrom(const GetChatSessionMemberRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionMemberRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chen_im.UserInfo member_info_list = 4;
  int member_info_list_size() const;
  void clear_member_info_list();
  static const int kMemberInfoListFieldNumber = 4;
  ::chen_im::UserInfo* mutable_member_info_list(int index);
  ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >*
      mutable_member_info_list();
  const ::chen_im::UserInfo& member_info_list(int index) const;
  ::chen_im::UserInfo* add_member_info_list();
  const ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >&
      member_info_list() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chen_im.GetChatSessionMemberRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo > member_info_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_friend_2eproto::TableStruct;
};
// ===================================================================

class FriendService_Stub;

class FriendService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendService() {};
 public:
  virtual ~FriendService();

  typedef FriendService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetFriendList(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetFriendListReq* request,
                       ::chen_im::GetFriendListRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendRemove(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendRemoveReq* request,
                       ::chen_im::FriendRemoveRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendAdd(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendAddReq* request,
                       ::chen_im::FriendAddRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendAddProcess(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendAddProcessReq* request,
                       ::chen_im::FriendAddProcessRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendSearch(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendSearchReq* request,
                       ::chen_im::FriendSearchRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChatSessionList(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetChatSessionListReq* request,
                       ::chen_im::GetChatSessionListRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void ChatSessionCreate(::google::protobuf::RpcController* controller,
                       const ::chen_im::ChatSessionCreateReq* request,
                       ::chen_im::ChatSessionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChatSessionMember(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetChatSessionMemberReq* request,
                       ::chen_im::GetChatSessionMemberRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPendingFriendEventList(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetPendingFriendEventListReq* request,
                       ::chen_im::GetPendingFriendEventListRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendService);
};

class FriendService_Stub : public FriendService {
 public:
  FriendService_Stub(::google::protobuf::RpcChannel* channel);
  FriendService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FriendService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements FriendService ------------------------------------------

  void GetFriendList(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetFriendListReq* request,
                       ::chen_im::GetFriendListRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendRemove(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendRemoveReq* request,
                       ::chen_im::FriendRemoveRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendAdd(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendAddReq* request,
                       ::chen_im::FriendAddRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendAddProcess(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendAddProcessReq* request,
                       ::chen_im::FriendAddProcessRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendSearch(::google::protobuf::RpcController* controller,
                       const ::chen_im::FriendSearchReq* request,
                       ::chen_im::FriendSearchRsp* response,
                       ::google::protobuf::Closure* done);
  void GetChatSessionList(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetChatSessionListReq* request,
                       ::chen_im::GetChatSessionListRsp* response,
                       ::google::protobuf::Closure* done);
  void ChatSessionCreate(::google::protobuf::RpcController* controller,
                       const ::chen_im::ChatSessionCreateReq* request,
                       ::chen_im::ChatSessionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  void GetChatSessionMember(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetChatSessionMemberReq* request,
                       ::chen_im::GetChatSessionMemberRsp* response,
                       ::google::protobuf::Closure* done);
  void GetPendingFriendEventList(::google::protobuf::RpcController* controller,
                       const ::chen_im::GetPendingFriendEventListReq* request,
                       ::chen_im::GetPendingFriendEventListRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFriendListReq

// string request_id = 1;
inline void GetFriendListReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendListReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetFriendListReq.request_id)
  return request_id_.GetNoArena();
}
inline void GetFriendListReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetFriendListReq.request_id)
}
#if LANG_CXX11
inline void GetFriendListReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetFriendListReq.request_id)
}
#endif
inline void GetFriendListReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetFriendListReq.request_id)
}
inline void GetFriendListReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetFriendListReq.request_id)
}
inline ::std::string* GetFriendListReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetFriendListReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetFriendListReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendListReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetFriendListReq.request_id)
}

// string user_id = 2;
inline void GetFriendListReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendListReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetFriendListReq.user_id)
  return user_id_.GetNoArena();
}
inline void GetFriendListReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetFriendListReq.user_id)
}
#if LANG_CXX11
inline void GetFriendListReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetFriendListReq.user_id)
}
#endif
inline void GetFriendListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetFriendListReq.user_id)
}
inline void GetFriendListReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetFriendListReq.user_id)
}
inline ::std::string* GetFriendListReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetFriendListReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetFriendListReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendListReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetFriendListReq.user_id)
}

// string session_id = 3;
inline void GetFriendListReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendListReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetFriendListReq.session_id)
  return session_id_.GetNoArena();
}
inline void GetFriendListReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetFriendListReq.session_id)
}
#if LANG_CXX11
inline void GetFriendListReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetFriendListReq.session_id)
}
#endif
inline void GetFriendListReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetFriendListReq.session_id)
}
inline void GetFriendListReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetFriendListReq.session_id)
}
inline ::std::string* GetFriendListReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetFriendListReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetFriendListReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendListReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetFriendListReq.session_id)
}

// -------------------------------------------------------------------

// GetFriendListRsp

// string request_id = 1;
inline void GetFriendListRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetFriendListRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetFriendListRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetFriendListRsp.request_id)
}
#if LANG_CXX11
inline void GetFriendListRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetFriendListRsp.request_id)
}
#endif
inline void GetFriendListRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetFriendListRsp.request_id)
}
inline void GetFriendListRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetFriendListRsp.request_id)
}
inline ::std::string* GetFriendListRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetFriendListRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetFriendListRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendListRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetFriendListRsp.request_id)
}

// bool success = 2;
inline void GetFriendListRsp::clear_success() {
  success_ = false;
}
inline bool GetFriendListRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetFriendListRsp.success)
  return success_;
}
inline void GetFriendListRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetFriendListRsp.success)
}

// string errmsg = 3;
inline void GetFriendListRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetFriendListRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetFriendListRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetFriendListRsp.errmsg)
}
#if LANG_CXX11
inline void GetFriendListRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetFriendListRsp.errmsg)
}
#endif
inline void GetFriendListRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetFriendListRsp.errmsg)
}
inline void GetFriendListRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetFriendListRsp.errmsg)
}
inline ::std::string* GetFriendListRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetFriendListRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetFriendListRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendListRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetFriendListRsp.errmsg)
}

// repeated .chen_im.UserInfo friend_list = 4;
inline int GetFriendListRsp::friend_list_size() const {
  return friend_list_.size();
}
inline ::chen_im::UserInfo* GetFriendListRsp::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.GetFriendListRsp.friend_list)
  return friend_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >*
GetFriendListRsp::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.GetFriendListRsp.friend_list)
  return &friend_list_;
}
inline const ::chen_im::UserInfo& GetFriendListRsp::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.GetFriendListRsp.friend_list)
  return friend_list_.Get(index);
}
inline ::chen_im::UserInfo* GetFriendListRsp::add_friend_list() {
  // @@protoc_insertion_point(field_add:chen_im.GetFriendListRsp.friend_list)
  return friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >&
GetFriendListRsp::friend_list() const {
  // @@protoc_insertion_point(field_list:chen_im.GetFriendListRsp.friend_list)
  return friend_list_;
}

// -------------------------------------------------------------------

// FriendRemoveReq

// string request_id = 1;
inline void FriendRemoveReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRemoveReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendRemoveReq.request_id)
  return request_id_.GetNoArena();
}
inline void FriendRemoveReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendRemoveReq.request_id)
}
#if LANG_CXX11
inline void FriendRemoveReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendRemoveReq.request_id)
}
#endif
inline void FriendRemoveReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendRemoveReq.request_id)
}
inline void FriendRemoveReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendRemoveReq.request_id)
}
inline ::std::string* FriendRemoveReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendRemoveReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRemoveReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendRemoveReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRemoveReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendRemoveReq.request_id)
}

// string user_id = 2;
inline void FriendRemoveReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRemoveReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendRemoveReq.user_id)
  return user_id_.GetNoArena();
}
inline void FriendRemoveReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendRemoveReq.user_id)
}
#if LANG_CXX11
inline void FriendRemoveReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendRemoveReq.user_id)
}
#endif
inline void FriendRemoveReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendRemoveReq.user_id)
}
inline void FriendRemoveReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendRemoveReq.user_id)
}
inline ::std::string* FriendRemoveReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendRemoveReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRemoveReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendRemoveReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRemoveReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendRemoveReq.user_id)
}

// string session_id = 3;
inline void FriendRemoveReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRemoveReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendRemoveReq.session_id)
  return session_id_.GetNoArena();
}
inline void FriendRemoveReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendRemoveReq.session_id)
}
#if LANG_CXX11
inline void FriendRemoveReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendRemoveReq.session_id)
}
#endif
inline void FriendRemoveReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendRemoveReq.session_id)
}
inline void FriendRemoveReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendRemoveReq.session_id)
}
inline ::std::string* FriendRemoveReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendRemoveReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRemoveReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendRemoveReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRemoveReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendRemoveReq.session_id)
}

// string peer_id = 4;
inline void FriendRemoveReq::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRemoveReq::peer_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendRemoveReq.peer_id)
  return peer_id_.GetNoArena();
}
inline void FriendRemoveReq::set_peer_id(const ::std::string& value) {
  
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendRemoveReq.peer_id)
}
#if LANG_CXX11
inline void FriendRemoveReq::set_peer_id(::std::string&& value) {
  
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendRemoveReq.peer_id)
}
#endif
inline void FriendRemoveReq::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendRemoveReq.peer_id)
}
inline void FriendRemoveReq::set_peer_id(const char* value, size_t size) {
  
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendRemoveReq.peer_id)
}
inline ::std::string* FriendRemoveReq::mutable_peer_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendRemoveReq.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRemoveReq::release_peer_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendRemoveReq.peer_id)
  
  return peer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRemoveReq::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    
  } else {
    
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendRemoveReq.peer_id)
}

// -------------------------------------------------------------------

// FriendRemoveRsp

// string request_id = 1;
inline void FriendRemoveRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRemoveRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendRemoveRsp.request_id)
  return request_id_.GetNoArena();
}
inline void FriendRemoveRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendRemoveRsp.request_id)
}
#if LANG_CXX11
inline void FriendRemoveRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendRemoveRsp.request_id)
}
#endif
inline void FriendRemoveRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendRemoveRsp.request_id)
}
inline void FriendRemoveRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendRemoveRsp.request_id)
}
inline ::std::string* FriendRemoveRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendRemoveRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRemoveRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendRemoveRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRemoveRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendRemoveRsp.request_id)
}

// bool success = 2;
inline void FriendRemoveRsp::clear_success() {
  success_ = false;
}
inline bool FriendRemoveRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendRemoveRsp.success)
  return success_;
}
inline void FriendRemoveRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.FriendRemoveRsp.success)
}

// string errmsg = 3;
inline void FriendRemoveRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRemoveRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendRemoveRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void FriendRemoveRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendRemoveRsp.errmsg)
}
#if LANG_CXX11
inline void FriendRemoveRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendRemoveRsp.errmsg)
}
#endif
inline void FriendRemoveRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendRemoveRsp.errmsg)
}
inline void FriendRemoveRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendRemoveRsp.errmsg)
}
inline ::std::string* FriendRemoveRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendRemoveRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRemoveRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.FriendRemoveRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRemoveRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendRemoveRsp.errmsg)
}

// -------------------------------------------------------------------

// FriendAddReq

// string request_id = 1;
inline void FriendAddReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddReq.request_id)
  return request_id_.GetNoArena();
}
inline void FriendAddReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddReq.request_id)
}
#if LANG_CXX11
inline void FriendAddReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddReq.request_id)
}
#endif
inline void FriendAddReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddReq.request_id)
}
inline void FriendAddReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddReq.request_id)
}
inline ::std::string* FriendAddReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddReq.request_id)
}

// string session_id = 2;
inline void FriendAddReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddReq.session_id)
  return session_id_.GetNoArena();
}
inline void FriendAddReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddReq.session_id)
}
#if LANG_CXX11
inline void FriendAddReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddReq.session_id)
}
#endif
inline void FriendAddReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddReq.session_id)
}
inline void FriendAddReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddReq.session_id)
}
inline ::std::string* FriendAddReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddReq.session_id)
}

// string user_id = 3;
inline void FriendAddReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddReq.user_id)
  return user_id_.GetNoArena();
}
inline void FriendAddReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddReq.user_id)
}
#if LANG_CXX11
inline void FriendAddReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddReq.user_id)
}
#endif
inline void FriendAddReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddReq.user_id)
}
inline void FriendAddReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddReq.user_id)
}
inline ::std::string* FriendAddReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddReq.user_id)
}

// string respondent_id = 4;
inline void FriendAddReq::clear_respondent_id() {
  respondent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddReq::respondent_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddReq.respondent_id)
  return respondent_id_.GetNoArena();
}
inline void FriendAddReq::set_respondent_id(const ::std::string& value) {
  
  respondent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddReq.respondent_id)
}
#if LANG_CXX11
inline void FriendAddReq::set_respondent_id(::std::string&& value) {
  
  respondent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddReq.respondent_id)
}
#endif
inline void FriendAddReq::set_respondent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  respondent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddReq.respondent_id)
}
inline void FriendAddReq::set_respondent_id(const char* value, size_t size) {
  
  respondent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddReq.respondent_id)
}
inline ::std::string* FriendAddReq::mutable_respondent_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddReq.respondent_id)
  return respondent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddReq::release_respondent_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddReq.respondent_id)
  
  return respondent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddReq::set_allocated_respondent_id(::std::string* respondent_id) {
  if (respondent_id != NULL) {
    
  } else {
    
  }
  respondent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), respondent_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddReq.respondent_id)
}

// -------------------------------------------------------------------

// FriendAddRsp

// string request_id = 1;
inline void FriendAddRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddRsp.request_id)
  return request_id_.GetNoArena();
}
inline void FriendAddRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddRsp.request_id)
}
#if LANG_CXX11
inline void FriendAddRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddRsp.request_id)
}
#endif
inline void FriendAddRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddRsp.request_id)
}
inline void FriendAddRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddRsp.request_id)
}
inline ::std::string* FriendAddRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddRsp.request_id)
}

// bool success = 2;
inline void FriendAddRsp::clear_success() {
  success_ = false;
}
inline bool FriendAddRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddRsp.success)
  return success_;
}
inline void FriendAddRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.FriendAddRsp.success)
}

// string errmsg = 3;
inline void FriendAddRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void FriendAddRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddRsp.errmsg)
}
#if LANG_CXX11
inline void FriendAddRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddRsp.errmsg)
}
#endif
inline void FriendAddRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddRsp.errmsg)
}
inline void FriendAddRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddRsp.errmsg)
}
inline ::std::string* FriendAddRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddRsp.errmsg)
}

// string notify_event_id = 4;
inline void FriendAddRsp::clear_notify_event_id() {
  notify_event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddRsp::notify_event_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddRsp.notify_event_id)
  return notify_event_id_.GetNoArena();
}
inline void FriendAddRsp::set_notify_event_id(const ::std::string& value) {
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddRsp.notify_event_id)
}
#if LANG_CXX11
inline void FriendAddRsp::set_notify_event_id(::std::string&& value) {
  
  notify_event_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddRsp.notify_event_id)
}
#endif
inline void FriendAddRsp::set_notify_event_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddRsp.notify_event_id)
}
inline void FriendAddRsp::set_notify_event_id(const char* value, size_t size) {
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddRsp.notify_event_id)
}
inline ::std::string* FriendAddRsp::mutable_notify_event_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddRsp.notify_event_id)
  return notify_event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddRsp::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddRsp.notify_event_id)
  
  return notify_event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddRsp::set_allocated_notify_event_id(::std::string* notify_event_id) {
  if (notify_event_id != NULL) {
    
  } else {
    
  }
  notify_event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notify_event_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddRsp.notify_event_id)
}

// -------------------------------------------------------------------

// FriendAddProcessReq

// string request_id = 1;
inline void FriendAddProcessReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessReq.request_id)
  return request_id_.GetNoArena();
}
inline void FriendAddProcessReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessReq.request_id)
}
#if LANG_CXX11
inline void FriendAddProcessReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessReq.request_id)
}
#endif
inline void FriendAddProcessReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessReq.request_id)
}
inline void FriendAddProcessReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessReq.request_id)
}
inline ::std::string* FriendAddProcessReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessReq.request_id)
}

// string notify_event_id = 2;
inline void FriendAddProcessReq::clear_notify_event_id() {
  notify_event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessReq::notify_event_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessReq.notify_event_id)
  return notify_event_id_.GetNoArena();
}
inline void FriendAddProcessReq::set_notify_event_id(const ::std::string& value) {
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessReq.notify_event_id)
}
#if LANG_CXX11
inline void FriendAddProcessReq::set_notify_event_id(::std::string&& value) {
  
  notify_event_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessReq.notify_event_id)
}
#endif
inline void FriendAddProcessReq::set_notify_event_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessReq.notify_event_id)
}
inline void FriendAddProcessReq::set_notify_event_id(const char* value, size_t size) {
  
  notify_event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessReq.notify_event_id)
}
inline ::std::string* FriendAddProcessReq::mutable_notify_event_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessReq.notify_event_id)
  return notify_event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessReq::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessReq.notify_event_id)
  
  return notify_event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessReq::set_allocated_notify_event_id(::std::string* notify_event_id) {
  if (notify_event_id != NULL) {
    
  } else {
    
  }
  notify_event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notify_event_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessReq.notify_event_id)
}

// bool agree = 3;
inline void FriendAddProcessReq::clear_agree() {
  agree_ = false;
}
inline bool FriendAddProcessReq::agree() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessReq.agree)
  return agree_;
}
inline void FriendAddProcessReq::set_agree(bool value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessReq.agree)
}

// string apply_user_id = 4;
inline void FriendAddProcessReq::clear_apply_user_id() {
  apply_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessReq::apply_user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessReq.apply_user_id)
  return apply_user_id_.GetNoArena();
}
inline void FriendAddProcessReq::set_apply_user_id(const ::std::string& value) {
  
  apply_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessReq.apply_user_id)
}
#if LANG_CXX11
inline void FriendAddProcessReq::set_apply_user_id(::std::string&& value) {
  
  apply_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessReq.apply_user_id)
}
#endif
inline void FriendAddProcessReq::set_apply_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apply_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessReq.apply_user_id)
}
inline void FriendAddProcessReq::set_apply_user_id(const char* value, size_t size) {
  
  apply_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessReq.apply_user_id)
}
inline ::std::string* FriendAddProcessReq::mutable_apply_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessReq.apply_user_id)
  return apply_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessReq::release_apply_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessReq.apply_user_id)
  
  return apply_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessReq::set_allocated_apply_user_id(::std::string* apply_user_id) {
  if (apply_user_id != NULL) {
    
  } else {
    
  }
  apply_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apply_user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessReq.apply_user_id)
}

// string session_id = 5;
inline void FriendAddProcessReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessReq.session_id)
  return session_id_.GetNoArena();
}
inline void FriendAddProcessReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessReq.session_id)
}
#if LANG_CXX11
inline void FriendAddProcessReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessReq.session_id)
}
#endif
inline void FriendAddProcessReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessReq.session_id)
}
inline void FriendAddProcessReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessReq.session_id)
}
inline ::std::string* FriendAddProcessReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessReq.session_id)
}

// string user_id = 6;
inline void FriendAddProcessReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessReq.user_id)
  return user_id_.GetNoArena();
}
inline void FriendAddProcessReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessReq.user_id)
}
#if LANG_CXX11
inline void FriendAddProcessReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessReq.user_id)
}
#endif
inline void FriendAddProcessReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessReq.user_id)
}
inline void FriendAddProcessReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessReq.user_id)
}
inline ::std::string* FriendAddProcessReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessReq.user_id)
}

// -------------------------------------------------------------------

// FriendAddProcessRsp

// string request_id = 1;
inline void FriendAddProcessRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessRsp.request_id)
  return request_id_.GetNoArena();
}
inline void FriendAddProcessRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessRsp.request_id)
}
#if LANG_CXX11
inline void FriendAddProcessRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessRsp.request_id)
}
#endif
inline void FriendAddProcessRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessRsp.request_id)
}
inline void FriendAddProcessRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessRsp.request_id)
}
inline ::std::string* FriendAddProcessRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessRsp.request_id)
}

// bool success = 2;
inline void FriendAddProcessRsp::clear_success() {
  success_ = false;
}
inline bool FriendAddProcessRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessRsp.success)
  return success_;
}
inline void FriendAddProcessRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessRsp.success)
}

// string errmsg = 3;
inline void FriendAddProcessRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void FriendAddProcessRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessRsp.errmsg)
}
#if LANG_CXX11
inline void FriendAddProcessRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessRsp.errmsg)
}
#endif
inline void FriendAddProcessRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessRsp.errmsg)
}
inline void FriendAddProcessRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessRsp.errmsg)
}
inline ::std::string* FriendAddProcessRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessRsp.errmsg)
}

// string new_session_id = 4;
inline void FriendAddProcessRsp::clear_new_session_id() {
  new_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendAddProcessRsp::new_session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendAddProcessRsp.new_session_id)
  return new_session_id_.GetNoArena();
}
inline void FriendAddProcessRsp::set_new_session_id(const ::std::string& value) {
  
  new_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendAddProcessRsp.new_session_id)
}
#if LANG_CXX11
inline void FriendAddProcessRsp::set_new_session_id(::std::string&& value) {
  
  new_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendAddProcessRsp.new_session_id)
}
#endif
inline void FriendAddProcessRsp::set_new_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendAddProcessRsp.new_session_id)
}
inline void FriendAddProcessRsp::set_new_session_id(const char* value, size_t size) {
  
  new_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendAddProcessRsp.new_session_id)
}
inline ::std::string* FriendAddProcessRsp::mutable_new_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendAddProcessRsp.new_session_id)
  return new_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendAddProcessRsp::release_new_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendAddProcessRsp.new_session_id)
  
  return new_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendAddProcessRsp::set_allocated_new_session_id(::std::string* new_session_id) {
  if (new_session_id != NULL) {
    
  } else {
    
  }
  new_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendAddProcessRsp.new_session_id)
}

// -------------------------------------------------------------------

// GetPendingFriendEventListReq

// string request_id = 1;
inline void GetPendingFriendEventListReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPendingFriendEventListReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetPendingFriendEventListReq.request_id)
  return request_id_.GetNoArena();
}
inline void GetPendingFriendEventListReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetPendingFriendEventListReq.request_id)
}
#if LANG_CXX11
inline void GetPendingFriendEventListReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetPendingFriendEventListReq.request_id)
}
#endif
inline void GetPendingFriendEventListReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetPendingFriendEventListReq.request_id)
}
inline void GetPendingFriendEventListReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetPendingFriendEventListReq.request_id)
}
inline ::std::string* GetPendingFriendEventListReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetPendingFriendEventListReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPendingFriendEventListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetPendingFriendEventListReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPendingFriendEventListReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetPendingFriendEventListReq.request_id)
}

// string session_id = 2;
inline void GetPendingFriendEventListReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPendingFriendEventListReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetPendingFriendEventListReq.session_id)
  return session_id_.GetNoArena();
}
inline void GetPendingFriendEventListReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetPendingFriendEventListReq.session_id)
}
#if LANG_CXX11
inline void GetPendingFriendEventListReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetPendingFriendEventListReq.session_id)
}
#endif
inline void GetPendingFriendEventListReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetPendingFriendEventListReq.session_id)
}
inline void GetPendingFriendEventListReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetPendingFriendEventListReq.session_id)
}
inline ::std::string* GetPendingFriendEventListReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetPendingFriendEventListReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPendingFriendEventListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetPendingFriendEventListReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPendingFriendEventListReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetPendingFriendEventListReq.session_id)
}

// string user_id = 3;
inline void GetPendingFriendEventListReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPendingFriendEventListReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetPendingFriendEventListReq.user_id)
  return user_id_.GetNoArena();
}
inline void GetPendingFriendEventListReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetPendingFriendEventListReq.user_id)
}
#if LANG_CXX11
inline void GetPendingFriendEventListReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetPendingFriendEventListReq.user_id)
}
#endif
inline void GetPendingFriendEventListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetPendingFriendEventListReq.user_id)
}
inline void GetPendingFriendEventListReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetPendingFriendEventListReq.user_id)
}
inline ::std::string* GetPendingFriendEventListReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetPendingFriendEventListReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPendingFriendEventListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetPendingFriendEventListReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPendingFriendEventListReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetPendingFriendEventListReq.user_id)
}

// -------------------------------------------------------------------

// FriendEvent

// string event_id = 1;
inline void FriendEvent::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendEvent::event_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendEvent.event_id)
  return event_id_.GetNoArena();
}
inline void FriendEvent::set_event_id(const ::std::string& value) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendEvent.event_id)
}
#if LANG_CXX11
inline void FriendEvent::set_event_id(::std::string&& value) {
  
  event_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendEvent.event_id)
}
#endif
inline void FriendEvent::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendEvent.event_id)
}
inline void FriendEvent::set_event_id(const char* value, size_t size) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendEvent.event_id)
}
inline ::std::string* FriendEvent::mutable_event_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendEvent.event_id)
  return event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendEvent.event_id)
  
  return event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendEvent::set_allocated_event_id(::std::string* event_id) {
  if (event_id != NULL) {
    
  } else {
    
  }
  event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendEvent.event_id)
}

// .chen_im.UserInfo sender = 3;
inline bool FriendEvent::has_sender() const {
  return this != internal_default_instance() && sender_ != NULL;
}
inline const ::chen_im::UserInfo& FriendEvent::_internal_sender() const {
  return *sender_;
}
inline const ::chen_im::UserInfo& FriendEvent::sender() const {
  const ::chen_im::UserInfo* p = sender_;
  // @@protoc_insertion_point(field_get:chen_im.FriendEvent.sender)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::UserInfo*>(
      &::chen_im::_UserInfo_default_instance_);
}
inline ::chen_im::UserInfo* FriendEvent::release_sender() {
  // @@protoc_insertion_point(field_release:chen_im.FriendEvent.sender)
  
  ::chen_im::UserInfo* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline ::chen_im::UserInfo* FriendEvent::mutable_sender() {
  
  if (sender_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::UserInfo>(GetArenaNoVirtual());
    sender_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.FriendEvent.sender)
  return sender_;
}
inline void FriendEvent::set_allocated_sender(::chen_im::UserInfo* sender) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sender_);
  }
  if (sender) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sender = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendEvent.sender)
}

// -------------------------------------------------------------------

// GetPendingFriendEventListRsp

// string request_id = 1;
inline void GetPendingFriendEventListRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPendingFriendEventListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetPendingFriendEventListRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetPendingFriendEventListRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetPendingFriendEventListRsp.request_id)
}
#if LANG_CXX11
inline void GetPendingFriendEventListRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetPendingFriendEventListRsp.request_id)
}
#endif
inline void GetPendingFriendEventListRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetPendingFriendEventListRsp.request_id)
}
inline void GetPendingFriendEventListRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetPendingFriendEventListRsp.request_id)
}
inline ::std::string* GetPendingFriendEventListRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetPendingFriendEventListRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPendingFriendEventListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetPendingFriendEventListRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPendingFriendEventListRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetPendingFriendEventListRsp.request_id)
}

// bool success = 2;
inline void GetPendingFriendEventListRsp::clear_success() {
  success_ = false;
}
inline bool GetPendingFriendEventListRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetPendingFriendEventListRsp.success)
  return success_;
}
inline void GetPendingFriendEventListRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetPendingFriendEventListRsp.success)
}

// string errmsg = 3;
inline void GetPendingFriendEventListRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPendingFriendEventListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetPendingFriendEventListRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetPendingFriendEventListRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetPendingFriendEventListRsp.errmsg)
}
#if LANG_CXX11
inline void GetPendingFriendEventListRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetPendingFriendEventListRsp.errmsg)
}
#endif
inline void GetPendingFriendEventListRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetPendingFriendEventListRsp.errmsg)
}
inline void GetPendingFriendEventListRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetPendingFriendEventListRsp.errmsg)
}
inline ::std::string* GetPendingFriendEventListRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetPendingFriendEventListRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPendingFriendEventListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetPendingFriendEventListRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPendingFriendEventListRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetPendingFriendEventListRsp.errmsg)
}

// repeated .chen_im.FriendEvent event = 4;
inline int GetPendingFriendEventListRsp::event_size() const {
  return event_.size();
}
inline void GetPendingFriendEventListRsp::clear_event() {
  event_.Clear();
}
inline ::chen_im::FriendEvent* GetPendingFriendEventListRsp::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.GetPendingFriendEventListRsp.event)
  return event_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chen_im::FriendEvent >*
GetPendingFriendEventListRsp::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.GetPendingFriendEventListRsp.event)
  return &event_;
}
inline const ::chen_im::FriendEvent& GetPendingFriendEventListRsp::event(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.GetPendingFriendEventListRsp.event)
  return event_.Get(index);
}
inline ::chen_im::FriendEvent* GetPendingFriendEventListRsp::add_event() {
  // @@protoc_insertion_point(field_add:chen_im.GetPendingFriendEventListRsp.event)
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chen_im::FriendEvent >&
GetPendingFriendEventListRsp::event() const {
  // @@protoc_insertion_point(field_list:chen_im.GetPendingFriendEventListRsp.event)
  return event_;
}

// -------------------------------------------------------------------

// FriendSearchReq

// string request_id = 1;
inline void FriendSearchReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSearchReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchReq.request_id)
  return request_id_.GetNoArena();
}
inline void FriendSearchReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendSearchReq.request_id)
}
#if LANG_CXX11
inline void FriendSearchReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendSearchReq.request_id)
}
#endif
inline void FriendSearchReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendSearchReq.request_id)
}
inline void FriendSearchReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendSearchReq.request_id)
}
inline ::std::string* FriendSearchReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendSearchReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSearchReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendSearchReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSearchReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendSearchReq.request_id)
}

// string search_key = 2;
inline void FriendSearchReq::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSearchReq::search_key() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchReq.search_key)
  return search_key_.GetNoArena();
}
inline void FriendSearchReq::set_search_key(const ::std::string& value) {
  
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendSearchReq.search_key)
}
#if LANG_CXX11
inline void FriendSearchReq::set_search_key(::std::string&& value) {
  
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendSearchReq.search_key)
}
#endif
inline void FriendSearchReq::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendSearchReq.search_key)
}
inline void FriendSearchReq::set_search_key(const char* value, size_t size) {
  
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendSearchReq.search_key)
}
inline ::std::string* FriendSearchReq::mutable_search_key() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendSearchReq.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSearchReq::release_search_key() {
  // @@protoc_insertion_point(field_release:chen_im.FriendSearchReq.search_key)
  
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSearchReq::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    
  } else {
    
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendSearchReq.search_key)
}

// string session_id = 3;
inline void FriendSearchReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSearchReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchReq.session_id)
  return session_id_.GetNoArena();
}
inline void FriendSearchReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendSearchReq.session_id)
}
#if LANG_CXX11
inline void FriendSearchReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendSearchReq.session_id)
}
#endif
inline void FriendSearchReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendSearchReq.session_id)
}
inline void FriendSearchReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendSearchReq.session_id)
}
inline ::std::string* FriendSearchReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendSearchReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSearchReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendSearchReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSearchReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendSearchReq.session_id)
}

// string user_id = 4;
inline void FriendSearchReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSearchReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchReq.user_id)
  return user_id_.GetNoArena();
}
inline void FriendSearchReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendSearchReq.user_id)
}
#if LANG_CXX11
inline void FriendSearchReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendSearchReq.user_id)
}
#endif
inline void FriendSearchReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendSearchReq.user_id)
}
inline void FriendSearchReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendSearchReq.user_id)
}
inline ::std::string* FriendSearchReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendSearchReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSearchReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendSearchReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSearchReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendSearchReq.user_id)
}

// -------------------------------------------------------------------

// FriendSearchRsp

// string request_id = 1;
inline void FriendSearchRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSearchRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchRsp.request_id)
  return request_id_.GetNoArena();
}
inline void FriendSearchRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendSearchRsp.request_id)
}
#if LANG_CXX11
inline void FriendSearchRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendSearchRsp.request_id)
}
#endif
inline void FriendSearchRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendSearchRsp.request_id)
}
inline void FriendSearchRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendSearchRsp.request_id)
}
inline ::std::string* FriendSearchRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendSearchRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSearchRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.FriendSearchRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSearchRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendSearchRsp.request_id)
}

// bool success = 2;
inline void FriendSearchRsp::clear_success() {
  success_ = false;
}
inline bool FriendSearchRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchRsp.success)
  return success_;
}
inline void FriendSearchRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.FriendSearchRsp.success)
}

// string errmsg = 3;
inline void FriendSearchRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSearchRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void FriendSearchRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FriendSearchRsp.errmsg)
}
#if LANG_CXX11
inline void FriendSearchRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FriendSearchRsp.errmsg)
}
#endif
inline void FriendSearchRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FriendSearchRsp.errmsg)
}
inline void FriendSearchRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FriendSearchRsp.errmsg)
}
inline ::std::string* FriendSearchRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FriendSearchRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSearchRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.FriendSearchRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSearchRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FriendSearchRsp.errmsg)
}

// repeated .chen_im.UserInfo user_info = 4;
inline int FriendSearchRsp::user_info_size() const {
  return user_info_.size();
}
inline ::chen_im::UserInfo* FriendSearchRsp::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.FriendSearchRsp.user_info)
  return user_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >*
FriendSearchRsp::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.FriendSearchRsp.user_info)
  return &user_info_;
}
inline const ::chen_im::UserInfo& FriendSearchRsp::user_info(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.FriendSearchRsp.user_info)
  return user_info_.Get(index);
}
inline ::chen_im::UserInfo* FriendSearchRsp::add_user_info() {
  // @@protoc_insertion_point(field_add:chen_im.FriendSearchRsp.user_info)
  return user_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >&
FriendSearchRsp::user_info() const {
  // @@protoc_insertion_point(field_list:chen_im.FriendSearchRsp.user_info)
  return user_info_;
}

// -------------------------------------------------------------------

// GetChatSessionListReq

// string request_id = 1;
inline void GetChatSessionListReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionListReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionListReq.request_id)
  return request_id_.GetNoArena();
}
inline void GetChatSessionListReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionListReq.request_id)
}
#if LANG_CXX11
inline void GetChatSessionListReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionListReq.request_id)
}
#endif
inline void GetChatSessionListReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionListReq.request_id)
}
inline void GetChatSessionListReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionListReq.request_id)
}
inline ::std::string* GetChatSessionListReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionListReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionListReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionListReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionListReq.request_id)
}

// string session_id = 2;
inline void GetChatSessionListReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionListReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionListReq.session_id)
  return session_id_.GetNoArena();
}
inline void GetChatSessionListReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionListReq.session_id)
}
#if LANG_CXX11
inline void GetChatSessionListReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionListReq.session_id)
}
#endif
inline void GetChatSessionListReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionListReq.session_id)
}
inline void GetChatSessionListReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionListReq.session_id)
}
inline ::std::string* GetChatSessionListReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionListReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionListReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionListReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionListReq.session_id)
}

// string user_id = 3;
inline void GetChatSessionListReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionListReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionListReq.user_id)
  return user_id_.GetNoArena();
}
inline void GetChatSessionListReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionListReq.user_id)
}
#if LANG_CXX11
inline void GetChatSessionListReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionListReq.user_id)
}
#endif
inline void GetChatSessionListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionListReq.user_id)
}
inline void GetChatSessionListReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionListReq.user_id)
}
inline ::std::string* GetChatSessionListReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionListReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionListReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionListReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionListReq.user_id)
}

// -------------------------------------------------------------------

// GetChatSessionListRsp

// string request_id = 1;
inline void GetChatSessionListRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionListRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetChatSessionListRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionListRsp.request_id)
}
#if LANG_CXX11
inline void GetChatSessionListRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionListRsp.request_id)
}
#endif
inline void GetChatSessionListRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionListRsp.request_id)
}
inline void GetChatSessionListRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionListRsp.request_id)
}
inline ::std::string* GetChatSessionListRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionListRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionListRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionListRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionListRsp.request_id)
}

// bool success = 2;
inline void GetChatSessionListRsp::clear_success() {
  success_ = false;
}
inline bool GetChatSessionListRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionListRsp.success)
  return success_;
}
inline void GetChatSessionListRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionListRsp.success)
}

// string errmsg = 3;
inline void GetChatSessionListRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionListRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetChatSessionListRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionListRsp.errmsg)
}
#if LANG_CXX11
inline void GetChatSessionListRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionListRsp.errmsg)
}
#endif
inline void GetChatSessionListRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionListRsp.errmsg)
}
inline void GetChatSessionListRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionListRsp.errmsg)
}
inline ::std::string* GetChatSessionListRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionListRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionListRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionListRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionListRsp.errmsg)
}

// repeated .chen_im.ChatSessionInfo chat_session_info_list = 4;
inline int GetChatSessionListRsp::chat_session_info_list_size() const {
  return chat_session_info_list_.size();
}
inline ::chen_im::ChatSessionInfo* GetChatSessionListRsp::mutable_chat_session_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionListRsp.chat_session_info_list)
  return chat_session_info_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chen_im::ChatSessionInfo >*
GetChatSessionListRsp::mutable_chat_session_info_list() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.GetChatSessionListRsp.chat_session_info_list)
  return &chat_session_info_list_;
}
inline const ::chen_im::ChatSessionInfo& GetChatSessionListRsp::chat_session_info_list(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionListRsp.chat_session_info_list)
  return chat_session_info_list_.Get(index);
}
inline ::chen_im::ChatSessionInfo* GetChatSessionListRsp::add_chat_session_info_list() {
  // @@protoc_insertion_point(field_add:chen_im.GetChatSessionListRsp.chat_session_info_list)
  return chat_session_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chen_im::ChatSessionInfo >&
GetChatSessionListRsp::chat_session_info_list() const {
  // @@protoc_insertion_point(field_list:chen_im.GetChatSessionListRsp.chat_session_info_list)
  return chat_session_info_list_;
}

// -------------------------------------------------------------------

// ChatSessionCreateReq

// string request_id = 1;
inline void ChatSessionCreateReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionCreateReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateReq.request_id)
  return request_id_.GetNoArena();
}
inline void ChatSessionCreateReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateReq.request_id)
}
#if LANG_CXX11
inline void ChatSessionCreateReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionCreateReq.request_id)
}
#endif
inline void ChatSessionCreateReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionCreateReq.request_id)
}
inline void ChatSessionCreateReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionCreateReq.request_id)
}
inline ::std::string* ChatSessionCreateReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionCreateReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionCreateReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionCreateReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionCreateReq.request_id)
}

// string session_id = 2;
inline void ChatSessionCreateReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionCreateReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateReq.session_id)
  return session_id_.GetNoArena();
}
inline void ChatSessionCreateReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateReq.session_id)
}
#if LANG_CXX11
inline void ChatSessionCreateReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionCreateReq.session_id)
}
#endif
inline void ChatSessionCreateReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionCreateReq.session_id)
}
inline void ChatSessionCreateReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionCreateReq.session_id)
}
inline ::std::string* ChatSessionCreateReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionCreateReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionCreateReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionCreateReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionCreateReq.session_id)
}

// string user_id = 3;
inline void ChatSessionCreateReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateReq.user_id)
  return user_id_.GetNoArena();
}
inline void ChatSessionCreateReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateReq.user_id)
}
#if LANG_CXX11
inline void ChatSessionCreateReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionCreateReq.user_id)
}
#endif
inline void ChatSessionCreateReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionCreateReq.user_id)
}
inline void ChatSessionCreateReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionCreateReq.user_id)
}
inline ::std::string* ChatSessionCreateReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionCreateReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionCreateReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionCreateReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionCreateReq.user_id)
}

// string chat_session_name = 4;
inline void ChatSessionCreateReq::clear_chat_session_name() {
  chat_session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionCreateReq::chat_session_name() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateReq.chat_session_name)
  return chat_session_name_.GetNoArena();
}
inline void ChatSessionCreateReq::set_chat_session_name(const ::std::string& value) {
  
  chat_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateReq.chat_session_name)
}
#if LANG_CXX11
inline void ChatSessionCreateReq::set_chat_session_name(::std::string&& value) {
  
  chat_session_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionCreateReq.chat_session_name)
}
#endif
inline void ChatSessionCreateReq::set_chat_session_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionCreateReq.chat_session_name)
}
inline void ChatSessionCreateReq::set_chat_session_name(const char* value, size_t size) {
  
  chat_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionCreateReq.chat_session_name)
}
inline ::std::string* ChatSessionCreateReq::mutable_chat_session_name() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateReq.chat_session_name)
  return chat_session_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionCreateReq::release_chat_session_name() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionCreateReq.chat_session_name)
  
  return chat_session_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionCreateReq::set_allocated_chat_session_name(::std::string* chat_session_name) {
  if (chat_session_name != NULL) {
    
  } else {
    
  }
  chat_session_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_session_name);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionCreateReq.chat_session_name)
}

// repeated string member_id_list = 5;
inline int ChatSessionCreateReq::member_id_list_size() const {
  return member_id_list_.size();
}
inline void ChatSessionCreateReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline const ::std::string& ChatSessionCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateReq.member_id_list)
  return member_id_list_.Get(index);
}
inline ::std::string* ChatSessionCreateReq::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateReq.member_id_list)
  return member_id_list_.Mutable(index);
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateReq.member_id_list)
  member_id_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChatSessionCreateReq::set_member_id_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateReq.member_id_list)
  member_id_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChatSessionCreateReq::set_member_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const char* value, size_t size) {
  member_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionCreateReq.member_id_list)
}
inline ::std::string* ChatSessionCreateReq::add_member_id_list() {
  // @@protoc_insertion_point(field_add_mutable:chen_im.ChatSessionCreateReq.member_id_list)
  return member_id_list_.Add();
}
inline void ChatSessionCreateReq::add_member_id_list(const ::std::string& value) {
  member_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chen_im.ChatSessionCreateReq.member_id_list)
}
#if LANG_CXX11
inline void ChatSessionCreateReq::add_member_id_list(::std::string&& value) {
  member_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chen_im.ChatSessionCreateReq.member_id_list)
}
#endif
inline void ChatSessionCreateReq::add_member_id_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chen_im.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::add_member_id_list(const char* value, size_t size) {
  member_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chen_im.ChatSessionCreateReq.member_id_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatSessionCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:chen_im.ChatSessionCreateReq.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatSessionCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.ChatSessionCreateReq.member_id_list)
  return &member_id_list_;
}

// -------------------------------------------------------------------

// ChatSessionCreateRsp

// string request_id = 1;
inline void ChatSessionCreateRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionCreateRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateRsp.request_id)
  return request_id_.GetNoArena();
}
inline void ChatSessionCreateRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateRsp.request_id)
}
#if LANG_CXX11
inline void ChatSessionCreateRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionCreateRsp.request_id)
}
#endif
inline void ChatSessionCreateRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionCreateRsp.request_id)
}
inline void ChatSessionCreateRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionCreateRsp.request_id)
}
inline ::std::string* ChatSessionCreateRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionCreateRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionCreateRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionCreateRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionCreateRsp.request_id)
}

// bool success = 2;
inline void ChatSessionCreateRsp::clear_success() {
  success_ = false;
}
inline bool ChatSessionCreateRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateRsp.success)
  return success_;
}
inline void ChatSessionCreateRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateRsp.success)
}

// string errmsg = 3;
inline void ChatSessionCreateRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionCreateRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void ChatSessionCreateRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionCreateRsp.errmsg)
}
#if LANG_CXX11
inline void ChatSessionCreateRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionCreateRsp.errmsg)
}
#endif
inline void ChatSessionCreateRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionCreateRsp.errmsg)
}
inline void ChatSessionCreateRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionCreateRsp.errmsg)
}
inline ::std::string* ChatSessionCreateRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionCreateRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionCreateRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionCreateRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionCreateRsp.errmsg)
}

// .chen_im.ChatSessionInfo chat_session_info = 4;
inline bool ChatSessionCreateRsp::has_chat_session_info() const {
  return this != internal_default_instance() && chat_session_info_ != NULL;
}
inline const ::chen_im::ChatSessionInfo& ChatSessionCreateRsp::_internal_chat_session_info() const {
  return *chat_session_info_;
}
inline const ::chen_im::ChatSessionInfo& ChatSessionCreateRsp::chat_session_info() const {
  const ::chen_im::ChatSessionInfo* p = chat_session_info_;
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionCreateRsp.chat_session_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::ChatSessionInfo*>(
      &::chen_im::_ChatSessionInfo_default_instance_);
}
inline ::chen_im::ChatSessionInfo* ChatSessionCreateRsp::release_chat_session_info() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionCreateRsp.chat_session_info)
  
  ::chen_im::ChatSessionInfo* temp = chat_session_info_;
  chat_session_info_ = NULL;
  return temp;
}
inline ::chen_im::ChatSessionInfo* ChatSessionCreateRsp::mutable_chat_session_info() {
  
  if (chat_session_info_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::ChatSessionInfo>(GetArenaNoVirtual());
    chat_session_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionCreateRsp.chat_session_info)
  return chat_session_info_;
}
inline void ChatSessionCreateRsp::set_allocated_chat_session_info(::chen_im::ChatSessionInfo* chat_session_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chat_session_info_);
  }
  if (chat_session_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chat_session_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chat_session_info, submessage_arena);
    }
    
  } else {
    
  }
  chat_session_info_ = chat_session_info;
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionCreateRsp.chat_session_info)
}

// -------------------------------------------------------------------

// GetChatSessionMemberReq

// string request_id = 1;
inline void GetChatSessionMemberReq::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionMemberReq::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberReq.request_id)
  return request_id_.GetNoArena();
}
inline void GetChatSessionMemberReq::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionMemberReq.request_id)
}
#if LANG_CXX11
inline void GetChatSessionMemberReq::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionMemberReq.request_id)
}
#endif
inline void GetChatSessionMemberReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionMemberReq.request_id)
}
inline void GetChatSessionMemberReq::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionMemberReq.request_id)
}
inline ::std::string* GetChatSessionMemberReq::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionMemberReq.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionMemberReq::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionMemberReq.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionMemberReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionMemberReq.request_id)
}

// string session_id = 2;
inline void GetChatSessionMemberReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionMemberReq::session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberReq.session_id)
  return session_id_.GetNoArena();
}
inline void GetChatSessionMemberReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionMemberReq.session_id)
}
#if LANG_CXX11
inline void GetChatSessionMemberReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionMemberReq.session_id)
}
#endif
inline void GetChatSessionMemberReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionMemberReq.session_id)
}
inline void GetChatSessionMemberReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionMemberReq.session_id)
}
inline ::std::string* GetChatSessionMemberReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionMemberReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionMemberReq::release_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionMemberReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionMemberReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionMemberReq.session_id)
}

// string user_id = 3;
inline void GetChatSessionMemberReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberReq.user_id)
  return user_id_.GetNoArena();
}
inline void GetChatSessionMemberReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionMemberReq.user_id)
}
#if LANG_CXX11
inline void GetChatSessionMemberReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionMemberReq.user_id)
}
#endif
inline void GetChatSessionMemberReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionMemberReq.user_id)
}
inline void GetChatSessionMemberReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionMemberReq.user_id)
}
inline ::std::string* GetChatSessionMemberReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionMemberReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionMemberReq::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionMemberReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionMemberReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionMemberReq.user_id)
}

// string chat_session_id = 4;
inline void GetChatSessionMemberReq::clear_chat_session_id() {
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionMemberReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberReq.chat_session_id)
  return chat_session_id_.GetNoArena();
}
inline void GetChatSessionMemberReq::set_chat_session_id(const ::std::string& value) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionMemberReq.chat_session_id)
}
#if LANG_CXX11
inline void GetChatSessionMemberReq::set_chat_session_id(::std::string&& value) {
  
  chat_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionMemberReq.chat_session_id)
}
#endif
inline void GetChatSessionMemberReq::set_chat_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionMemberReq.chat_session_id)
}
inline void GetChatSessionMemberReq::set_chat_session_id(const char* value, size_t size) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionMemberReq.chat_session_id)
}
inline ::std::string* GetChatSessionMemberReq::mutable_chat_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionMemberReq.chat_session_id)
  return chat_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionMemberReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionMemberReq.chat_session_id)
  
  return chat_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionMemberReq::set_allocated_chat_session_id(::std::string* chat_session_id) {
  if (chat_session_id != NULL) {
    
  } else {
    
  }
  chat_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionMemberReq.chat_session_id)
}

// -------------------------------------------------------------------

// GetChatSessionMemberRsp

// string request_id = 1;
inline void GetChatSessionMemberRsp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionMemberRsp::request_id() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberRsp.request_id)
  return request_id_.GetNoArena();
}
inline void GetChatSessionMemberRsp::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionMemberRsp.request_id)
}
#if LANG_CXX11
inline void GetChatSessionMemberRsp::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionMemberRsp.request_id)
}
#endif
inline void GetChatSessionMemberRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionMemberRsp.request_id)
}
inline void GetChatSessionMemberRsp::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionMemberRsp.request_id)
}
inline ::std::string* GetChatSessionMemberRsp::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionMemberRsp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionMemberRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionMemberRsp.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionMemberRsp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionMemberRsp.request_id)
}

// bool success = 2;
inline void GetChatSessionMemberRsp::clear_success() {
  success_ = false;
}
inline bool GetChatSessionMemberRsp::success() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberRsp.success)
  return success_;
}
inline void GetChatSessionMemberRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionMemberRsp.success)
}

// string errmsg = 3;
inline void GetChatSessionMemberRsp::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChatSessionMemberRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberRsp.errmsg)
  return errmsg_.GetNoArena();
}
inline void GetChatSessionMemberRsp::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.GetChatSessionMemberRsp.errmsg)
}
#if LANG_CXX11
inline void GetChatSessionMemberRsp::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.GetChatSessionMemberRsp.errmsg)
}
#endif
inline void GetChatSessionMemberRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.GetChatSessionMemberRsp.errmsg)
}
inline void GetChatSessionMemberRsp::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.GetChatSessionMemberRsp.errmsg)
}
inline ::std::string* GetChatSessionMemberRsp::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionMemberRsp.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatSessionMemberRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:chen_im.GetChatSessionMemberRsp.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatSessionMemberRsp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chen_im.GetChatSessionMemberRsp.errmsg)
}

// repeated .chen_im.UserInfo member_info_list = 4;
inline int GetChatSessionMemberRsp::member_info_list_size() const {
  return member_info_list_.size();
}
inline ::chen_im::UserInfo* GetChatSessionMemberRsp::mutable_member_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:chen_im.GetChatSessionMemberRsp.member_info_list)
  return member_info_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >*
GetChatSessionMemberRsp::mutable_member_info_list() {
  // @@protoc_insertion_point(field_mutable_list:chen_im.GetChatSessionMemberRsp.member_info_list)
  return &member_info_list_;
}
inline const ::chen_im::UserInfo& GetChatSessionMemberRsp::member_info_list(int index) const {
  // @@protoc_insertion_point(field_get:chen_im.GetChatSessionMemberRsp.member_info_list)
  return member_info_list_.Get(index);
}
inline ::chen_im::UserInfo* GetChatSessionMemberRsp::add_member_info_list() {
  // @@protoc_insertion_point(field_add:chen_im.GetChatSessionMemberRsp.member_info_list)
  return member_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chen_im::UserInfo >&
GetChatSessionMemberRsp::member_info_list() const {
  // @@protoc_insertion_point(field_list:chen_im.GetChatSessionMemberRsp.member_info_list)
  return member_info_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chen_im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_friend_2eproto
