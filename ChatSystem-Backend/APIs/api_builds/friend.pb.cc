// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_base_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChatSessionInfo;
}  // namespace protobuf_base_2eproto
namespace protobuf_friend_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_friend_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FriendEvent;
}  // namespace protobuf_friend_2eproto
namespace chen_im {
class GetFriendListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFriendListReq>
      _instance;
} _GetFriendListReq_default_instance_;
class GetFriendListRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFriendListRsp>
      _instance;
} _GetFriendListRsp_default_instance_;
class FriendRemoveReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendRemoveReq>
      _instance;
} _FriendRemoveReq_default_instance_;
class FriendRemoveRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendRemoveRsp>
      _instance;
} _FriendRemoveRsp_default_instance_;
class FriendAddReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendAddReq>
      _instance;
} _FriendAddReq_default_instance_;
class FriendAddRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendAddRsp>
      _instance;
} _FriendAddRsp_default_instance_;
class FriendAddProcessReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendAddProcessReq>
      _instance;
} _FriendAddProcessReq_default_instance_;
class FriendAddProcessRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendAddProcessRsp>
      _instance;
} _FriendAddProcessRsp_default_instance_;
class GetPendingFriendEventListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPendingFriendEventListReq>
      _instance;
} _GetPendingFriendEventListReq_default_instance_;
class FriendEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendEvent>
      _instance;
} _FriendEvent_default_instance_;
class GetPendingFriendEventListRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPendingFriendEventListRsp>
      _instance;
} _GetPendingFriendEventListRsp_default_instance_;
class FriendSearchReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendSearchReq>
      _instance;
} _FriendSearchReq_default_instance_;
class FriendSearchRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendSearchRsp>
      _instance;
} _FriendSearchRsp_default_instance_;
class GetChatSessionListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetChatSessionListReq>
      _instance;
} _GetChatSessionListReq_default_instance_;
class GetChatSessionListRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetChatSessionListRsp>
      _instance;
} _GetChatSessionListRsp_default_instance_;
class ChatSessionCreateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatSessionCreateReq>
      _instance;
} _ChatSessionCreateReq_default_instance_;
class ChatSessionCreateRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatSessionCreateRsp>
      _instance;
} _ChatSessionCreateRsp_default_instance_;
class GetChatSessionMemberReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetChatSessionMemberReq>
      _instance;
} _GetChatSessionMemberReq_default_instance_;
class GetChatSessionMemberRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetChatSessionMemberRsp>
      _instance;
} _GetChatSessionMemberRsp_default_instance_;
}  // namespace chen_im
namespace protobuf_friend_2eproto {
static void InitDefaultsGetFriendListReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetFriendListReq_default_instance_;
    new (ptr) ::chen_im::GetFriendListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetFriendListReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetFriendListReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetFriendListReq}, {}};

static void InitDefaultsGetFriendListRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetFriendListRsp_default_instance_;
    new (ptr) ::chen_im::GetFriendListRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetFriendListRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetFriendListRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetFriendListRsp}, {
      &protobuf_base_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsFriendRemoveReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendRemoveReq_default_instance_;
    new (ptr) ::chen_im::FriendRemoveReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendRemoveReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendRemoveReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendRemoveReq}, {}};

static void InitDefaultsFriendRemoveRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendRemoveRsp_default_instance_;
    new (ptr) ::chen_im::FriendRemoveRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendRemoveRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendRemoveRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendRemoveRsp}, {}};

static void InitDefaultsFriendAddReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendAddReq_default_instance_;
    new (ptr) ::chen_im::FriendAddReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendAddReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendAddReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendAddReq}, {}};

static void InitDefaultsFriendAddRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendAddRsp_default_instance_;
    new (ptr) ::chen_im::FriendAddRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendAddRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendAddRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendAddRsp}, {}};

static void InitDefaultsFriendAddProcessReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendAddProcessReq_default_instance_;
    new (ptr) ::chen_im::FriendAddProcessReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendAddProcessReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendAddProcessReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendAddProcessReq}, {}};

static void InitDefaultsFriendAddProcessRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendAddProcessRsp_default_instance_;
    new (ptr) ::chen_im::FriendAddProcessRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendAddProcessRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendAddProcessRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendAddProcessRsp}, {}};

static void InitDefaultsGetPendingFriendEventListReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetPendingFriendEventListReq_default_instance_;
    new (ptr) ::chen_im::GetPendingFriendEventListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetPendingFriendEventListReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetPendingFriendEventListReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetPendingFriendEventListReq}, {}};

static void InitDefaultsFriendEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendEvent_default_instance_;
    new (ptr) ::chen_im::FriendEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FriendEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFriendEvent}, {
      &protobuf_base_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsGetPendingFriendEventListRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetPendingFriendEventListRsp_default_instance_;
    new (ptr) ::chen_im::GetPendingFriendEventListRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetPendingFriendEventListRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetPendingFriendEventListRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetPendingFriendEventListRsp}, {
      &protobuf_friend_2eproto::scc_info_FriendEvent.base,}};

static void InitDefaultsFriendSearchReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendSearchReq_default_instance_;
    new (ptr) ::chen_im::FriendSearchReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendSearchReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendSearchReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendSearchReq}, {}};

static void InitDefaultsFriendSearchRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FriendSearchRsp_default_instance_;
    new (ptr) ::chen_im::FriendSearchRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FriendSearchRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FriendSearchRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFriendSearchRsp}, {
      &protobuf_base_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsGetChatSessionListReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetChatSessionListReq_default_instance_;
    new (ptr) ::chen_im::GetChatSessionListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetChatSessionListReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetChatSessionListReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetChatSessionListReq}, {}};

static void InitDefaultsGetChatSessionListRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetChatSessionListRsp_default_instance_;
    new (ptr) ::chen_im::GetChatSessionListRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetChatSessionListRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetChatSessionListRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetChatSessionListRsp}, {
      &protobuf_base_2eproto::scc_info_ChatSessionInfo.base,}};

static void InitDefaultsChatSessionCreateReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_ChatSessionCreateReq_default_instance_;
    new (ptr) ::chen_im::ChatSessionCreateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::ChatSessionCreateReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatSessionCreateReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatSessionCreateReq}, {}};

static void InitDefaultsChatSessionCreateRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_ChatSessionCreateRsp_default_instance_;
    new (ptr) ::chen_im::ChatSessionCreateRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::ChatSessionCreateRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChatSessionCreateRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChatSessionCreateRsp}, {
      &protobuf_base_2eproto::scc_info_ChatSessionInfo.base,}};

static void InitDefaultsGetChatSessionMemberReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetChatSessionMemberReq_default_instance_;
    new (ptr) ::chen_im::GetChatSessionMemberReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetChatSessionMemberReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetChatSessionMemberReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetChatSessionMemberReq}, {}};

static void InitDefaultsGetChatSessionMemberRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetChatSessionMemberRsp_default_instance_;
    new (ptr) ::chen_im::GetChatSessionMemberRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetChatSessionMemberRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetChatSessionMemberRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetChatSessionMemberRsp}, {
      &protobuf_base_2eproto::scc_info_UserInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetFriendListReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetFriendListRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendRemoveReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendRemoveRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendAddReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendAddRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendAddProcessReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendAddProcessRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPendingFriendEventListReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPendingFriendEventListRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendSearchReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendSearchRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetChatSessionListReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetChatSessionListRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatSessionCreateReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatSessionCreateRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetChatSessionMemberReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetChatSessionMemberRsp.base);
}

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListReq, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetFriendListRsp, friend_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveReq, peer_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendRemoveRsp, errmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddReq, respondent_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddRsp, notify_event_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessReq, notify_event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessReq, agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessReq, apply_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessReq, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendAddProcessRsp, new_session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListReq, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendEvent, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendEvent, sender_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetPendingFriendEventListRsp, event_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchReq, search_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchReq, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FriendSearchRsp, user_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListReq, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionListRsp, chat_session_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateReq, chat_session_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateReq, member_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionCreateRsp, chat_session_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberReq, chat_session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetChatSessionMemberRsp, member_info_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chen_im::GetFriendListReq)},
  { 8, -1, sizeof(::chen_im::GetFriendListRsp)},
  { 17, -1, sizeof(::chen_im::FriendRemoveReq)},
  { 26, -1, sizeof(::chen_im::FriendRemoveRsp)},
  { 34, -1, sizeof(::chen_im::FriendAddReq)},
  { 43, -1, sizeof(::chen_im::FriendAddRsp)},
  { 52, -1, sizeof(::chen_im::FriendAddProcessReq)},
  { 63, -1, sizeof(::chen_im::FriendAddProcessRsp)},
  { 72, -1, sizeof(::chen_im::GetPendingFriendEventListReq)},
  { 80, -1, sizeof(::chen_im::FriendEvent)},
  { 87, -1, sizeof(::chen_im::GetPendingFriendEventListRsp)},
  { 96, -1, sizeof(::chen_im::FriendSearchReq)},
  { 105, -1, sizeof(::chen_im::FriendSearchRsp)},
  { 114, -1, sizeof(::chen_im::GetChatSessionListReq)},
  { 122, -1, sizeof(::chen_im::GetChatSessionListRsp)},
  { 131, -1, sizeof(::chen_im::ChatSessionCreateReq)},
  { 141, -1, sizeof(::chen_im::ChatSessionCreateRsp)},
  { 150, -1, sizeof(::chen_im::GetChatSessionMemberReq)},
  { 159, -1, sizeof(::chen_im::GetChatSessionMemberRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetFriendListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetFriendListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendRemoveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendRemoveRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendAddReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendAddRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendAddProcessReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendAddProcessRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetPendingFriendEventListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetPendingFriendEventListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendSearchReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FriendSearchRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetChatSessionListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetChatSessionListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_ChatSessionCreateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_ChatSessionCreateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetChatSessionMemberReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetChatSessionMemberRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "friend.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014friend.proto\022\007chen_im\032\nbase.proto\"K\n\020G"
      "etFriendListReq\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007u"
      "ser_id\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t\"o\n\020GetF"
      "riendListRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007succ"
      "ess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022&\n\013friend_list"
      "\030\004 \003(\0132\021.chen_im.UserInfo\"[\n\017FriendRemov"
      "eReq\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001("
      "\t\022\022\n\nsession_id\030\003 \001(\t\022\017\n\007peer_id\030\004 \001(\t\"F"
      "\n\017FriendRemoveRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n"
      "\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\"^\n\014Friend"
      "AddReq\022\022\n\nrequest_id\030\001 \001(\t\022\022\n\nsession_id"
      "\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022\025\n\rrespondent_id"
      "\030\004 \001(\t\"\\\n\014FriendAddRsp\022\022\n\nrequest_id\030\001 \001"
      "(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022\027\n\017n"
      "otify_event_id\030\004 \001(\t\"\215\001\n\023FriendAddProces"
      "sReq\022\022\n\nrequest_id\030\001 \001(\t\022\027\n\017notify_event"
      "_id\030\002 \001(\t\022\r\n\005agree\030\003 \001(\010\022\025\n\rapply_user_i"
      "d\030\004 \001(\t\022\022\n\nsession_id\030\005 \001(\t\022\017\n\007user_id\030\006"
      " \001(\t\"b\n\023FriendAddProcessRsp\022\022\n\nrequest_i"
      "d\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t"
      "\022\026\n\016new_session_id\030\004 \001(\t\"W\n\034GetPendingFr"
      "iendEventListReq\022\022\n\nrequest_id\030\001 \001(\t\022\022\n\n"
      "session_id\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\"B\n\013Fri"
      "endEvent\022\020\n\010event_id\030\001 \001(\t\022!\n\006sender\030\003 \001"
      "(\0132\021.chen_im.UserInfo\"x\n\034GetPendingFrien"
      "dEventListRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007suc"
      "cess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022#\n\005event\030\004 \003("
      "\0132\024.chen_im.FriendEvent\"^\n\017FriendSearchR"
      "eq\022\022\n\nrequest_id\030\001 \001(\t\022\022\n\nsearch_key\030\002 \001"
      "(\t\022\022\n\nsession_id\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\""
      "l\n\017FriendSearchRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017"
      "\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022$\n\tuser_"
      "info\030\004 \003(\0132\021.chen_im.UserInfo\"P\n\025GetChat"
      "SessionListReq\022\022\n\nrequest_id\030\001 \001(\t\022\022\n\nse"
      "ssion_id\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\"\206\001\n\025GetC"
      "hatSessionListRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n"
      "\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\0228\n\026chat_s"
      "ession_info_list\030\004 \003(\0132\030.chen_im.ChatSes"
      "sionInfo\"\202\001\n\024ChatSessionCreateReq\022\022\n\nreq"
      "uest_id\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\017\n\007use"
      "r_id\030\003 \001(\t\022\031\n\021chat_session_name\030\004 \001(\t\022\026\n"
      "\016member_id_list\030\005 \003(\t\"\200\001\n\024ChatSessionCre"
      "ateRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 "
      "\001(\010\022\016\n\006errmsg\030\003 \001(\t\0223\n\021chat_session_info"
      "\030\004 \001(\0132\030.chen_im.ChatSessionInfo\"k\n\027GetC"
      "hatSessionMemberReq\022\022\n\nrequest_id\030\001 \001(\t\022"
      "\022\n\nsession_id\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022\027\n\017"
      "chat_session_id\030\004 \001(\t\"{\n\027GetChatSessionM"
      "emberRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030"
      "\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022+\n\020member_info_lis"
      "t\030\004 \003(\0132\021.chen_im.UserInfo2\331\005\n\rFriendSer"
      "vice\022E\n\rGetFriendList\022\031.chen_im.GetFrien"
      "dListReq\032\031.chen_im.GetFriendListRsp\022B\n\014F"
      "riendRemove\022\030.chen_im.FriendRemoveReq\032\030."
      "chen_im.FriendRemoveRsp\0229\n\tFriendAdd\022\025.c"
      "hen_im.FriendAddReq\032\025.chen_im.FriendAddR"
      "sp\022N\n\020FriendAddProcess\022\034.chen_im.FriendA"
      "ddProcessReq\032\034.chen_im.FriendAddProcessR"
      "sp\022B\n\014FriendSearch\022\030.chen_im.FriendSearc"
      "hReq\032\030.chen_im.FriendSearchRsp\022T\n\022GetCha"
      "tSessionList\022\036.chen_im.GetChatSessionLis"
      "tReq\032\036.chen_im.GetChatSessionListRsp\022Q\n\021"
      "ChatSessionCreate\022\035.chen_im.ChatSessionC"
      "reateReq\032\035.chen_im.ChatSessionCreateRsp\022"
      "Z\n\024GetChatSessionMember\022 .chen_im.GetCha"
      "tSessionMemberReq\032 .chen_im.GetChatSessi"
      "onMemberRsp\022i\n\031GetPendingFriendEventList"
      "\022%.chen_im.GetPendingFriendEventListReq\032"
      "%.chen_im.GetPendingFriendEventListRspB\003"
      "\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_friend_2eproto
namespace chen_im {

// ===================================================================

void GetFriendListReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendListReq::kRequestIdFieldNumber;
const int GetFriendListReq::kUserIdFieldNumber;
const int GetFriendListReq::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendListReq::GetFriendListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetFriendListReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetFriendListReq)
}
GetFriendListReq::GetFriendListReq(const GetFriendListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.GetFriendListReq)
}

void GetFriendListReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetFriendListReq::~GetFriendListReq() {
  // @@protoc_insertion_point(destructor:chen_im.GetFriendListReq)
  SharedDtor();
}

void GetFriendListReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetFriendListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetFriendListReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFriendListReq& GetFriendListReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetFriendListReq.base);
  return *internal_default_instance();
}


void GetFriendListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetFriendListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetFriendListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetFriendListReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetFriendListReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetFriendListReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetFriendListReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetFriendListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetFriendListReq)
  return false;
#undef DO_
}

void GetFriendListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetFriendListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetFriendListReq)
}

::google::protobuf::uint8* GetFriendListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetFriendListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetFriendListReq)
  return target;
}

size_t GetFriendListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetFriendListReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFriendListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetFriendListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFriendListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetFriendListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetFriendListReq)
    MergeFrom(*source);
  }
}

void GetFriendListReq::MergeFrom(const GetFriendListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetFriendListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void GetFriendListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetFriendListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListReq::CopyFrom(const GetFriendListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetFriendListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListReq::IsInitialized() const {
  return true;
}

void GetFriendListReq::Swap(GetFriendListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendListReq::InternalSwap(GetFriendListReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetFriendListReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetFriendListRsp::InitAsDefaultInstance() {
}
void GetFriendListRsp::clear_friend_list() {
  friend_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendListRsp::kRequestIdFieldNumber;
const int GetFriendListRsp::kSuccessFieldNumber;
const int GetFriendListRsp::kErrmsgFieldNumber;
const int GetFriendListRsp::kFriendListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendListRsp::GetFriendListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetFriendListRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetFriendListRsp)
}
GetFriendListRsp::GetFriendListRsp(const GetFriendListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      friend_list_(from.friend_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.GetFriendListRsp)
}

void GetFriendListRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

GetFriendListRsp::~GetFriendListRsp() {
  // @@protoc_insertion_point(destructor:chen_im.GetFriendListRsp)
  SharedDtor();
}

void GetFriendListRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetFriendListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetFriendListRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFriendListRsp& GetFriendListRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetFriendListRsp.base);
  return *internal_default_instance();
}


void GetFriendListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetFriendListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_list_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool GetFriendListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetFriendListRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetFriendListRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetFriendListRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chen_im.UserInfo friend_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friend_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetFriendListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetFriendListRsp)
  return false;
#undef DO_
}

void GetFriendListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetFriendListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .chen_im.UserInfo friend_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friend_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->friend_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetFriendListRsp)
}

::google::protobuf::uint8* GetFriendListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetFriendListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetFriendListRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .chen_im.UserInfo friend_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friend_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->friend_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetFriendListRsp)
  return target;
}

size_t GetFriendListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetFriendListRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chen_im.UserInfo friend_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->friend_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friend_list(static_cast<int>(i)));
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFriendListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetFriendListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFriendListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetFriendListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetFriendListRsp)
    MergeFrom(*source);
  }
}

void GetFriendListRsp::MergeFrom(const GetFriendListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetFriendListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friend_list_.MergeFrom(from.friend_list_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GetFriendListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetFriendListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListRsp::CopyFrom(const GetFriendListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetFriendListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRsp::IsInitialized() const {
  return true;
}

void GetFriendListRsp::Swap(GetFriendListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendListRsp::InternalSwap(GetFriendListRsp* other) {
  using std::swap;
  CastToBase(&friend_list_)->InternalSwap(CastToBase(&other->friend_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetFriendListRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendRemoveReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRemoveReq::kRequestIdFieldNumber;
const int FriendRemoveReq::kUserIdFieldNumber;
const int FriendRemoveReq::kSessionIdFieldNumber;
const int FriendRemoveReq::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRemoveReq::FriendRemoveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendRemoveReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendRemoveReq)
}
FriendRemoveReq::FriendRemoveReq(const FriendRemoveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peer_id().size() > 0) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendRemoveReq)
}

void FriendRemoveReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendRemoveReq::~FriendRemoveReq() {
  // @@protoc_insertion_point(destructor:chen_im.FriendRemoveReq)
  SharedDtor();
}

void FriendRemoveReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendRemoveReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendRemoveReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRemoveReq& FriendRemoveReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendRemoveReq.base);
  return *internal_default_instance();
}


void FriendRemoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendRemoveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FriendRemoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendRemoveReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendRemoveReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendRemoveReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendRemoveReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string peer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendRemoveReq.peer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendRemoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendRemoveReq)
  return false;
#undef DO_
}

void FriendRemoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendRemoveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // string peer_id = 4;
  if (this->peer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->peer_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendRemoveReq)
}

::google::protobuf::uint8* FriendRemoveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendRemoveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // string peer_id = 4;
  if (this->peer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveReq.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->peer_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendRemoveReq)
  return target;
}

size_t FriendRemoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendRemoveReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string peer_id = 4;
  if (this->peer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendRemoveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendRemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRemoveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRemoveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendRemoveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendRemoveReq)
    MergeFrom(*source);
  }
}

void FriendRemoveReq::MergeFrom(const FriendRemoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendRemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.peer_id().size() > 0) {

    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
}

void FriendRemoveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendRemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRemoveReq::CopyFrom(const FriendRemoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendRemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRemoveReq::IsInitialized() const {
  return true;
}

void FriendRemoveReq::Swap(FriendRemoveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRemoveReq::InternalSwap(FriendRemoveReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_id_.Swap(&other->peer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendRemoveReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendRemoveRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRemoveRsp::kRequestIdFieldNumber;
const int FriendRemoveRsp::kSuccessFieldNumber;
const int FriendRemoveRsp::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRemoveRsp::FriendRemoveRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendRemoveRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendRemoveRsp)
}
FriendRemoveRsp::FriendRemoveRsp(const FriendRemoveRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendRemoveRsp)
}

void FriendRemoveRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

FriendRemoveRsp::~FriendRemoveRsp() {
  // @@protoc_insertion_point(destructor:chen_im.FriendRemoveRsp)
  SharedDtor();
}

void FriendRemoveRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendRemoveRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendRemoveRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRemoveRsp& FriendRemoveRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendRemoveRsp.base);
  return *internal_default_instance();
}


void FriendRemoveRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendRemoveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool FriendRemoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendRemoveRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendRemoveRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendRemoveRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendRemoveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendRemoveRsp)
  return false;
#undef DO_
}

void FriendRemoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendRemoveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendRemoveRsp)
}

::google::protobuf::uint8* FriendRemoveRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendRemoveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendRemoveRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendRemoveRsp)
  return target;
}

size_t FriendRemoveRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendRemoveRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendRemoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendRemoveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRemoveRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRemoveRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendRemoveRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendRemoveRsp)
    MergeFrom(*source);
  }
}

void FriendRemoveRsp::MergeFrom(const FriendRemoveRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendRemoveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void FriendRemoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendRemoveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRemoveRsp::CopyFrom(const FriendRemoveRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendRemoveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRemoveRsp::IsInitialized() const {
  return true;
}

void FriendRemoveRsp::Swap(FriendRemoveRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRemoveRsp::InternalSwap(FriendRemoveRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendRemoveRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendAddReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendAddReq::kRequestIdFieldNumber;
const int FriendAddReq::kSessionIdFieldNumber;
const int FriendAddReq::kUserIdFieldNumber;
const int FriendAddReq::kRespondentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendAddReq::FriendAddReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendAddReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendAddReq)
}
FriendAddReq::FriendAddReq(const FriendAddReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  respondent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.respondent_id().size() > 0) {
    respondent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.respondent_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendAddReq)
}

void FriendAddReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  respondent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendAddReq::~FriendAddReq() {
  // @@protoc_insertion_point(destructor:chen_im.FriendAddReq)
  SharedDtor();
}

void FriendAddReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  respondent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendAddReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendAddReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendAddReq& FriendAddReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendAddReq.base);
  return *internal_default_instance();
}


void FriendAddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendAddReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  respondent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FriendAddReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendAddReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string respondent_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_respondent_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->respondent_id().data(), static_cast<int>(this->respondent_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddReq.respondent_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendAddReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendAddReq)
  return false;
#undef DO_
}

void FriendAddReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendAddReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string respondent_id = 4;
  if (this->respondent_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->respondent_id().data(), static_cast<int>(this->respondent_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.respondent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->respondent_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendAddReq)
}

::google::protobuf::uint8* FriendAddReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendAddReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string respondent_id = 4;
  if (this->respondent_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->respondent_id().data(), static_cast<int>(this->respondent_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddReq.respondent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->respondent_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendAddReq)
  return target;
}

size_t FriendAddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendAddReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string respondent_id = 4;
  if (this->respondent_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->respondent_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendAddReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendAddReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendAddReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendAddReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendAddReq)
    MergeFrom(*source);
  }
}

void FriendAddReq::MergeFrom(const FriendAddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.respondent_id().size() > 0) {

    respondent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.respondent_id_);
  }
}

void FriendAddReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendAddReq::CopyFrom(const FriendAddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddReq::IsInitialized() const {
  return true;
}

void FriendAddReq::Swap(FriendAddReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendAddReq::InternalSwap(FriendAddReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  respondent_id_.Swap(&other->respondent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendAddReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendAddRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendAddRsp::kRequestIdFieldNumber;
const int FriendAddRsp::kSuccessFieldNumber;
const int FriendAddRsp::kErrmsgFieldNumber;
const int FriendAddRsp::kNotifyEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendAddRsp::FriendAddRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendAddRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendAddRsp)
}
FriendAddRsp::FriendAddRsp(const FriendAddRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  notify_event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.notify_event_id().size() > 0) {
    notify_event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_event_id_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendAddRsp)
}

void FriendAddRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

FriendAddRsp::~FriendAddRsp() {
  // @@protoc_insertion_point(destructor:chen_im.FriendAddRsp)
  SharedDtor();
}

void FriendAddRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendAddRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendAddRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendAddRsp& FriendAddRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendAddRsp.base);
  return *internal_default_instance();
}


void FriendAddRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendAddRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool FriendAddRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendAddRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string notify_event_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify_event_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddRsp.notify_event_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendAddRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendAddRsp)
  return false;
#undef DO_
}

void FriendAddRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendAddRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // string notify_event_id = 4;
  if (this->notify_event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddRsp.notify_event_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notify_event_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendAddRsp)
}

::google::protobuf::uint8* FriendAddRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendAddRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // string notify_event_id = 4;
  if (this->notify_event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddRsp.notify_event_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notify_event_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendAddRsp)
  return target;
}

size_t FriendAddRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendAddRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // string notify_event_id = 4;
  if (this->notify_event_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notify_event_id());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendAddRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendAddRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendAddRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendAddRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendAddRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendAddRsp)
    MergeFrom(*source);
  }
}

void FriendAddRsp::MergeFrom(const FriendAddRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendAddRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.notify_event_id().size() > 0) {

    notify_event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_event_id_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void FriendAddRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendAddRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendAddRsp::CopyFrom(const FriendAddRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendAddRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddRsp::IsInitialized() const {
  return true;
}

void FriendAddRsp::Swap(FriendAddRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendAddRsp::InternalSwap(FriendAddRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notify_event_id_.Swap(&other->notify_event_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendAddRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendAddProcessReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendAddProcessReq::kRequestIdFieldNumber;
const int FriendAddProcessReq::kNotifyEventIdFieldNumber;
const int FriendAddProcessReq::kAgreeFieldNumber;
const int FriendAddProcessReq::kApplyUserIdFieldNumber;
const int FriendAddProcessReq::kSessionIdFieldNumber;
const int FriendAddProcessReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendAddProcessReq::FriendAddProcessReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendAddProcessReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendAddProcessReq)
}
FriendAddProcessReq::FriendAddProcessReq(const FriendAddProcessReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  notify_event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.notify_event_id().size() > 0) {
    notify_event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_event_id_);
  }
  apply_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.apply_user_id().size() > 0) {
    apply_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apply_user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  agree_ = from.agree_;
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendAddProcessReq)
}

void FriendAddProcessReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agree_ = false;
}

FriendAddProcessReq::~FriendAddProcessReq() {
  // @@protoc_insertion_point(destructor:chen_im.FriendAddProcessReq)
  SharedDtor();
}

void FriendAddProcessReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendAddProcessReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendAddProcessReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendAddProcessReq& FriendAddProcessReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendAddProcessReq.base);
  return *internal_default_instance();
}


void FriendAddProcessReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendAddProcessReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agree_ = false;
  _internal_metadata_.Clear();
}

bool FriendAddProcessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendAddProcessReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string notify_event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify_event_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessReq.notify_event_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool agree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string apply_user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apply_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->apply_user_id().data(), static_cast<int>(this->apply_user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessReq.apply_user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendAddProcessReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendAddProcessReq)
  return false;
#undef DO_
}

void FriendAddProcessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendAddProcessReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string notify_event_id = 2;
  if (this->notify_event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.notify_event_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notify_event_id(), output);
  }

  // bool agree = 3;
  if (this->agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->agree(), output);
  }

  // string apply_user_id = 4;
  if (this->apply_user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_user_id().data(), static_cast<int>(this->apply_user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.apply_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->apply_user_id(), output);
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->session_id(), output);
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendAddProcessReq)
}

::google::protobuf::uint8* FriendAddProcessReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendAddProcessReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string notify_event_id = 2;
  if (this->notify_event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_event_id().data(), static_cast<int>(this->notify_event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.notify_event_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notify_event_id(), target);
  }

  // bool agree = 3;
  if (this->agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->agree(), target);
  }

  // string apply_user_id = 4;
  if (this->apply_user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_user_id().data(), static_cast<int>(this->apply_user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.apply_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->apply_user_id(), target);
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->session_id(), target);
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendAddProcessReq)
  return target;
}

size_t FriendAddProcessReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendAddProcessReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string notify_event_id = 2;
  if (this->notify_event_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notify_event_id());
  }

  // string apply_user_id = 4;
  if (this->apply_user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apply_user_id());
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // bool agree = 3;
  if (this->agree() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendAddProcessReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendAddProcessReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendAddProcessReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendAddProcessReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendAddProcessReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendAddProcessReq)
    MergeFrom(*source);
  }
}

void FriendAddProcessReq::MergeFrom(const FriendAddProcessReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendAddProcessReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.notify_event_id().size() > 0) {

    notify_event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_event_id_);
  }
  if (from.apply_user_id().size() > 0) {

    apply_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apply_user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.agree() != 0) {
    set_agree(from.agree());
  }
}

void FriendAddProcessReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendAddProcessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendAddProcessReq::CopyFrom(const FriendAddProcessReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendAddProcessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddProcessReq::IsInitialized() const {
  return true;
}

void FriendAddProcessReq::Swap(FriendAddProcessReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendAddProcessReq::InternalSwap(FriendAddProcessReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notify_event_id_.Swap(&other->notify_event_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  apply_user_id_.Swap(&other->apply_user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(agree_, other->agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendAddProcessReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendAddProcessRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendAddProcessRsp::kRequestIdFieldNumber;
const int FriendAddProcessRsp::kSuccessFieldNumber;
const int FriendAddProcessRsp::kErrmsgFieldNumber;
const int FriendAddProcessRsp::kNewSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendAddProcessRsp::FriendAddProcessRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendAddProcessRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendAddProcessRsp)
}
FriendAddProcessRsp::FriendAddProcessRsp(const FriendAddProcessRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  new_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_session_id().size() > 0) {
    new_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_session_id_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendAddProcessRsp)
}

void FriendAddProcessRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

FriendAddProcessRsp::~FriendAddProcessRsp() {
  // @@protoc_insertion_point(destructor:chen_im.FriendAddProcessRsp)
  SharedDtor();
}

void FriendAddProcessRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendAddProcessRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendAddProcessRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendAddProcessRsp& FriendAddProcessRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendAddProcessRsp.base);
  return *internal_default_instance();
}


void FriendAddProcessRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendAddProcessRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool FriendAddProcessRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendAddProcessRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_session_id().data(), static_cast<int>(this->new_session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendAddProcessRsp.new_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendAddProcessRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendAddProcessRsp)
  return false;
#undef DO_
}

void FriendAddProcessRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendAddProcessRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // string new_session_id = 4;
  if (this->new_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_session_id().data(), static_cast<int>(this->new_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessRsp.new_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->new_session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendAddProcessRsp)
}

::google::protobuf::uint8* FriendAddProcessRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendAddProcessRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // string new_session_id = 4;
  if (this->new_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_session_id().data(), static_cast<int>(this->new_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendAddProcessRsp.new_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendAddProcessRsp)
  return target;
}

size_t FriendAddProcessRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendAddProcessRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // string new_session_id = 4;
  if (this->new_session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_session_id());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendAddProcessRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendAddProcessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendAddProcessRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendAddProcessRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendAddProcessRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendAddProcessRsp)
    MergeFrom(*source);
  }
}

void FriendAddProcessRsp::MergeFrom(const FriendAddProcessRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendAddProcessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.new_session_id().size() > 0) {

    new_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_session_id_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void FriendAddProcessRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendAddProcessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendAddProcessRsp::CopyFrom(const FriendAddProcessRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendAddProcessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddProcessRsp::IsInitialized() const {
  return true;
}

void FriendAddProcessRsp::Swap(FriendAddProcessRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendAddProcessRsp::InternalSwap(FriendAddProcessRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_session_id_.Swap(&other->new_session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendAddProcessRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPendingFriendEventListReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPendingFriendEventListReq::kRequestIdFieldNumber;
const int GetPendingFriendEventListReq::kSessionIdFieldNumber;
const int GetPendingFriendEventListReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPendingFriendEventListReq::GetPendingFriendEventListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetPendingFriendEventListReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetPendingFriendEventListReq)
}
GetPendingFriendEventListReq::GetPendingFriendEventListReq(const GetPendingFriendEventListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.GetPendingFriendEventListReq)
}

void GetPendingFriendEventListReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetPendingFriendEventListReq::~GetPendingFriendEventListReq() {
  // @@protoc_insertion_point(destructor:chen_im.GetPendingFriendEventListReq)
  SharedDtor();
}

void GetPendingFriendEventListReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPendingFriendEventListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPendingFriendEventListReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPendingFriendEventListReq& GetPendingFriendEventListReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetPendingFriendEventListReq.base);
  return *internal_default_instance();
}


void GetPendingFriendEventListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetPendingFriendEventListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetPendingFriendEventListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetPendingFriendEventListReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetPendingFriendEventListReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetPendingFriendEventListReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetPendingFriendEventListReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetPendingFriendEventListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetPendingFriendEventListReq)
  return false;
#undef DO_
}

void GetPendingFriendEventListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetPendingFriendEventListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetPendingFriendEventListReq)
}

::google::protobuf::uint8* GetPendingFriendEventListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetPendingFriendEventListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetPendingFriendEventListReq)
  return target;
}

size_t GetPendingFriendEventListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetPendingFriendEventListReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPendingFriendEventListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetPendingFriendEventListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPendingFriendEventListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPendingFriendEventListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetPendingFriendEventListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetPendingFriendEventListReq)
    MergeFrom(*source);
  }
}

void GetPendingFriendEventListReq::MergeFrom(const GetPendingFriendEventListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetPendingFriendEventListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void GetPendingFriendEventListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetPendingFriendEventListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPendingFriendEventListReq::CopyFrom(const GetPendingFriendEventListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetPendingFriendEventListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingFriendEventListReq::IsInitialized() const {
  return true;
}

void GetPendingFriendEventListReq::Swap(GetPendingFriendEventListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPendingFriendEventListReq::InternalSwap(GetPendingFriendEventListReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPendingFriendEventListReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendEvent::InitAsDefaultInstance() {
  ::chen_im::_FriendEvent_default_instance_._instance.get_mutable()->sender_ = const_cast< ::chen_im::UserInfo*>(
      ::chen_im::UserInfo::internal_default_instance());
}
void FriendEvent::clear_sender() {
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendEvent::kEventIdFieldNumber;
const int FriendEvent::kSenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendEvent::FriendEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendEvent)
}
FriendEvent::FriendEvent(const FriendEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_id().size() > 0) {
    event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  if (from.has_sender()) {
    sender_ = new ::chen_im::UserInfo(*from.sender_);
  } else {
    sender_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendEvent)
}

void FriendEvent::SharedCtor() {
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = NULL;
}

FriendEvent::~FriendEvent() {
  // @@protoc_insertion_point(destructor:chen_im.FriendEvent)
  SharedDtor();
}

void FriendEvent::SharedDtor() {
  event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void FriendEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendEvent::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendEvent& FriendEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendEvent.base);
  return *internal_default_instance();
}


void FriendEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
  _internal_metadata_.Clear();
}

bool FriendEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_id().data(), static_cast<int>(this->event_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendEvent.event_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.UserInfo sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendEvent)
  return false;
#undef DO_
}

void FriendEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (this->event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_id().data(), static_cast<int>(this->event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendEvent.event_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_id(), output);
  }

  // .chen_im.UserInfo sender = 3;
  if (this->has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sender(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendEvent)
}

::google::protobuf::uint8* FriendEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (this->event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_id().data(), static_cast<int>(this->event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendEvent.event_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_id(), target);
  }

  // .chen_im.UserInfo sender = 3;
  if (this->has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sender(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendEvent)
  return target;
}

size_t FriendEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string event_id = 1;
  if (this->event_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_id());
  }

  // .chen_im.UserInfo sender = 3;
  if (this->has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendEvent)
    MergeFrom(*source);
  }
}

void FriendEvent::MergeFrom(const FriendEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_id().size() > 0) {

    event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  if (from.has_sender()) {
    mutable_sender()->::chen_im::UserInfo::MergeFrom(from.sender());
  }
}

void FriendEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendEvent::CopyFrom(const FriendEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendEvent::IsInitialized() const {
  return true;
}

void FriendEvent::Swap(FriendEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendEvent::InternalSwap(FriendEvent* other) {
  using std::swap;
  event_id_.Swap(&other->event_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendEvent::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPendingFriendEventListRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPendingFriendEventListRsp::kRequestIdFieldNumber;
const int GetPendingFriendEventListRsp::kSuccessFieldNumber;
const int GetPendingFriendEventListRsp::kErrmsgFieldNumber;
const int GetPendingFriendEventListRsp::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPendingFriendEventListRsp::GetPendingFriendEventListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetPendingFriendEventListRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetPendingFriendEventListRsp)
}
GetPendingFriendEventListRsp::GetPendingFriendEventListRsp(const GetPendingFriendEventListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      event_(from.event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.GetPendingFriendEventListRsp)
}

void GetPendingFriendEventListRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

GetPendingFriendEventListRsp::~GetPendingFriendEventListRsp() {
  // @@protoc_insertion_point(destructor:chen_im.GetPendingFriendEventListRsp)
  SharedDtor();
}

void GetPendingFriendEventListRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPendingFriendEventListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPendingFriendEventListRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPendingFriendEventListRsp& GetPendingFriendEventListRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetPendingFriendEventListRsp.base);
  return *internal_default_instance();
}


void GetPendingFriendEventListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetPendingFriendEventListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool GetPendingFriendEventListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetPendingFriendEventListRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetPendingFriendEventListRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetPendingFriendEventListRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chen_im.FriendEvent event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetPendingFriendEventListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetPendingFriendEventListRsp)
  return false;
#undef DO_
}

void GetPendingFriendEventListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetPendingFriendEventListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .chen_im.FriendEvent event = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->event(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetPendingFriendEventListRsp)
}

::google::protobuf::uint8* GetPendingFriendEventListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetPendingFriendEventListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetPendingFriendEventListRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .chen_im.FriendEvent event = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->event(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetPendingFriendEventListRsp)
  return target;
}

size_t GetPendingFriendEventListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetPendingFriendEventListRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chen_im.FriendEvent event = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event(static_cast<int>(i)));
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPendingFriendEventListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetPendingFriendEventListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPendingFriendEventListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPendingFriendEventListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetPendingFriendEventListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetPendingFriendEventListRsp)
    MergeFrom(*source);
  }
}

void GetPendingFriendEventListRsp::MergeFrom(const GetPendingFriendEventListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetPendingFriendEventListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_.MergeFrom(from.event_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GetPendingFriendEventListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetPendingFriendEventListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPendingFriendEventListRsp::CopyFrom(const GetPendingFriendEventListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetPendingFriendEventListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingFriendEventListRsp::IsInitialized() const {
  return true;
}

void GetPendingFriendEventListRsp::Swap(GetPendingFriendEventListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPendingFriendEventListRsp::InternalSwap(GetPendingFriendEventListRsp* other) {
  using std::swap;
  CastToBase(&event_)->InternalSwap(CastToBase(&other->event_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPendingFriendEventListRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendSearchReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendSearchReq::kRequestIdFieldNumber;
const int FriendSearchReq::kSearchKeyFieldNumber;
const int FriendSearchReq::kSessionIdFieldNumber;
const int FriendSearchReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendSearchReq::FriendSearchReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendSearchReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendSearchReq)
}
FriendSearchReq::FriendSearchReq(const FriendSearchReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.search_key().size() > 0) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendSearchReq)
}

void FriendSearchReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendSearchReq::~FriendSearchReq() {
  // @@protoc_insertion_point(destructor:chen_im.FriendSearchReq)
  SharedDtor();
}

void FriendSearchReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendSearchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendSearchReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendSearchReq& FriendSearchReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendSearchReq.base);
  return *internal_default_instance();
}


void FriendSearchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendSearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FriendSearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendSearchReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendSearchReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string search_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->search_key().data(), static_cast<int>(this->search_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendSearchReq.search_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendSearchReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendSearchReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendSearchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendSearchReq)
  return false;
#undef DO_
}

void FriendSearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendSearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string search_key = 2;
  if (this->search_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->search_key(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendSearchReq)
}

::google::protobuf::uint8* FriendSearchReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendSearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string search_key = 2;
  if (this->search_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_key(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendSearchReq)
  return target;
}

size_t FriendSearchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendSearchReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string search_key = 2;
  if (this->search_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search_key());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendSearchReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendSearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendSearchReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendSearchReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendSearchReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendSearchReq)
    MergeFrom(*source);
  }
}

void FriendSearchReq::MergeFrom(const FriendSearchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendSearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.search_key().size() > 0) {

    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void FriendSearchReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendSearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendSearchReq::CopyFrom(const FriendSearchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendSearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendSearchReq::IsInitialized() const {
  return true;
}

void FriendSearchReq::Swap(FriendSearchReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendSearchReq::InternalSwap(FriendSearchReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  search_key_.Swap(&other->search_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendSearchReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendSearchRsp::InitAsDefaultInstance() {
}
void FriendSearchRsp::clear_user_info() {
  user_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendSearchRsp::kRequestIdFieldNumber;
const int FriendSearchRsp::kSuccessFieldNumber;
const int FriendSearchRsp::kErrmsgFieldNumber;
const int FriendSearchRsp::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendSearchRsp::FriendSearchRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_FriendSearchRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FriendSearchRsp)
}
FriendSearchRsp::FriendSearchRsp(const FriendSearchRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_info_(from.user_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.FriendSearchRsp)
}

void FriendSearchRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

FriendSearchRsp::~FriendSearchRsp() {
  // @@protoc_insertion_point(destructor:chen_im.FriendSearchRsp)
  SharedDtor();
}

void FriendSearchRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendSearchRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendSearchRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendSearchRsp& FriendSearchRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_FriendSearchRsp.base);
  return *internal_default_instance();
}


void FriendSearchRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FriendSearchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_info_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool FriendSearchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FriendSearchRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendSearchRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FriendSearchRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chen_im.UserInfo user_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FriendSearchRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FriendSearchRsp)
  return false;
#undef DO_
}

void FriendSearchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FriendSearchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .chen_im.UserInfo user_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->user_info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FriendSearchRsp)
}

::google::protobuf::uint8* FriendSearchRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FriendSearchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FriendSearchRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .chen_im.UserInfo user_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->user_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FriendSearchRsp)
  return target;
}

size_t FriendSearchRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FriendSearchRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chen_im.UserInfo user_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->user_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_info(static_cast<int>(i)));
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendSearchRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FriendSearchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendSearchRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendSearchRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FriendSearchRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FriendSearchRsp)
    MergeFrom(*source);
  }
}

void FriendSearchRsp::MergeFrom(const FriendSearchRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FriendSearchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_info_.MergeFrom(from.user_info_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void FriendSearchRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FriendSearchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendSearchRsp::CopyFrom(const FriendSearchRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FriendSearchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendSearchRsp::IsInitialized() const {
  return true;
}

void FriendSearchRsp::Swap(FriendSearchRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendSearchRsp::InternalSwap(FriendSearchRsp* other) {
  using std::swap;
  CastToBase(&user_info_)->InternalSwap(CastToBase(&other->user_info_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendSearchRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetChatSessionListReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatSessionListReq::kRequestIdFieldNumber;
const int GetChatSessionListReq::kSessionIdFieldNumber;
const int GetChatSessionListReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatSessionListReq::GetChatSessionListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetChatSessionListReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetChatSessionListReq)
}
GetChatSessionListReq::GetChatSessionListReq(const GetChatSessionListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.GetChatSessionListReq)
}

void GetChatSessionListReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetChatSessionListReq::~GetChatSessionListReq() {
  // @@protoc_insertion_point(destructor:chen_im.GetChatSessionListReq)
  SharedDtor();
}

void GetChatSessionListReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetChatSessionListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetChatSessionListReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatSessionListReq& GetChatSessionListReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetChatSessionListReq.base);
  return *internal_default_instance();
}


void GetChatSessionListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetChatSessionListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetChatSessionListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetChatSessionListReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionListReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionListReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionListReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetChatSessionListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetChatSessionListReq)
  return false;
#undef DO_
}

void GetChatSessionListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetChatSessionListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetChatSessionListReq)
}

::google::protobuf::uint8* GetChatSessionListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetChatSessionListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetChatSessionListReq)
  return target;
}

size_t GetChatSessionListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetChatSessionListReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatSessionListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetChatSessionListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatSessionListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatSessionListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetChatSessionListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetChatSessionListReq)
    MergeFrom(*source);
  }
}

void GetChatSessionListReq::MergeFrom(const GetChatSessionListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetChatSessionListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void GetChatSessionListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetChatSessionListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatSessionListReq::CopyFrom(const GetChatSessionListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetChatSessionListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionListReq::IsInitialized() const {
  return true;
}

void GetChatSessionListReq::Swap(GetChatSessionListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatSessionListReq::InternalSwap(GetChatSessionListReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetChatSessionListReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetChatSessionListRsp::InitAsDefaultInstance() {
}
void GetChatSessionListRsp::clear_chat_session_info_list() {
  chat_session_info_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatSessionListRsp::kRequestIdFieldNumber;
const int GetChatSessionListRsp::kSuccessFieldNumber;
const int GetChatSessionListRsp::kErrmsgFieldNumber;
const int GetChatSessionListRsp::kChatSessionInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatSessionListRsp::GetChatSessionListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetChatSessionListRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetChatSessionListRsp)
}
GetChatSessionListRsp::GetChatSessionListRsp(const GetChatSessionListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chat_session_info_list_(from.chat_session_info_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.GetChatSessionListRsp)
}

void GetChatSessionListRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

GetChatSessionListRsp::~GetChatSessionListRsp() {
  // @@protoc_insertion_point(destructor:chen_im.GetChatSessionListRsp)
  SharedDtor();
}

void GetChatSessionListRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetChatSessionListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetChatSessionListRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatSessionListRsp& GetChatSessionListRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetChatSessionListRsp.base);
  return *internal_default_instance();
}


void GetChatSessionListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetChatSessionListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_session_info_list_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool GetChatSessionListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetChatSessionListRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionListRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionListRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chen_im.ChatSessionInfo chat_session_info_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_session_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetChatSessionListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetChatSessionListRsp)
  return false;
#undef DO_
}

void GetChatSessionListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetChatSessionListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .chen_im.ChatSessionInfo chat_session_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_session_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->chat_session_info_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetChatSessionListRsp)
}

::google::protobuf::uint8* GetChatSessionListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetChatSessionListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionListRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .chen_im.ChatSessionInfo chat_session_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_session_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->chat_session_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetChatSessionListRsp)
  return target;
}

size_t GetChatSessionListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetChatSessionListRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chen_im.ChatSessionInfo chat_session_info_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_session_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_session_info_list(static_cast<int>(i)));
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatSessionListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetChatSessionListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatSessionListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatSessionListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetChatSessionListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetChatSessionListRsp)
    MergeFrom(*source);
  }
}

void GetChatSessionListRsp::MergeFrom(const GetChatSessionListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetChatSessionListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chat_session_info_list_.MergeFrom(from.chat_session_info_list_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GetChatSessionListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetChatSessionListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatSessionListRsp::CopyFrom(const GetChatSessionListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetChatSessionListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionListRsp::IsInitialized() const {
  return true;
}

void GetChatSessionListRsp::Swap(GetChatSessionListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatSessionListRsp::InternalSwap(GetChatSessionListRsp* other) {
  using std::swap;
  CastToBase(&chat_session_info_list_)->InternalSwap(CastToBase(&other->chat_session_info_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetChatSessionListRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatSessionCreateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatSessionCreateReq::kRequestIdFieldNumber;
const int ChatSessionCreateReq::kSessionIdFieldNumber;
const int ChatSessionCreateReq::kUserIdFieldNumber;
const int ChatSessionCreateReq::kChatSessionNameFieldNumber;
const int ChatSessionCreateReq::kMemberIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatSessionCreateReq::ChatSessionCreateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_ChatSessionCreateReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.ChatSessionCreateReq)
}
ChatSessionCreateReq::ChatSessionCreateReq(const ChatSessionCreateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  chat_session_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_session_name().size() > 0) {
    chat_session_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_name_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.ChatSessionCreateReq)
}

void ChatSessionCreateReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatSessionCreateReq::~ChatSessionCreateReq() {
  // @@protoc_insertion_point(destructor:chen_im.ChatSessionCreateReq)
  SharedDtor();
}

void ChatSessionCreateReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatSessionCreateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatSessionCreateReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatSessionCreateReq& ChatSessionCreateReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_ChatSessionCreateReq.base);
  return *internal_default_instance();
}


void ChatSessionCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.ChatSessionCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ChatSessionCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.ChatSessionCreateReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionCreateReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionCreateReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionCreateReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_session_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_session_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_session_name().data(), static_cast<int>(this->chat_session_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionCreateReq.chat_session_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string member_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_member_id_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->member_id_list(this->member_id_list_size() - 1).data(),
            static_cast<int>(this->member_id_list(this->member_id_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionCreateReq.member_id_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.ChatSessionCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.ChatSessionCreateReq)
  return false;
#undef DO_
}

void ChatSessionCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.ChatSessionCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string chat_session_name = 4;
  if (this->chat_session_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_name().data(), static_cast<int>(this->chat_session_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.chat_session_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chat_session_name(), output);
  }

  // repeated string member_id_list = 5;
  for (int i = 0, n = this->member_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_id_list(i).data(), static_cast<int>(this->member_id_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.member_id_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->member_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.ChatSessionCreateReq)
}

::google::protobuf::uint8* ChatSessionCreateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.ChatSessionCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string chat_session_name = 4;
  if (this->chat_session_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_name().data(), static_cast<int>(this->chat_session_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.chat_session_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chat_session_name(), target);
  }

  // repeated string member_id_list = 5;
  for (int i = 0, n = this->member_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_id_list(i).data(), static_cast<int>(this->member_id_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateReq.member_id_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->member_id_list(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.ChatSessionCreateReq)
  return target;
}

size_t ChatSessionCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.ChatSessionCreateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string member_id_list = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->member_id_list_size());
  for (int i = 0, n = this->member_id_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->member_id_list(i));
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string chat_session_name = 4;
  if (this->chat_session_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_session_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatSessionCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.ChatSessionCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatSessionCreateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatSessionCreateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.ChatSessionCreateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.ChatSessionCreateReq)
    MergeFrom(*source);
  }
}

void ChatSessionCreateReq::MergeFrom(const ChatSessionCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.ChatSessionCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.chat_session_name().size() > 0) {

    chat_session_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_name_);
  }
}

void ChatSessionCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.ChatSessionCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSessionCreateReq::CopyFrom(const ChatSessionCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.ChatSessionCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSessionCreateReq::IsInitialized() const {
  return true;
}

void ChatSessionCreateReq::Swap(ChatSessionCreateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatSessionCreateReq::InternalSwap(ChatSessionCreateReq* other) {
  using std::swap;
  member_id_list_.InternalSwap(CastToBase(&other->member_id_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_session_name_.Swap(&other->chat_session_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatSessionCreateReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatSessionCreateRsp::InitAsDefaultInstance() {
  ::chen_im::_ChatSessionCreateRsp_default_instance_._instance.get_mutable()->chat_session_info_ = const_cast< ::chen_im::ChatSessionInfo*>(
      ::chen_im::ChatSessionInfo::internal_default_instance());
}
void ChatSessionCreateRsp::clear_chat_session_info() {
  if (GetArenaNoVirtual() == NULL && chat_session_info_ != NULL) {
    delete chat_session_info_;
  }
  chat_session_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatSessionCreateRsp::kRequestIdFieldNumber;
const int ChatSessionCreateRsp::kSuccessFieldNumber;
const int ChatSessionCreateRsp::kErrmsgFieldNumber;
const int ChatSessionCreateRsp::kChatSessionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatSessionCreateRsp::ChatSessionCreateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_ChatSessionCreateRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.ChatSessionCreateRsp)
}
ChatSessionCreateRsp::ChatSessionCreateRsp(const ChatSessionCreateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_chat_session_info()) {
    chat_session_info_ = new ::chen_im::ChatSessionInfo(*from.chat_session_info_);
  } else {
    chat_session_info_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.ChatSessionCreateRsp)
}

void ChatSessionCreateRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_session_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&chat_session_info_)) + sizeof(success_));
}

ChatSessionCreateRsp::~ChatSessionCreateRsp() {
  // @@protoc_insertion_point(destructor:chen_im.ChatSessionCreateRsp)
  SharedDtor();
}

void ChatSessionCreateRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_session_info_;
}

void ChatSessionCreateRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatSessionCreateRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatSessionCreateRsp& ChatSessionCreateRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_ChatSessionCreateRsp.base);
  return *internal_default_instance();
}


void ChatSessionCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.ChatSessionCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chat_session_info_ != NULL) {
    delete chat_session_info_;
  }
  chat_session_info_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool ChatSessionCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.ChatSessionCreateRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionCreateRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionCreateRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.ChatSessionInfo chat_session_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_session_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.ChatSessionCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.ChatSessionCreateRsp)
  return false;
#undef DO_
}

void ChatSessionCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.ChatSessionCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // .chen_im.ChatSessionInfo chat_session_info = 4;
  if (this->has_chat_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_chat_session_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.ChatSessionCreateRsp)
}

::google::protobuf::uint8* ChatSessionCreateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.ChatSessionCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionCreateRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // .chen_im.ChatSessionInfo chat_session_info = 4;
  if (this->has_chat_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_chat_session_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.ChatSessionCreateRsp)
  return target;
}

size_t ChatSessionCreateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.ChatSessionCreateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // .chen_im.ChatSessionInfo chat_session_info = 4;
  if (this->has_chat_session_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_session_info_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatSessionCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.ChatSessionCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatSessionCreateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatSessionCreateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.ChatSessionCreateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.ChatSessionCreateRsp)
    MergeFrom(*source);
  }
}

void ChatSessionCreateRsp::MergeFrom(const ChatSessionCreateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.ChatSessionCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_chat_session_info()) {
    mutable_chat_session_info()->::chen_im::ChatSessionInfo::MergeFrom(from.chat_session_info());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void ChatSessionCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.ChatSessionCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSessionCreateRsp::CopyFrom(const ChatSessionCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.ChatSessionCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSessionCreateRsp::IsInitialized() const {
  return true;
}

void ChatSessionCreateRsp::Swap(ChatSessionCreateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatSessionCreateRsp::InternalSwap(ChatSessionCreateRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_session_info_, other->chat_session_info_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatSessionCreateRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetChatSessionMemberReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatSessionMemberReq::kRequestIdFieldNumber;
const int GetChatSessionMemberReq::kSessionIdFieldNumber;
const int GetChatSessionMemberReq::kUserIdFieldNumber;
const int GetChatSessionMemberReq::kChatSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatSessionMemberReq::GetChatSessionMemberReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetChatSessionMemberReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetChatSessionMemberReq)
}
GetChatSessionMemberReq::GetChatSessionMemberReq(const GetChatSessionMemberReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_session_id().size() > 0) {
    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.GetChatSessionMemberReq)
}

void GetChatSessionMemberReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetChatSessionMemberReq::~GetChatSessionMemberReq() {
  // @@protoc_insertion_point(destructor:chen_im.GetChatSessionMemberReq)
  SharedDtor();
}

void GetChatSessionMemberReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetChatSessionMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetChatSessionMemberReq::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatSessionMemberReq& GetChatSessionMemberReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetChatSessionMemberReq.base);
  return *internal_default_instance();
}


void GetChatSessionMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetChatSessionMemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetChatSessionMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetChatSessionMemberReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionMemberReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionMemberReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionMemberReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionMemberReq.chat_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetChatSessionMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetChatSessionMemberReq)
  return false;
#undef DO_
}

void GetChatSessionMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetChatSessionMemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string chat_session_id = 4;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.chat_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chat_session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetChatSessionMemberReq)
}

::google::protobuf::uint8* GetChatSessionMemberReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetChatSessionMemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string chat_session_id = 4;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberReq.chat_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chat_session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetChatSessionMemberReq)
  return target;
}

size_t GetChatSessionMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetChatSessionMemberReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string chat_session_id = 4;
  if (this->chat_session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatSessionMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetChatSessionMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatSessionMemberReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatSessionMemberReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetChatSessionMemberReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetChatSessionMemberReq)
    MergeFrom(*source);
  }
}

void GetChatSessionMemberReq::MergeFrom(const GetChatSessionMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetChatSessionMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.chat_session_id().size() > 0) {

    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
}

void GetChatSessionMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetChatSessionMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatSessionMemberReq::CopyFrom(const GetChatSessionMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetChatSessionMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionMemberReq::IsInitialized() const {
  return true;
}

void GetChatSessionMemberReq::Swap(GetChatSessionMemberReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatSessionMemberReq::InternalSwap(GetChatSessionMemberReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_session_id_.Swap(&other->chat_session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetChatSessionMemberReq::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetChatSessionMemberRsp::InitAsDefaultInstance() {
}
void GetChatSessionMemberRsp::clear_member_info_list() {
  member_info_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatSessionMemberRsp::kRequestIdFieldNumber;
const int GetChatSessionMemberRsp::kSuccessFieldNumber;
const int GetChatSessionMemberRsp::kErrmsgFieldNumber;
const int GetChatSessionMemberRsp::kMemberInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatSessionMemberRsp::GetChatSessionMemberRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friend_2eproto::scc_info_GetChatSessionMemberRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetChatSessionMemberRsp)
}
GetChatSessionMemberRsp::GetChatSessionMemberRsp(const GetChatSessionMemberRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      member_info_list_(from.member_info_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.GetChatSessionMemberRsp)
}

void GetChatSessionMemberRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

GetChatSessionMemberRsp::~GetChatSessionMemberRsp() {
  // @@protoc_insertion_point(destructor:chen_im.GetChatSessionMemberRsp)
  SharedDtor();
}

void GetChatSessionMemberRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetChatSessionMemberRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetChatSessionMemberRsp::descriptor() {
  ::protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatSessionMemberRsp& GetChatSessionMemberRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friend_2eproto::scc_info_GetChatSessionMemberRsp.base);
  return *internal_default_instance();
}


void GetChatSessionMemberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetChatSessionMemberRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_info_list_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool GetChatSessionMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetChatSessionMemberRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionMemberRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetChatSessionMemberRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chen_im.UserInfo member_info_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_member_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetChatSessionMemberRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetChatSessionMemberRsp)
  return false;
#undef DO_
}

void GetChatSessionMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetChatSessionMemberRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .chen_im.UserInfo member_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->member_info_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetChatSessionMemberRsp)
}

::google::protobuf::uint8* GetChatSessionMemberRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetChatSessionMemberRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetChatSessionMemberRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .chen_im.UserInfo member_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->member_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetChatSessionMemberRsp)
  return target;
}

size_t GetChatSessionMemberRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetChatSessionMemberRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chen_im.UserInfo member_info_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->member_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->member_info_list(static_cast<int>(i)));
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatSessionMemberRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetChatSessionMemberRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatSessionMemberRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatSessionMemberRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetChatSessionMemberRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetChatSessionMemberRsp)
    MergeFrom(*source);
  }
}

void GetChatSessionMemberRsp::MergeFrom(const GetChatSessionMemberRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetChatSessionMemberRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_info_list_.MergeFrom(from.member_info_list_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GetChatSessionMemberRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetChatSessionMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatSessionMemberRsp::CopyFrom(const GetChatSessionMemberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetChatSessionMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionMemberRsp::IsInitialized() const {
  return true;
}

void GetChatSessionMemberRsp::Swap(GetChatSessionMemberRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatSessionMemberRsp::InternalSwap(GetChatSessionMemberRsp* other) {
  using std::swap;
  CastToBase(&member_info_list_)->InternalSwap(CastToBase(&other->member_info_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetChatSessionMemberRsp::GetMetadata() const {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

FriendService::~FriendService() {}

const ::google::protobuf::ServiceDescriptor* FriendService::descriptor() {
  protobuf_friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_friend_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* FriendService::GetDescriptor() {
  return descriptor();
}

void FriendService::GetFriendList(::google::protobuf::RpcController* controller,
                         const ::chen_im::GetFriendListReq*,
                         ::chen_im::GetFriendListRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendList() not implemented.");
  done->Run();
}

void FriendService::FriendRemove(::google::protobuf::RpcController* controller,
                         const ::chen_im::FriendRemoveReq*,
                         ::chen_im::FriendRemoveRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendRemove() not implemented.");
  done->Run();
}

void FriendService::FriendAdd(::google::protobuf::RpcController* controller,
                         const ::chen_im::FriendAddReq*,
                         ::chen_im::FriendAddRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendAdd() not implemented.");
  done->Run();
}

void FriendService::FriendAddProcess(::google::protobuf::RpcController* controller,
                         const ::chen_im::FriendAddProcessReq*,
                         ::chen_im::FriendAddProcessRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendAddProcess() not implemented.");
  done->Run();
}

void FriendService::FriendSearch(::google::protobuf::RpcController* controller,
                         const ::chen_im::FriendSearchReq*,
                         ::chen_im::FriendSearchRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendSearch() not implemented.");
  done->Run();
}

void FriendService::GetChatSessionList(::google::protobuf::RpcController* controller,
                         const ::chen_im::GetChatSessionListReq*,
                         ::chen_im::GetChatSessionListRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatSessionList() not implemented.");
  done->Run();
}

void FriendService::ChatSessionCreate(::google::protobuf::RpcController* controller,
                         const ::chen_im::ChatSessionCreateReq*,
                         ::chen_im::ChatSessionCreateRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChatSessionCreate() not implemented.");
  done->Run();
}

void FriendService::GetChatSessionMember(::google::protobuf::RpcController* controller,
                         const ::chen_im::GetChatSessionMemberReq*,
                         ::chen_im::GetChatSessionMemberRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatSessionMember() not implemented.");
  done->Run();
}

void FriendService::GetPendingFriendEventList(::google::protobuf::RpcController* controller,
                         const ::chen_im::GetPendingFriendEventListReq*,
                         ::chen_im::GetPendingFriendEventListRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPendingFriendEventList() not implemented.");
  done->Run();
}

void FriendService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_friend_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetFriendList(controller,
             ::google::protobuf::down_cast<const ::chen_im::GetFriendListReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::GetFriendListRsp*>(response),
             done);
      break;
    case 1:
      FriendRemove(controller,
             ::google::protobuf::down_cast<const ::chen_im::FriendRemoveReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::FriendRemoveRsp*>(response),
             done);
      break;
    case 2:
      FriendAdd(controller,
             ::google::protobuf::down_cast<const ::chen_im::FriendAddReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::FriendAddRsp*>(response),
             done);
      break;
    case 3:
      FriendAddProcess(controller,
             ::google::protobuf::down_cast<const ::chen_im::FriendAddProcessReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::FriendAddProcessRsp*>(response),
             done);
      break;
    case 4:
      FriendSearch(controller,
             ::google::protobuf::down_cast<const ::chen_im::FriendSearchReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::FriendSearchRsp*>(response),
             done);
      break;
    case 5:
      GetChatSessionList(controller,
             ::google::protobuf::down_cast<const ::chen_im::GetChatSessionListReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::GetChatSessionListRsp*>(response),
             done);
      break;
    case 6:
      ChatSessionCreate(controller,
             ::google::protobuf::down_cast<const ::chen_im::ChatSessionCreateReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::ChatSessionCreateRsp*>(response),
             done);
      break;
    case 7:
      GetChatSessionMember(controller,
             ::google::protobuf::down_cast<const ::chen_im::GetChatSessionMemberReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::GetChatSessionMemberRsp*>(response),
             done);
      break;
    case 8:
      GetPendingFriendEventList(controller,
             ::google::protobuf::down_cast<const ::chen_im::GetPendingFriendEventListReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::GetPendingFriendEventListRsp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::GetFriendListReq::default_instance();
    case 1:
      return ::chen_im::FriendRemoveReq::default_instance();
    case 2:
      return ::chen_im::FriendAddReq::default_instance();
    case 3:
      return ::chen_im::FriendAddProcessReq::default_instance();
    case 4:
      return ::chen_im::FriendSearchReq::default_instance();
    case 5:
      return ::chen_im::GetChatSessionListReq::default_instance();
    case 6:
      return ::chen_im::ChatSessionCreateReq::default_instance();
    case 7:
      return ::chen_im::GetChatSessionMemberReq::default_instance();
    case 8:
      return ::chen_im::GetPendingFriendEventListReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FriendService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::GetFriendListRsp::default_instance();
    case 1:
      return ::chen_im::FriendRemoveRsp::default_instance();
    case 2:
      return ::chen_im::FriendAddRsp::default_instance();
    case 3:
      return ::chen_im::FriendAddProcessRsp::default_instance();
    case 4:
      return ::chen_im::FriendSearchRsp::default_instance();
    case 5:
      return ::chen_im::GetChatSessionListRsp::default_instance();
    case 6:
      return ::chen_im::ChatSessionCreateRsp::default_instance();
    case 7:
      return ::chen_im::GetChatSessionMemberRsp::default_instance();
    case 8:
      return ::chen_im::GetPendingFriendEventListRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendService_Stub::FriendService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendService_Stub::FriendService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendService_Stub::~FriendService_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendService_Stub::GetFriendList(::google::protobuf::RpcController* controller,
                              const ::chen_im::GetFriendListReq* request,
                              ::chen_im::GetFriendListRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendService_Stub::FriendRemove(::google::protobuf::RpcController* controller,
                              const ::chen_im::FriendRemoveReq* request,
                              ::chen_im::FriendRemoveRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendService_Stub::FriendAdd(::google::protobuf::RpcController* controller,
                              const ::chen_im::FriendAddReq* request,
                              ::chen_im::FriendAddRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendService_Stub::FriendAddProcess(::google::protobuf::RpcController* controller,
                              const ::chen_im::FriendAddProcessReq* request,
                              ::chen_im::FriendAddProcessRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendService_Stub::FriendSearch(::google::protobuf::RpcController* controller,
                              const ::chen_im::FriendSearchReq* request,
                              ::chen_im::FriendSearchRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void FriendService_Stub::GetChatSessionList(::google::protobuf::RpcController* controller,
                              const ::chen_im::GetChatSessionListReq* request,
                              ::chen_im::GetChatSessionListRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void FriendService_Stub::ChatSessionCreate(::google::protobuf::RpcController* controller,
                              const ::chen_im::ChatSessionCreateReq* request,
                              ::chen_im::ChatSessionCreateRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void FriendService_Stub::GetChatSessionMember(::google::protobuf::RpcController* controller,
                              const ::chen_im::GetChatSessionMemberReq* request,
                              ::chen_im::GetChatSessionMemberRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void FriendService_Stub::GetPendingFriendEventList(::google::protobuf::RpcController* controller,
                              const ::chen_im::GetPendingFriendEventListReq* request,
                              ::chen_im::GetPendingFriendEventListRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetFriendListReq* Arena::CreateMaybeMessage< ::chen_im::GetFriendListReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetFriendListReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetFriendListRsp* Arena::CreateMaybeMessage< ::chen_im::GetFriendListRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetFriendListRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendRemoveReq* Arena::CreateMaybeMessage< ::chen_im::FriendRemoveReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendRemoveReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendRemoveRsp* Arena::CreateMaybeMessage< ::chen_im::FriendRemoveRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendRemoveRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendAddReq* Arena::CreateMaybeMessage< ::chen_im::FriendAddReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendAddReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendAddRsp* Arena::CreateMaybeMessage< ::chen_im::FriendAddRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendAddRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendAddProcessReq* Arena::CreateMaybeMessage< ::chen_im::FriendAddProcessReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendAddProcessReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendAddProcessRsp* Arena::CreateMaybeMessage< ::chen_im::FriendAddProcessRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendAddProcessRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetPendingFriendEventListReq* Arena::CreateMaybeMessage< ::chen_im::GetPendingFriendEventListReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetPendingFriendEventListReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendEvent* Arena::CreateMaybeMessage< ::chen_im::FriendEvent >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetPendingFriendEventListRsp* Arena::CreateMaybeMessage< ::chen_im::GetPendingFriendEventListRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetPendingFriendEventListRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendSearchReq* Arena::CreateMaybeMessage< ::chen_im::FriendSearchReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendSearchReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FriendSearchRsp* Arena::CreateMaybeMessage< ::chen_im::FriendSearchRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FriendSearchRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetChatSessionListReq* Arena::CreateMaybeMessage< ::chen_im::GetChatSessionListReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetChatSessionListReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetChatSessionListRsp* Arena::CreateMaybeMessage< ::chen_im::GetChatSessionListRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetChatSessionListRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::ChatSessionCreateReq* Arena::CreateMaybeMessage< ::chen_im::ChatSessionCreateReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::ChatSessionCreateReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::ChatSessionCreateRsp* Arena::CreateMaybeMessage< ::chen_im::ChatSessionCreateRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::ChatSessionCreateRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetChatSessionMemberReq* Arena::CreateMaybeMessage< ::chen_im::GetChatSessionMemberReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetChatSessionMemberReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetChatSessionMemberRsp* Arena::CreateMaybeMessage< ::chen_im::GetChatSessionMemberRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetChatSessionMemberRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
