// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_base_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileMessageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImageMessageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeechMessageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringMessageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MessageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_MessageContent;
}  // namespace protobuf_base_2eproto
namespace chen_im {
class UserInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserInfo>
      _instance;
} _UserInfo_default_instance_;
class ChatSessionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatSessionInfo>
      _instance;
} _ChatSessionInfo_default_instance_;
class StringMessageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringMessageInfo>
      _instance;
} _StringMessageInfo_default_instance_;
class ImageMessageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageMessageInfo>
      _instance;
} _ImageMessageInfo_default_instance_;
class FileMessageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileMessageInfo>
      _instance;
} _FileMessageInfo_default_instance_;
class SpeechMessageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechMessageInfo>
      _instance;
} _SpeechMessageInfo_default_instance_;
class MessageContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageContent>
      _instance;
  const ::chen_im::StringMessageInfo* string_message_;
  const ::chen_im::FileMessageInfo* file_message_;
  const ::chen_im::SpeechMessageInfo* speech_message_;
  const ::chen_im::ImageMessageInfo* image_message_;
} _MessageContent_default_instance_;
class MessageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageInfo>
      _instance;
} _MessageInfo_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
class FileDownloadDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileDownloadData>
      _instance;
} _FileDownloadData_default_instance_;
class FileUploadDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileUploadData>
      _instance;
} _FileUploadData_default_instance_;
}  // namespace chen_im
namespace protobuf_base_2eproto {
static void InitDefaultsUserInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_UserInfo_default_instance_;
    new (ptr) ::chen_im::UserInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::UserInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserInfo}, {}};

static void InitDefaultsChatSessionInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_ChatSessionInfo_default_instance_;
    new (ptr) ::chen_im::ChatSessionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::ChatSessionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChatSessionInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChatSessionInfo}, {
      &protobuf_base_2eproto::scc_info_MessageInfo.base,}};

static void InitDefaultsStringMessageInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_StringMessageInfo_default_instance_;
    new (ptr) ::chen_im::StringMessageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::StringMessageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StringMessageInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStringMessageInfo}, {}};

static void InitDefaultsImageMessageInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_ImageMessageInfo_default_instance_;
    new (ptr) ::chen_im::ImageMessageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::ImageMessageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ImageMessageInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImageMessageInfo}, {}};

static void InitDefaultsFileMessageInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FileMessageInfo_default_instance_;
    new (ptr) ::chen_im::FileMessageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FileMessageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileMessageInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileMessageInfo}, {}};

static void InitDefaultsSpeechMessageInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_SpeechMessageInfo_default_instance_;
    new (ptr) ::chen_im::SpeechMessageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::SpeechMessageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeechMessageInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeechMessageInfo}, {}};

static void InitDefaultsMessageContent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_MessageContent_default_instance_;
    new (ptr) ::chen_im::MessageContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::MessageContent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MessageContent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMessageContent}, {
      &protobuf_base_2eproto::scc_info_StringMessageInfo.base,
      &protobuf_base_2eproto::scc_info_FileMessageInfo.base,
      &protobuf_base_2eproto::scc_info_SpeechMessageInfo.base,
      &protobuf_base_2eproto::scc_info_ImageMessageInfo.base,}};

static void InitDefaultsMessageInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_MessageInfo_default_instance_;
    new (ptr) ::chen_im::MessageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::MessageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MessageInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMessageInfo}, {
      &protobuf_base_2eproto::scc_info_UserInfo.base,
      &protobuf_base_2eproto::scc_info_MessageContent.base,}};

static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_Message_default_instance_;
    new (ptr) ::chen_im::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMessage}, {
      &protobuf_base_2eproto::scc_info_MessageInfo.base,}};

static void InitDefaultsFileDownloadData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FileDownloadData_default_instance_;
    new (ptr) ::chen_im::FileDownloadData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FileDownloadData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileDownloadData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileDownloadData}, {}};

static void InitDefaultsFileUploadData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_FileUploadData_default_instance_;
    new (ptr) ::chen_im::FileUploadData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::FileUploadData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileUploadData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileUploadData}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatSessionInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringMessageInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImageMessageInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileMessageInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechMessageInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MessageContent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MessageInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileDownloadData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileUploadData.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::UserInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::UserInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::UserInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::UserInfo, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::UserInfo, avatar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionInfo, single_chat_friend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionInfo, chat_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionInfo, chat_session_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionInfo, prev_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ChatSessionInfo, avatar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::StringMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::StringMessageInfo, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ImageMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ImageMessageInfo, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::ImageMessageInfo, image_content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileMessageInfo, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileMessageInfo, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileMessageInfo, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileMessageInfo, file_contents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechMessageInfo, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechMessageInfo, file_contents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageContent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageContent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageContent, message_type_),
  offsetof(::chen_im::MessageContentDefaultTypeInternal, string_message_),
  offsetof(::chen_im::MessageContentDefaultTypeInternal, file_message_),
  offsetof(::chen_im::MessageContentDefaultTypeInternal, speech_message_),
  offsetof(::chen_im::MessageContentDefaultTypeInternal, image_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageContent, msg_content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageInfo, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageInfo, chat_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageInfo, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::MessageInfo, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::Message, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::Message, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileDownloadData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileDownloadData, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileDownloadData, file_content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileUploadData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileUploadData, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileUploadData, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::FileUploadData, file_content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chen_im::UserInfo)},
  { 10, -1, sizeof(::chen_im::ChatSessionInfo)},
  { 20, -1, sizeof(::chen_im::StringMessageInfo)},
  { 26, -1, sizeof(::chen_im::ImageMessageInfo)},
  { 33, -1, sizeof(::chen_im::FileMessageInfo)},
  { 42, -1, sizeof(::chen_im::SpeechMessageInfo)},
  { 49, -1, sizeof(::chen_im::MessageContent)},
  { 60, -1, sizeof(::chen_im::MessageInfo)},
  { 70, -1, sizeof(::chen_im::Message)},
  { 77, -1, sizeof(::chen_im::FileDownloadData)},
  { 84, -1, sizeof(::chen_im::FileUploadData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_ChatSessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_StringMessageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_ImageMessageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FileMessageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_SpeechMessageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_MessageContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_MessageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FileDownloadData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_FileUploadData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "base.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nbase.proto\022\007chen_im\"a\n\010UserInfo\022\017\n\007use"
      "r_id\030\001 \001(\t\022\020\n\010nickname\030\002 \001(\t\022\023\n\013descript"
      "ion\030\003 \001(\t\022\r\n\005phone\030\004 \001(\t\022\016\n\006avatar\030\005 \001(\014"
      "\"\240\001\n\017ChatSessionInfo\022\035\n\025single_chat_frie"
      "nd_id\030\001 \001(\t\022\027\n\017chat_session_id\030\002 \001(\t\022\031\n\021"
      "chat_session_name\030\003 \001(\t\022*\n\014prev_message\030"
      "\004 \001(\0132\024.chen_im.MessageInfo\022\016\n\006avatar\030\005 "
      "\001(\014\"$\n\021StringMessageInfo\022\017\n\007content\030\001 \001("
      "\t\":\n\020ImageMessageInfo\022\017\n\007file_id\030\001 \001(\t\022\025"
      "\n\rimage_content\030\002 \001(\014\"_\n\017FileMessageInfo"
      "\022\017\n\007file_id\030\001 \001(\t\022\021\n\tfile_size\030\002 \001(\003\022\021\n\t"
      "file_name\030\003 \001(\t\022\025\n\rfile_contents\030\004 \001(\014\";"
      "\n\021SpeechMessageInfo\022\017\n\007file_id\030\001 \001(\t\022\025\n\r"
      "file_contents\030\002 \001(\014\"\235\002\n\016MessageContent\022*"
      "\n\014message_type\030\001 \001(\0162\024.chen_im.MessageTy"
      "pe\0224\n\016string_message\030\002 \001(\0132\032.chen_im.Str"
      "ingMessageInfoH\000\0220\n\014file_message\030\003 \001(\0132\030"
      ".chen_im.FileMessageInfoH\000\0224\n\016speech_mes"
      "sage\030\004 \001(\0132\032.chen_im.SpeechMessageInfoH\000"
      "\0222\n\rimage_message\030\005 \001(\0132\031.chen_im.ImageM"
      "essageInfoH\000B\r\n\013msg_content\"\232\001\n\013MessageI"
      "nfo\022\022\n\nmessage_id\030\001 \001(\t\022\027\n\017chat_session_"
      "id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\003\022!\n\006sender\030\004 "
      "\001(\0132\021.chen_im.UserInfo\022(\n\007message\030\005 \001(\0132"
      "\027.chen_im.MessageContent\"D\n\007Message\022\022\n\nr"
      "equest_id\030\001 \001(\t\022%\n\007message\030\002 \001(\0132\024.chen_"
      "im.MessageInfo\"9\n\020FileDownloadData\022\017\n\007fi"
      "le_id\030\001 \001(\t\022\024\n\014file_content\030\002 \001(\014\"L\n\016Fil"
      "eUploadData\022\021\n\tfile_name\030\001 \001(\t\022\021\n\tfile_s"
      "ize\030\002 \001(\003\022\024\n\014file_content\030\003 \001(\014*:\n\013Messa"
      "geType\022\n\n\006STRING\020\000\022\t\n\005IMAGE\020\001\022\010\n\004FILE\020\002\022"
      "\n\n\006SPEECH\020\003B\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_base_2eproto
namespace chen_im {
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kNicknameFieldNumber;
const int UserInfo::kDescriptionFieldNumber;
const int UserInfo::kPhoneFieldNumber;
const int UserInfo::kAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_UserInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.UserInfo)
}

void UserInfo::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:chen_im.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_UserInfo.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.UserInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.UserInfo.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.UserInfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.UserInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.UserInfo.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes avatar = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string phone = 4;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phone(), output);
  }

  // bytes avatar = 5;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->avatar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // string phone = 4;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.UserInfo.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phone(), target);
  }

  // bytes avatar = 5;
  if (this->avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avatar(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.UserInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string phone = 4;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // bytes avatar = 5;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatar());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_.Swap(&other->avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatSessionInfo::InitAsDefaultInstance() {
  ::chen_im::_ChatSessionInfo_default_instance_._instance.get_mutable()->prev_message_ = const_cast< ::chen_im::MessageInfo*>(
      ::chen_im::MessageInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatSessionInfo::kSingleChatFriendIdFieldNumber;
const int ChatSessionInfo::kChatSessionIdFieldNumber;
const int ChatSessionInfo::kChatSessionNameFieldNumber;
const int ChatSessionInfo::kPrevMessageFieldNumber;
const int ChatSessionInfo::kAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatSessionInfo::ChatSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_ChatSessionInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.ChatSessionInfo)
}
ChatSessionInfo::ChatSessionInfo(const ChatSessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  single_chat_friend_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.single_chat_friend_id().size() > 0) {
    single_chat_friend_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.single_chat_friend_id_);
  }
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_session_id().size() > 0) {
    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
  chat_session_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_session_name().size() > 0) {
    chat_session_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_name_);
  }
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.has_prev_message()) {
    prev_message_ = new ::chen_im::MessageInfo(*from.prev_message_);
  } else {
    prev_message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.ChatSessionInfo)
}

void ChatSessionInfo::SharedCtor() {
  single_chat_friend_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_message_ = NULL;
}

ChatSessionInfo::~ChatSessionInfo() {
  // @@protoc_insertion_point(destructor:chen_im.ChatSessionInfo)
  SharedDtor();
}

void ChatSessionInfo::SharedDtor() {
  single_chat_friend_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prev_message_;
}

void ChatSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatSessionInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatSessionInfo& ChatSessionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_ChatSessionInfo.base);
  return *internal_default_instance();
}


void ChatSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.ChatSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_chat_friend_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && prev_message_ != NULL) {
    delete prev_message_;
  }
  prev_message_ = NULL;
  _internal_metadata_.Clear();
}

bool ChatSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.ChatSessionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string single_chat_friend_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_chat_friend_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->single_chat_friend_id().data(), static_cast<int>(this->single_chat_friend_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionInfo.single_chat_friend_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionInfo.chat_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_session_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_session_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_session_name().data(), static_cast<int>(this->chat_session_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ChatSessionInfo.chat_session_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.MessageInfo prev_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prev_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes avatar = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.ChatSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.ChatSessionInfo)
  return false;
#undef DO_
}

void ChatSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.ChatSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string single_chat_friend_id = 1;
  if (this->single_chat_friend_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->single_chat_friend_id().data(), static_cast<int>(this->single_chat_friend_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionInfo.single_chat_friend_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->single_chat_friend_id(), output);
  }

  // string chat_session_id = 2;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionInfo.chat_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_session_id(), output);
  }

  // string chat_session_name = 3;
  if (this->chat_session_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_name().data(), static_cast<int>(this->chat_session_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionInfo.chat_session_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chat_session_name(), output);
  }

  // .chen_im.MessageInfo prev_message = 4;
  if (this->has_prev_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_prev_message(), output);
  }

  // bytes avatar = 5;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->avatar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.ChatSessionInfo)
}

::google::protobuf::uint8* ChatSessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.ChatSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string single_chat_friend_id = 1;
  if (this->single_chat_friend_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->single_chat_friend_id().data(), static_cast<int>(this->single_chat_friend_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionInfo.single_chat_friend_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->single_chat_friend_id(), target);
  }

  // string chat_session_id = 2;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionInfo.chat_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_session_id(), target);
  }

  // string chat_session_name = 3;
  if (this->chat_session_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_name().data(), static_cast<int>(this->chat_session_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ChatSessionInfo.chat_session_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chat_session_name(), target);
  }

  // .chen_im.MessageInfo prev_message = 4;
  if (this->has_prev_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_prev_message(), deterministic, target);
  }

  // bytes avatar = 5;
  if (this->avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avatar(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.ChatSessionInfo)
  return target;
}

size_t ChatSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.ChatSessionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string single_chat_friend_id = 1;
  if (this->single_chat_friend_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->single_chat_friend_id());
  }

  // string chat_session_id = 2;
  if (this->chat_session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_session_id());
  }

  // string chat_session_name = 3;
  if (this->chat_session_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_session_name());
  }

  // bytes avatar = 5;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatar());
  }

  // .chen_im.MessageInfo prev_message = 4;
  if (this->has_prev_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prev_message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.ChatSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatSessionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatSessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.ChatSessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.ChatSessionInfo)
    MergeFrom(*source);
  }
}

void ChatSessionInfo::MergeFrom(const ChatSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.ChatSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.single_chat_friend_id().size() > 0) {

    single_chat_friend_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.single_chat_friend_id_);
  }
  if (from.chat_session_id().size() > 0) {

    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
  if (from.chat_session_name().size() > 0) {

    chat_session_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_name_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.has_prev_message()) {
    mutable_prev_message()->::chen_im::MessageInfo::MergeFrom(from.prev_message());
  }
}

void ChatSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.ChatSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSessionInfo::CopyFrom(const ChatSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.ChatSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSessionInfo::IsInitialized() const {
  return true;
}

void ChatSessionInfo::Swap(ChatSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatSessionInfo::InternalSwap(ChatSessionInfo* other) {
  using std::swap;
  single_chat_friend_id_.Swap(&other->single_chat_friend_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_session_id_.Swap(&other->chat_session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_session_name_.Swap(&other->chat_session_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_.Swap(&other->avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prev_message_, other->prev_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatSessionInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StringMessageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringMessageInfo::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringMessageInfo::StringMessageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_StringMessageInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.StringMessageInfo)
}
StringMessageInfo::StringMessageInfo(const StringMessageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.StringMessageInfo)
}

void StringMessageInfo::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StringMessageInfo::~StringMessageInfo() {
  // @@protoc_insertion_point(destructor:chen_im.StringMessageInfo)
  SharedDtor();
}

void StringMessageInfo::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StringMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StringMessageInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringMessageInfo& StringMessageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_StringMessageInfo.base);
  return *internal_default_instance();
}


void StringMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.StringMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StringMessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.StringMessageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.StringMessageInfo.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.StringMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.StringMessageInfo)
  return false;
#undef DO_
}

void StringMessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.StringMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.StringMessageInfo.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.StringMessageInfo)
}

::google::protobuf::uint8* StringMessageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.StringMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.StringMessageInfo.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.StringMessageInfo)
  return target;
}

size_t StringMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.StringMessageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringMessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.StringMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StringMessageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringMessageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.StringMessageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.StringMessageInfo)
    MergeFrom(*source);
  }
}

void StringMessageInfo::MergeFrom(const StringMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.StringMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void StringMessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.StringMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMessageInfo::CopyFrom(const StringMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.StringMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMessageInfo::IsInitialized() const {
  return true;
}

void StringMessageInfo::Swap(StringMessageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringMessageInfo::InternalSwap(StringMessageInfo* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StringMessageInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageMessageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageMessageInfo::kFileIdFieldNumber;
const int ImageMessageInfo::kImageContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageMessageInfo::ImageMessageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_ImageMessageInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.ImageMessageInfo)
}
ImageMessageInfo::ImageMessageInfo(const ImageMessageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_id().size() > 0) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  image_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_content().size() > 0) {
    image_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_content_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.ImageMessageInfo)
}

void ImageMessageInfo::SharedCtor() {
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImageMessageInfo::~ImageMessageInfo() {
  // @@protoc_insertion_point(destructor:chen_im.ImageMessageInfo)
  SharedDtor();
}

void ImageMessageInfo::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImageMessageInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageMessageInfo& ImageMessageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_ImageMessageInfo.base);
  return *internal_default_instance();
}


void ImageMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.ImageMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ImageMessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.ImageMessageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.ImageMessageInfo.file_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.ImageMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.ImageMessageInfo)
  return false;
#undef DO_
}

void ImageMessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.ImageMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ImageMessageInfo.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // bytes image_content = 2;
  if (this->image_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.ImageMessageInfo)
}

::google::protobuf::uint8* ImageMessageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.ImageMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.ImageMessageInfo.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // bytes image_content = 2;
  if (this->image_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.ImageMessageInfo)
  return target;
}

size_t ImageMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.ImageMessageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_id = 1;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  // bytes image_content = 2;
  if (this->image_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageMessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.ImageMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMessageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageMessageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.ImageMessageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.ImageMessageInfo)
    MergeFrom(*source);
  }
}

void ImageMessageInfo::MergeFrom(const ImageMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.ImageMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.image_content().size() > 0) {

    image_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_content_);
  }
}

void ImageMessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.ImageMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMessageInfo::CopyFrom(const ImageMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.ImageMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMessageInfo::IsInitialized() const {
  return true;
}

void ImageMessageInfo::Swap(ImageMessageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageMessageInfo::InternalSwap(ImageMessageInfo* other) {
  using std::swap;
  file_id_.Swap(&other->file_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_content_.Swap(&other->image_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImageMessageInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileMessageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileMessageInfo::kFileIdFieldNumber;
const int FileMessageInfo::kFileSizeFieldNumber;
const int FileMessageInfo::kFileNameFieldNumber;
const int FileMessageInfo::kFileContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileMessageInfo::FileMessageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_FileMessageInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FileMessageInfo)
}
FileMessageInfo::FileMessageInfo(const FileMessageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_id().size() > 0) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  file_contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_contents().size() > 0) {
    file_contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_contents_);
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:chen_im.FileMessageInfo)
}

void FileMessageInfo::SharedCtor() {
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_LONGLONG(0);
}

FileMessageInfo::~FileMessageInfo() {
  // @@protoc_insertion_point(destructor:chen_im.FileMessageInfo)
  SharedDtor();
}

void FileMessageInfo::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileMessageInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileMessageInfo& FileMessageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_FileMessageInfo.base);
  return *internal_default_instance();
}


void FileMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FileMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FileMessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FileMessageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FileMessageInfo.file_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FileMessageInfo.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file_contents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FileMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FileMessageInfo)
  return false;
#undef DO_
}

void FileMessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FileMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileMessageInfo.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_size(), output);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileMessageInfo.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // bytes file_contents = 4;
  if (this->file_contents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->file_contents(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FileMessageInfo)
}

::google::protobuf::uint8* FileMessageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FileMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileMessageInfo.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_size(), target);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileMessageInfo.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // bytes file_contents = 4;
  if (this->file_contents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->file_contents(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FileMessageInfo)
  return target;
}

size_t FileMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FileMessageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_id = 1;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // bytes file_contents = 4;
  if (this->file_contents().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_contents());
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileMessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FileMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileMessageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileMessageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FileMessageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FileMessageInfo)
    MergeFrom(*source);
  }
}

void FileMessageInfo::MergeFrom(const FileMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FileMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_contents().size() > 0) {

    file_contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_contents_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
}

void FileMessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FileMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMessageInfo::CopyFrom(const FileMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FileMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMessageInfo::IsInitialized() const {
  return true;
}

void FileMessageInfo::Swap(FileMessageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileMessageInfo::InternalSwap(FileMessageInfo* other) {
  using std::swap;
  file_id_.Swap(&other->file_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_contents_.Swap(&other->file_contents_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileMessageInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechMessageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechMessageInfo::kFileIdFieldNumber;
const int SpeechMessageInfo::kFileContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechMessageInfo::SpeechMessageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_SpeechMessageInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.SpeechMessageInfo)
}
SpeechMessageInfo::SpeechMessageInfo(const SpeechMessageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_id().size() > 0) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  file_contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_contents().size() > 0) {
    file_contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_contents_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.SpeechMessageInfo)
}

void SpeechMessageInfo::SharedCtor() {
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpeechMessageInfo::~SpeechMessageInfo() {
  // @@protoc_insertion_point(destructor:chen_im.SpeechMessageInfo)
  SharedDtor();
}

void SpeechMessageInfo::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechMessageInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechMessageInfo& SpeechMessageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_SpeechMessageInfo.base);
  return *internal_default_instance();
}


void SpeechMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.SpeechMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SpeechMessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.SpeechMessageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.SpeechMessageInfo.file_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file_contents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.SpeechMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.SpeechMessageInfo)
  return false;
#undef DO_
}

void SpeechMessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.SpeechMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechMessageInfo.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // bytes file_contents = 2;
  if (this->file_contents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->file_contents(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.SpeechMessageInfo)
}

::google::protobuf::uint8* SpeechMessageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.SpeechMessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechMessageInfo.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // bytes file_contents = 2;
  if (this->file_contents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_contents(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.SpeechMessageInfo)
  return target;
}

size_t SpeechMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.SpeechMessageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_id = 1;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  // bytes file_contents = 2;
  if (this->file_contents().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_contents());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechMessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.SpeechMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechMessageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechMessageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.SpeechMessageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.SpeechMessageInfo)
    MergeFrom(*source);
  }
}

void SpeechMessageInfo::MergeFrom(const SpeechMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.SpeechMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.file_contents().size() > 0) {

    file_contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_contents_);
  }
}

void SpeechMessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.SpeechMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechMessageInfo::CopyFrom(const SpeechMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.SpeechMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechMessageInfo::IsInitialized() const {
  return true;
}

void SpeechMessageInfo::Swap(SpeechMessageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechMessageInfo::InternalSwap(SpeechMessageInfo* other) {
  using std::swap;
  file_id_.Swap(&other->file_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_contents_.Swap(&other->file_contents_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechMessageInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageContent::InitAsDefaultInstance() {
  ::chen_im::_MessageContent_default_instance_.string_message_ = const_cast< ::chen_im::StringMessageInfo*>(
      ::chen_im::StringMessageInfo::internal_default_instance());
  ::chen_im::_MessageContent_default_instance_.file_message_ = const_cast< ::chen_im::FileMessageInfo*>(
      ::chen_im::FileMessageInfo::internal_default_instance());
  ::chen_im::_MessageContent_default_instance_.speech_message_ = const_cast< ::chen_im::SpeechMessageInfo*>(
      ::chen_im::SpeechMessageInfo::internal_default_instance());
  ::chen_im::_MessageContent_default_instance_.image_message_ = const_cast< ::chen_im::ImageMessageInfo*>(
      ::chen_im::ImageMessageInfo::internal_default_instance());
}
void MessageContent::set_allocated_string_message(::chen_im::StringMessageInfo* string_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg_content();
  if (string_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_message, submessage_arena);
    }
    set_has_string_message();
    msg_content_.string_message_ = string_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageContent.string_message)
}
void MessageContent::set_allocated_file_message(::chen_im::FileMessageInfo* file_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg_content();
  if (file_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_message, submessage_arena);
    }
    set_has_file_message();
    msg_content_.file_message_ = file_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageContent.file_message)
}
void MessageContent::set_allocated_speech_message(::chen_im::SpeechMessageInfo* speech_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg_content();
  if (speech_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speech_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speech_message, submessage_arena);
    }
    set_has_speech_message();
    msg_content_.speech_message_ = speech_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageContent.speech_message)
}
void MessageContent::set_allocated_image_message(::chen_im::ImageMessageInfo* image_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg_content();
  if (image_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_message, submessage_arena);
    }
    set_has_image_message();
    msg_content_.image_message_ = image_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageContent.image_message)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageContent::kMessageTypeFieldNumber;
const int MessageContent::kStringMessageFieldNumber;
const int MessageContent::kFileMessageFieldNumber;
const int MessageContent::kSpeechMessageFieldNumber;
const int MessageContent::kImageMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageContent::MessageContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_MessageContent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.MessageContent)
}
MessageContent::MessageContent(const MessageContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_type_ = from.message_type_;
  clear_has_msg_content();
  switch (from.msg_content_case()) {
    case kStringMessage: {
      mutable_string_message()->::chen_im::StringMessageInfo::MergeFrom(from.string_message());
      break;
    }
    case kFileMessage: {
      mutable_file_message()->::chen_im::FileMessageInfo::MergeFrom(from.file_message());
      break;
    }
    case kSpeechMessage: {
      mutable_speech_message()->::chen_im::SpeechMessageInfo::MergeFrom(from.speech_message());
      break;
    }
    case kImageMessage: {
      mutable_image_message()->::chen_im::ImageMessageInfo::MergeFrom(from.image_message());
      break;
    }
    case MSG_CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.MessageContent)
}

void MessageContent::SharedCtor() {
  message_type_ = 0;
  clear_has_msg_content();
}

MessageContent::~MessageContent() {
  // @@protoc_insertion_point(destructor:chen_im.MessageContent)
  SharedDtor();
}

void MessageContent::SharedDtor() {
  if (has_msg_content()) {
    clear_msg_content();
  }
}

void MessageContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MessageContent::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageContent& MessageContent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_MessageContent.base);
  return *internal_default_instance();
}


void MessageContent::clear_msg_content() {
// @@protoc_insertion_point(one_of_clear_start:chen_im.MessageContent)
  switch (msg_content_case()) {
    case kStringMessage: {
      delete msg_content_.string_message_;
      break;
    }
    case kFileMessage: {
      delete msg_content_.file_message_;
      break;
    }
    case kSpeechMessage: {
      delete msg_content_.speech_message_;
      break;
    }
    case kImageMessage: {
      delete msg_content_.image_message_;
      break;
    }
    case MSG_CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_CONTENT_NOT_SET;
}


void MessageContent::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.MessageContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_type_ = 0;
  clear_msg_content();
  _internal_metadata_.Clear();
}

bool MessageContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.MessageContent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chen_im.MessageType message_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::chen_im::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.StringMessageInfo string_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.FileMessageInfo file_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.SpeechMessageInfo speech_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speech_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.ImageMessageInfo image_message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.MessageContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.MessageContent)
  return false;
#undef DO_
}

void MessageContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.MessageContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.MessageType message_type = 1;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // .chen_im.StringMessageInfo string_message = 2;
  if (has_string_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_string_message(), output);
  }

  // .chen_im.FileMessageInfo file_message = 3;
  if (has_file_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_file_message(), output);
  }

  // .chen_im.SpeechMessageInfo speech_message = 4;
  if (has_speech_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_speech_message(), output);
  }

  // .chen_im.ImageMessageInfo image_message = 5;
  if (has_image_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_image_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.MessageContent)
}

::google::protobuf::uint8* MessageContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.MessageContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chen_im.MessageType message_type = 1;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // .chen_im.StringMessageInfo string_message = 2;
  if (has_string_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_string_message(), deterministic, target);
  }

  // .chen_im.FileMessageInfo file_message = 3;
  if (has_file_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_file_message(), deterministic, target);
  }

  // .chen_im.SpeechMessageInfo speech_message = 4;
  if (has_speech_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_speech_message(), deterministic, target);
  }

  // .chen_im.ImageMessageInfo image_message = 5;
  if (has_image_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_image_message(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.MessageContent)
  return target;
}

size_t MessageContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.MessageContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .chen_im.MessageType message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  switch (msg_content_case()) {
    // .chen_im.StringMessageInfo string_message = 2;
    case kStringMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_content_.string_message_);
      break;
    }
    // .chen_im.FileMessageInfo file_message = 3;
    case kFileMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_content_.file_message_);
      break;
    }
    // .chen_im.SpeechMessageInfo speech_message = 4;
    case kSpeechMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_content_.speech_message_);
      break;
    }
    // .chen_im.ImageMessageInfo image_message = 5;
    case kImageMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_content_.image_message_);
      break;
    }
    case MSG_CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.MessageContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.MessageContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.MessageContent)
    MergeFrom(*source);
  }
}

void MessageContent::MergeFrom(const MessageContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.MessageContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  switch (from.msg_content_case()) {
    case kStringMessage: {
      mutable_string_message()->::chen_im::StringMessageInfo::MergeFrom(from.string_message());
      break;
    }
    case kFileMessage: {
      mutable_file_message()->::chen_im::FileMessageInfo::MergeFrom(from.file_message());
      break;
    }
    case kSpeechMessage: {
      mutable_speech_message()->::chen_im::SpeechMessageInfo::MergeFrom(from.speech_message());
      break;
    }
    case kImageMessage: {
      mutable_image_message()->::chen_im::ImageMessageInfo::MergeFrom(from.image_message());
      break;
    }
    case MSG_CONTENT_NOT_SET: {
      break;
    }
  }
}

void MessageContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.MessageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageContent::CopyFrom(const MessageContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.MessageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageContent::IsInitialized() const {
  return true;
}

void MessageContent::Swap(MessageContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageContent::InternalSwap(MessageContent* other) {
  using std::swap;
  swap(message_type_, other->message_type_);
  swap(msg_content_, other->msg_content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MessageContent::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageInfo::InitAsDefaultInstance() {
  ::chen_im::_MessageInfo_default_instance_._instance.get_mutable()->sender_ = const_cast< ::chen_im::UserInfo*>(
      ::chen_im::UserInfo::internal_default_instance());
  ::chen_im::_MessageInfo_default_instance_._instance.get_mutable()->message_ = const_cast< ::chen_im::MessageContent*>(
      ::chen_im::MessageContent::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageInfo::kMessageIdFieldNumber;
const int MessageInfo::kChatSessionIdFieldNumber;
const int MessageInfo::kTimestampFieldNumber;
const int MessageInfo::kSenderFieldNumber;
const int MessageInfo::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageInfo::MessageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_MessageInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.MessageInfo)
}
MessageInfo::MessageInfo(const MessageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_session_id().size() > 0) {
    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
  if (from.has_sender()) {
    sender_ = new ::chen_im::UserInfo(*from.sender_);
  } else {
    sender_ = NULL;
  }
  if (from.has_message()) {
    message_ = new ::chen_im::MessageContent(*from.message_);
  } else {
    message_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:chen_im.MessageInfo)
}

void MessageInfo::SharedCtor() {
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(timestamp_));
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:chen_im.MessageInfo)
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
  if (this != internal_default_instance()) delete message_;
}

void MessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MessageInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageInfo& MessageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_MessageInfo.base);
  return *internal_default_instance();
}


void MessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.MessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool MessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.MessageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.MessageInfo.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.MessageInfo.chat_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.UserInfo sender = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.MessageContent message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.MessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.MessageInfo)
  return false;
#undef DO_
}

void MessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.MessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.MessageInfo.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_id(), output);
  }

  // string chat_session_id = 2;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.MessageInfo.chat_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_session_id(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // .chen_im.UserInfo sender = 4;
  if (this->has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_sender(), output);
  }

  // .chen_im.MessageContent message = 5;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.MessageInfo)
}

::google::protobuf::uint8* MessageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.MessageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.MessageInfo.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_id(), target);
  }

  // string chat_session_id = 2;
  if (this->chat_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_session_id().data(), static_cast<int>(this->chat_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.MessageInfo.chat_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_session_id(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // .chen_im.UserInfo sender = 4;
  if (this->has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_sender(), deterministic, target);
  }

  // .chen_im.MessageContent message = 5;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_message(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.MessageInfo)
  return target;
}

size_t MessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.MessageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // string chat_session_id = 2;
  if (this->chat_session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_session_id());
  }

  // .chen_im.UserInfo sender = 4;
  if (this->has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // .chen_im.MessageContent message = 5;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.MessageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.MessageInfo)
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.chat_session_id().size() > 0) {

    chat_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_session_id_);
  }
  if (from.has_sender()) {
    mutable_sender()->::chen_im::UserInfo::MergeFrom(from.sender());
  }
  if (from.has_message()) {
    mutable_message()->::chen_im::MessageContent::MergeFrom(from.message());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void MessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  return true;
}

void MessageInfo::Swap(MessageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageInfo::InternalSwap(MessageInfo* other) {
  using std::swap;
  message_id_.Swap(&other->message_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_session_id_.Swap(&other->chat_session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(message_, other->message_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MessageInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::chen_im::_Message_default_instance_._instance.get_mutable()->message_ = const_cast< ::chen_im::MessageInfo*>(
      ::chen_im::MessageInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kRequestIdFieldNumber;
const int Message::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_message()) {
    message_ = new ::chen_im::MessageInfo(*from.message_);
  } else {
    message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.Message)
}

void Message::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:chen_im.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.Message.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.MessageInfo message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.Message.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // .chen_im.MessageInfo message = 2;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.Message.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // .chen_im.MessageInfo message = 2;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_message(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // .chen_im.MessageInfo message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_message()) {
    mutable_message()->::chen_im::MessageInfo::MergeFrom(from.message());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileDownloadData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDownloadData::kFileIdFieldNumber;
const int FileDownloadData::kFileContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDownloadData::FileDownloadData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_FileDownloadData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FileDownloadData)
}
FileDownloadData::FileDownloadData(const FileDownloadData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_id().size() > 0) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  file_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_content().size() > 0) {
    file_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_content_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.FileDownloadData)
}

void FileDownloadData::SharedCtor() {
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileDownloadData::~FileDownloadData() {
  // @@protoc_insertion_point(destructor:chen_im.FileDownloadData)
  SharedDtor();
}

void FileDownloadData::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileDownloadData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileDownloadData::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileDownloadData& FileDownloadData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_FileDownloadData.base);
  return *internal_default_instance();
}


void FileDownloadData::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FileDownloadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileDownloadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FileDownloadData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FileDownloadData.file_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FileDownloadData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FileDownloadData)
  return false;
#undef DO_
}

void FileDownloadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FileDownloadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileDownloadData.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // bytes file_content = 2;
  if (this->file_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->file_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FileDownloadData)
}

::google::protobuf::uint8* FileDownloadData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FileDownloadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileDownloadData.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // bytes file_content = 2;
  if (this->file_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FileDownloadData)
  return target;
}

size_t FileDownloadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FileDownloadData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_id = 1;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  // bytes file_content = 2;
  if (this->file_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileDownloadData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FileDownloadData)
  GOOGLE_DCHECK_NE(&from, this);
  const FileDownloadData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileDownloadData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FileDownloadData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FileDownloadData)
    MergeFrom(*source);
  }
}

void FileDownloadData::MergeFrom(const FileDownloadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FileDownloadData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.file_content().size() > 0) {

    file_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_content_);
  }
}

void FileDownloadData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FileDownloadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDownloadData::CopyFrom(const FileDownloadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FileDownloadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDownloadData::IsInitialized() const {
  return true;
}

void FileDownloadData::Swap(FileDownloadData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDownloadData::InternalSwap(FileDownloadData* other) {
  using std::swap;
  file_id_.Swap(&other->file_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_.Swap(&other->file_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileDownloadData::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileUploadData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileUploadData::kFileNameFieldNumber;
const int FileUploadData::kFileSizeFieldNumber;
const int FileUploadData::kFileContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileUploadData::FileUploadData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_2eproto::scc_info_FileUploadData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.FileUploadData)
}
FileUploadData::FileUploadData(const FileUploadData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  file_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_content().size() > 0) {
    file_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_content_);
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:chen_im.FileUploadData)
}

void FileUploadData::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_LONGLONG(0);
}

FileUploadData::~FileUploadData() {
  // @@protoc_insertion_point(destructor:chen_im.FileUploadData)
  SharedDtor();
}

void FileUploadData::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileUploadData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileUploadData::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileUploadData& FileUploadData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_2eproto::scc_info_FileUploadData.base);
  return *internal_default_instance();
}


void FileUploadData::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.FileUploadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FileUploadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.FileUploadData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.FileUploadData.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file_content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.FileUploadData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.FileUploadData)
  return false;
#undef DO_
}

void FileUploadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.FileUploadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileUploadData.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_size(), output);
  }

  // bytes file_content = 3;
  if (this->file_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->file_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.FileUploadData)
}

::google::protobuf::uint8* FileUploadData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.FileUploadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.FileUploadData.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_size(), target);
  }

  // bytes file_content = 3;
  if (this->file_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.FileUploadData)
  return target;
}

size_t FileUploadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.FileUploadData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // bytes file_content = 3;
  if (this->file_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_content());
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileUploadData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.FileUploadData)
  GOOGLE_DCHECK_NE(&from, this);
  const FileUploadData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileUploadData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.FileUploadData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.FileUploadData)
    MergeFrom(*source);
  }
}

void FileUploadData::MergeFrom(const FileUploadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.FileUploadData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_content().size() > 0) {

    file_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_content_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
}

void FileUploadData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.FileUploadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileUploadData::CopyFrom(const FileUploadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.FileUploadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileUploadData::IsInitialized() const {
  return true;
}

void FileUploadData::Swap(FileUploadData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileUploadData::InternalSwap(FileUploadData* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_.Swap(&other->file_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileUploadData::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::UserInfo* Arena::CreateMaybeMessage< ::chen_im::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::UserInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::ChatSessionInfo* Arena::CreateMaybeMessage< ::chen_im::ChatSessionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::ChatSessionInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::StringMessageInfo* Arena::CreateMaybeMessage< ::chen_im::StringMessageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::StringMessageInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::ImageMessageInfo* Arena::CreateMaybeMessage< ::chen_im::ImageMessageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::ImageMessageInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FileMessageInfo* Arena::CreateMaybeMessage< ::chen_im::FileMessageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FileMessageInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::SpeechMessageInfo* Arena::CreateMaybeMessage< ::chen_im::SpeechMessageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::SpeechMessageInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::MessageContent* Arena::CreateMaybeMessage< ::chen_im::MessageContent >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::MessageContent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::MessageInfo* Arena::CreateMaybeMessage< ::chen_im::MessageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::MessageInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::Message* Arena::CreateMaybeMessage< ::chen_im::Message >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::Message >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FileDownloadData* Arena::CreateMaybeMessage< ::chen_im::FileDownloadData >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FileDownloadData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::FileUploadData* Arena::CreateMaybeMessage< ::chen_im::FileUploadData >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::FileUploadData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
