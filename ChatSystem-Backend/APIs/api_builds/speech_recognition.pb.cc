// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech_recognition.proto

#include "speech_recognition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace chen_im {
class SpeechRecognitionReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionReq>
      _instance;
} _SpeechRecognitionReq_default_instance_;
class SpeechRecognitionRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionRsp>
      _instance;
} _SpeechRecognitionRsp_default_instance_;
}  // namespace chen_im
namespace protobuf_speech_5frecognition_2eproto {
static void InitDefaultsSpeechRecognitionReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_SpeechRecognitionReq_default_instance_;
    new (ptr) ::chen_im::SpeechRecognitionReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::SpeechRecognitionReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeechRecognitionReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeechRecognitionReq}, {}};

static void InitDefaultsSpeechRecognitionRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_SpeechRecognitionRsp_default_instance_;
    new (ptr) ::chen_im::SpeechRecognitionRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::SpeechRecognitionRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeechRecognitionRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeechRecognitionRsp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechRecognitionReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechRecognitionRsp.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionReq, speech_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionReq, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::SpeechRecognitionRsp, recognition_result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chen_im::SpeechRecognitionReq)},
  { 9, -1, sizeof(::chen_im::SpeechRecognitionRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_SpeechRecognitionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_SpeechRecognitionRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "speech_recognition.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030speech_recognition.proto\022\007chen_im\"g\n\024S"
      "peechRecognitionReq\022\022\n\nrequest_id\030\001 \001(\t\022"
      "\026\n\016speech_content\030\002 \001(\014\022\017\n\007user_id\030\003 \001(\t"
      "\022\022\n\nsession_id\030\004 \001(\t\"g\n\024SpeechRecognitio"
      "nRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001("
      "\010\022\016\n\006errmsg\030\003 \001(\t\022\032\n\022recognition_result\030"
      "\004 \001(\t2b\n\rSpeechService\022Q\n\021SpeechRecognit"
      "ion\022\035.chen_im.SpeechRecognitionReq\032\035.che"
      "n_im.SpeechRecognitionRspB\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speech_recognition.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_speech_5frecognition_2eproto
namespace chen_im {

// ===================================================================

void SpeechRecognitionReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionReq::kRequestIdFieldNumber;
const int SpeechRecognitionReq::kSpeechContentFieldNumber;
const int SpeechRecognitionReq::kUserIdFieldNumber;
const int SpeechRecognitionReq::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionReq::SpeechRecognitionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_speech_5frecognition_2eproto::scc_info_SpeechRecognitionReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.SpeechRecognitionReq)
}
SpeechRecognitionReq::SpeechRecognitionReq(const SpeechRecognitionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  speech_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.speech_content().size() > 0) {
    speech_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speech_content_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.SpeechRecognitionReq)
}

void SpeechRecognitionReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speech_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpeechRecognitionReq::~SpeechRecognitionReq() {
  // @@protoc_insertion_point(destructor:chen_im.SpeechRecognitionReq)
  SharedDtor();
}

void SpeechRecognitionReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speech_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechRecognitionReq::descriptor() {
  ::protobuf_speech_5frecognition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speech_5frecognition_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionReq& SpeechRecognitionReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_speech_5frecognition_2eproto::scc_info_SpeechRecognitionReq.base);
  return *internal_default_instance();
}


void SpeechRecognitionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.SpeechRecognitionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speech_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SpeechRecognitionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.SpeechRecognitionReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.SpeechRecognitionReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes speech_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_speech_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.SpeechRecognitionReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.SpeechRecognitionReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.SpeechRecognitionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.SpeechRecognitionReq)
  return false;
#undef DO_
}

void SpeechRecognitionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.SpeechRecognitionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bytes speech_content = 2;
  if (this->speech_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->speech_content(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.SpeechRecognitionReq)
}

::google::protobuf::uint8* SpeechRecognitionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.SpeechRecognitionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bytes speech_content = 2;
  if (this->speech_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->speech_content(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.SpeechRecognitionReq)
  return target;
}

size_t SpeechRecognitionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.SpeechRecognitionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // bytes speech_content = 2;
  if (this->speech_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->speech_content());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.SpeechRecognitionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.SpeechRecognitionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.SpeechRecognitionReq)
    MergeFrom(*source);
  }
}

void SpeechRecognitionReq::MergeFrom(const SpeechRecognitionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.SpeechRecognitionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.speech_content().size() > 0) {

    speech_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speech_content_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void SpeechRecognitionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.SpeechRecognitionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionReq::CopyFrom(const SpeechRecognitionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.SpeechRecognitionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionReq::IsInitialized() const {
  return true;
}

void SpeechRecognitionReq::Swap(SpeechRecognitionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechRecognitionReq::InternalSwap(SpeechRecognitionReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  speech_content_.Swap(&other->speech_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechRecognitionReq::GetMetadata() const {
  protobuf_speech_5frecognition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speech_5frecognition_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechRecognitionRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionRsp::kRequestIdFieldNumber;
const int SpeechRecognitionRsp::kSuccessFieldNumber;
const int SpeechRecognitionRsp::kErrmsgFieldNumber;
const int SpeechRecognitionRsp::kRecognitionResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionRsp::SpeechRecognitionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_speech_5frecognition_2eproto::scc_info_SpeechRecognitionRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.SpeechRecognitionRsp)
}
SpeechRecognitionRsp::SpeechRecognitionRsp(const SpeechRecognitionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  recognition_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recognition_result().size() > 0) {
    recognition_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recognition_result_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.SpeechRecognitionRsp)
}

void SpeechRecognitionRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recognition_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

SpeechRecognitionRsp::~SpeechRecognitionRsp() {
  // @@protoc_insertion_point(destructor:chen_im.SpeechRecognitionRsp)
  SharedDtor();
}

void SpeechRecognitionRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recognition_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechRecognitionRsp::descriptor() {
  ::protobuf_speech_5frecognition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speech_5frecognition_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionRsp& SpeechRecognitionRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_speech_5frecognition_2eproto::scc_info_SpeechRecognitionRsp.base);
  return *internal_default_instance();
}


void SpeechRecognitionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.SpeechRecognitionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recognition_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool SpeechRecognitionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.SpeechRecognitionRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.SpeechRecognitionRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.SpeechRecognitionRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recognition_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recognition_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recognition_result().data(), static_cast<int>(this->recognition_result().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.SpeechRecognitionRsp.recognition_result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.SpeechRecognitionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.SpeechRecognitionRsp)
  return false;
#undef DO_
}

void SpeechRecognitionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.SpeechRecognitionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // string recognition_result = 4;
  if (this->recognition_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recognition_result().data(), static_cast<int>(this->recognition_result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionRsp.recognition_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->recognition_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.SpeechRecognitionRsp)
}

::google::protobuf::uint8* SpeechRecognitionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.SpeechRecognitionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // string recognition_result = 4;
  if (this->recognition_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recognition_result().data(), static_cast<int>(this->recognition_result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.SpeechRecognitionRsp.recognition_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recognition_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.SpeechRecognitionRsp)
  return target;
}

size_t SpeechRecognitionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.SpeechRecognitionRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // string recognition_result = 4;
  if (this->recognition_result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recognition_result());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.SpeechRecognitionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.SpeechRecognitionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.SpeechRecognitionRsp)
    MergeFrom(*source);
  }
}

void SpeechRecognitionRsp::MergeFrom(const SpeechRecognitionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.SpeechRecognitionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.recognition_result().size() > 0) {

    recognition_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recognition_result_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SpeechRecognitionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.SpeechRecognitionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionRsp::CopyFrom(const SpeechRecognitionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.SpeechRecognitionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionRsp::IsInitialized() const {
  return true;
}

void SpeechRecognitionRsp::Swap(SpeechRecognitionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechRecognitionRsp::InternalSwap(SpeechRecognitionRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recognition_result_.Swap(&other->recognition_result_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechRecognitionRsp::GetMetadata() const {
  protobuf_speech_5frecognition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speech_5frecognition_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SpeechService::~SpeechService() {}

const ::google::protobuf::ServiceDescriptor* SpeechService::descriptor() {
  protobuf_speech_5frecognition_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_speech_5frecognition_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* SpeechService::GetDescriptor() {
  return descriptor();
}

void SpeechService::SpeechRecognition(::google::protobuf::RpcController* controller,
                         const ::chen_im::SpeechRecognitionReq*,
                         ::chen_im::SpeechRecognitionRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SpeechRecognition() not implemented.");
  done->Run();
}

void SpeechService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_speech_5frecognition_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      SpeechRecognition(controller,
             ::google::protobuf::down_cast<const ::chen_im::SpeechRecognitionReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::SpeechRecognitionRsp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SpeechService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::SpeechRecognitionReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SpeechService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::SpeechRecognitionRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SpeechService_Stub::SpeechService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SpeechService_Stub::SpeechService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SpeechService_Stub::~SpeechService_Stub() {
  if (owns_channel_) delete channel_;
}

void SpeechService_Stub::SpeechRecognition(::google::protobuf::RpcController* controller,
                              const ::chen_im::SpeechRecognitionReq* request,
                              ::chen_im::SpeechRecognitionRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::SpeechRecognitionReq* Arena::CreateMaybeMessage< ::chen_im::SpeechRecognitionReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::SpeechRecognitionReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::SpeechRecognitionRsp* Arena::CreateMaybeMessage< ::chen_im::SpeechRecognitionRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::SpeechRecognitionRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
