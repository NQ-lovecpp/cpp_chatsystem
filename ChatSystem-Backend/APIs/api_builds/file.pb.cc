// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#include "file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_base_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileDownloadData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileMessageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileUploadData;
}  // namespace protobuf_base_2eproto
namespace protobuf_file_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetMultiFileRsp_FileDataEntry_DoNotUse;
}  // namespace protobuf_file_2eproto
namespace chen_im {
class GetSingleFileReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSingleFileReq>
      _instance;
} _GetSingleFileReq_default_instance_;
class GetSingleFileRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSingleFileRsp>
      _instance;
} _GetSingleFileRsp_default_instance_;
class GetMultiFileReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMultiFileReq>
      _instance;
} _GetMultiFileReq_default_instance_;
class GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMultiFileRsp_FileDataEntry_DoNotUse>
      _instance;
} _GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_;
class GetMultiFileRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMultiFileRsp>
      _instance;
} _GetMultiFileRsp_default_instance_;
class PutSingleFileReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutSingleFileReq>
      _instance;
} _PutSingleFileReq_default_instance_;
class PutSingleFileRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutSingleFileRsp>
      _instance;
} _PutSingleFileRsp_default_instance_;
class PutMultiFileReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutMultiFileReq>
      _instance;
} _PutMultiFileReq_default_instance_;
class PutMultiFileRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutMultiFileRsp>
      _instance;
} _PutMultiFileRsp_default_instance_;
}  // namespace chen_im
namespace protobuf_file_2eproto {
static void InitDefaultsGetSingleFileReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetSingleFileReq_default_instance_;
    new (ptr) ::chen_im::GetSingleFileReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetSingleFileReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSingleFileReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSingleFileReq}, {}};

static void InitDefaultsGetSingleFileRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetSingleFileRsp_default_instance_;
    new (ptr) ::chen_im::GetSingleFileRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetSingleFileRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetSingleFileRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetSingleFileRsp}, {
      &protobuf_base_2eproto::scc_info_FileDownloadData.base,}};

static void InitDefaultsGetMultiFileReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetMultiFileReq_default_instance_;
    new (ptr) ::chen_im::GetMultiFileReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetMultiFileReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetMultiFileReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetMultiFileReq}, {}};

static void InitDefaultsGetMultiFileRsp_FileDataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_;
    new (ptr) ::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse();
  }
  ::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetMultiFileRsp_FileDataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetMultiFileRsp_FileDataEntry_DoNotUse}, {
      &protobuf_base_2eproto::scc_info_FileDownloadData.base,}};

static void InitDefaultsGetMultiFileRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_GetMultiFileRsp_default_instance_;
    new (ptr) ::chen_im::GetMultiFileRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::GetMultiFileRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetMultiFileRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetMultiFileRsp}, {
      &protobuf_file_2eproto::scc_info_GetMultiFileRsp_FileDataEntry_DoNotUse.base,}};

static void InitDefaultsPutSingleFileReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_PutSingleFileReq_default_instance_;
    new (ptr) ::chen_im::PutSingleFileReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::PutSingleFileReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PutSingleFileReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPutSingleFileReq}, {
      &protobuf_base_2eproto::scc_info_FileUploadData.base,}};

static void InitDefaultsPutSingleFileRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_PutSingleFileRsp_default_instance_;
    new (ptr) ::chen_im::PutSingleFileRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::PutSingleFileRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PutSingleFileRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPutSingleFileRsp}, {
      &protobuf_base_2eproto::scc_info_FileMessageInfo.base,}};

static void InitDefaultsPutMultiFileReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_PutMultiFileReq_default_instance_;
    new (ptr) ::chen_im::PutMultiFileReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::PutMultiFileReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PutMultiFileReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPutMultiFileReq}, {
      &protobuf_base_2eproto::scc_info_FileUploadData.base,}};

static void InitDefaultsPutMultiFileRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chen_im::_PutMultiFileRsp_default_instance_;
    new (ptr) ::chen_im::PutMultiFileRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chen_im::PutMultiFileRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PutMultiFileRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPutMultiFileRsp}, {
      &protobuf_base_2eproto::scc_info_FileMessageInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetSingleFileReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSingleFileRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMultiFileReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMultiFileRsp_FileDataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMultiFileRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutSingleFileReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutSingleFileRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutMultiFileReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutMultiFileRsp.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileReq, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileReq, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetSingleFileRsp, file_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileReq, file_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::GetMultiFileRsp, file_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileReq, file_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutSingleFileRsp, file_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileReq, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileReq, file_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileRsp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileRsp, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileRsp, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chen_im::PutMultiFileRsp, file_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chen_im::GetSingleFileReq)},
  { 9, -1, sizeof(::chen_im::GetSingleFileRsp)},
  { 18, -1, sizeof(::chen_im::GetMultiFileReq)},
  { 27, 34, sizeof(::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse)},
  { 36, -1, sizeof(::chen_im::GetMultiFileRsp)},
  { 45, -1, sizeof(::chen_im::PutSingleFileReq)},
  { 54, -1, sizeof(::chen_im::PutSingleFileRsp)},
  { 63, -1, sizeof(::chen_im::PutMultiFileReq)},
  { 72, -1, sizeof(::chen_im::PutMultiFileRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetSingleFileReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetSingleFileRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetMultiFileReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_GetMultiFileRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_PutSingleFileReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_PutSingleFileRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_PutMultiFileReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chen_im::_PutMultiFileRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "file.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nfile.proto\022\007chen_im\032\nbase.proto\"\\\n\020Get"
      "SingleFileReq\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007fil"
      "e_id\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022\022\n\nsession_i"
      "d\030\004 \001(\t\"u\n\020GetSingleFileRsp\022\022\n\nrequest_i"
      "d\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t"
      "\022,\n\tfile_data\030\004 \001(\0132\031.chen_im.FileDownlo"
      "adData\"`\n\017GetMultiFileReq\022\022\n\nrequest_id\030"
      "\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\022\n\nsession_id\030\003 \001"
      "(\t\022\024\n\014file_id_list\030\004 \003(\t\"\315\001\n\017GetMultiFil"
      "eRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001("
      "\010\022\016\n\006errmsg\030\003 \001(\t\0229\n\tfile_data\030\004 \003(\0132&.c"
      "hen_im.GetMultiFileRsp.FileDataEntry\032J\n\r"
      "FileDataEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 \001("
      "\0132\031.chen_im.FileDownloadData:\0028\001\"w\n\020PutS"
      "ingleFileReq\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007user"
      "_id\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t\022*\n\tfile_da"
      "ta\030\004 \001(\0132\027.chen_im.FileUploadData\"t\n\020Put"
      "SingleFileRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007suc"
      "cess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022+\n\tfile_info\030"
      "\004 \001(\0132\030.chen_im.FileMessageInfo\"v\n\017PutMu"
      "ltiFileReq\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007user_i"
      "d\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t\022*\n\tfile_data"
      "\030\004 \003(\0132\027.chen_im.FileUploadData\"s\n\017PutMu"
      "ltiFileRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007succes"
      "s\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022+\n\tfile_info\030\004 \003"
      "(\0132\030.chen_im.FileMessageInfo2\243\002\n\013FileSer"
      "vice\022E\n\rGetSingleFile\022\031.chen_im.GetSingl"
      "eFileReq\032\031.chen_im.GetSingleFileRsp\022B\n\014G"
      "etMultiFile\022\030.chen_im.GetMultiFileReq\032\030."
      "chen_im.GetMultiFileRsp\022E\n\rPutSingleFile"
      "\022\031.chen_im.PutSingleFileReq\032\031.chen_im.Pu"
      "tSingleFileRsp\022B\n\014PutMultiFile\022\030.chen_im"
      ".PutMultiFileReq\032\030.chen_im.PutMultiFileR"
      "spB\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_file_2eproto
namespace chen_im {

// ===================================================================

void GetSingleFileReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSingleFileReq::kRequestIdFieldNumber;
const int GetSingleFileReq::kFileIdFieldNumber;
const int GetSingleFileReq::kUserIdFieldNumber;
const int GetSingleFileReq::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSingleFileReq::GetSingleFileReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_GetSingleFileReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetSingleFileReq)
}
GetSingleFileReq::GetSingleFileReq(const GetSingleFileReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_id().size() > 0) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.GetSingleFileReq)
}

void GetSingleFileReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetSingleFileReq::~GetSingleFileReq() {
  // @@protoc_insertion_point(destructor:chen_im.GetSingleFileReq)
  SharedDtor();
}

void GetSingleFileReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSingleFileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSingleFileReq::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSingleFileReq& GetSingleFileReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_GetSingleFileReq.base);
  return *internal_default_instance();
}


void GetSingleFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetSingleFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetSingleFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetSingleFileReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetSingleFileReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetSingleFileReq.file_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetSingleFileReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetSingleFileReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetSingleFileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetSingleFileReq)
  return false;
#undef DO_
}

void GetSingleFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetSingleFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string file_id = 2;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_id(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetSingleFileReq)
}

::google::protobuf::uint8* GetSingleFileReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetSingleFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string file_id = 2;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_id(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetSingleFileReq)
  return target;
}

size_t GetSingleFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetSingleFileReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string file_id = 2;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSingleFileReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetSingleFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSingleFileReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSingleFileReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetSingleFileReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetSingleFileReq)
    MergeFrom(*source);
  }
}

void GetSingleFileReq::MergeFrom(const GetSingleFileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetSingleFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void GetSingleFileReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetSingleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSingleFileReq::CopyFrom(const GetSingleFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetSingleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSingleFileReq::IsInitialized() const {
  return true;
}

void GetSingleFileReq::Swap(GetSingleFileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSingleFileReq::InternalSwap(GetSingleFileReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_id_.Swap(&other->file_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSingleFileReq::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSingleFileRsp::InitAsDefaultInstance() {
  ::chen_im::_GetSingleFileRsp_default_instance_._instance.get_mutable()->file_data_ = const_cast< ::chen_im::FileDownloadData*>(
      ::chen_im::FileDownloadData::internal_default_instance());
}
void GetSingleFileRsp::clear_file_data() {
  if (GetArenaNoVirtual() == NULL && file_data_ != NULL) {
    delete file_data_;
  }
  file_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSingleFileRsp::kRequestIdFieldNumber;
const int GetSingleFileRsp::kSuccessFieldNumber;
const int GetSingleFileRsp::kErrmsgFieldNumber;
const int GetSingleFileRsp::kFileDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSingleFileRsp::GetSingleFileRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_GetSingleFileRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetSingleFileRsp)
}
GetSingleFileRsp::GetSingleFileRsp(const GetSingleFileRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_file_data()) {
    file_data_ = new ::chen_im::FileDownloadData(*from.file_data_);
  } else {
    file_data_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.GetSingleFileRsp)
}

void GetSingleFileRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&file_data_)) + sizeof(success_));
}

GetSingleFileRsp::~GetSingleFileRsp() {
  // @@protoc_insertion_point(destructor:chen_im.GetSingleFileRsp)
  SharedDtor();
}

void GetSingleFileRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_data_;
}

void GetSingleFileRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSingleFileRsp::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSingleFileRsp& GetSingleFileRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_GetSingleFileRsp.base);
  return *internal_default_instance();
}


void GetSingleFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetSingleFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_data_ != NULL) {
    delete file_data_;
  }
  file_data_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool GetSingleFileRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetSingleFileRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetSingleFileRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetSingleFileRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.FileDownloadData file_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetSingleFileRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetSingleFileRsp)
  return false;
#undef DO_
}

void GetSingleFileRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetSingleFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // .chen_im.FileDownloadData file_data = 4;
  if (this->has_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_file_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetSingleFileRsp)
}

::google::protobuf::uint8* GetSingleFileRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetSingleFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetSingleFileRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // .chen_im.FileDownloadData file_data = 4;
  if (this->has_file_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_file_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetSingleFileRsp)
  return target;
}

size_t GetSingleFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetSingleFileRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // .chen_im.FileDownloadData file_data = 4;
  if (this->has_file_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_data_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSingleFileRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetSingleFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSingleFileRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSingleFileRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetSingleFileRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetSingleFileRsp)
    MergeFrom(*source);
  }
}

void GetSingleFileRsp::MergeFrom(const GetSingleFileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetSingleFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_file_data()) {
    mutable_file_data()->::chen_im::FileDownloadData::MergeFrom(from.file_data());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GetSingleFileRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetSingleFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSingleFileRsp::CopyFrom(const GetSingleFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetSingleFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSingleFileRsp::IsInitialized() const {
  return true;
}

void GetSingleFileRsp::Swap(GetSingleFileRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSingleFileRsp::InternalSwap(GetSingleFileRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_data_, other->file_data_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSingleFileRsp::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMultiFileReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMultiFileReq::kRequestIdFieldNumber;
const int GetMultiFileReq::kUserIdFieldNumber;
const int GetMultiFileReq::kSessionIdFieldNumber;
const int GetMultiFileReq::kFileIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMultiFileReq::GetMultiFileReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_GetMultiFileReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetMultiFileReq)
}
GetMultiFileReq::GetMultiFileReq(const GetMultiFileReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      file_id_list_(from.file_id_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.GetMultiFileReq)
}

void GetMultiFileReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetMultiFileReq::~GetMultiFileReq() {
  // @@protoc_insertion_point(destructor:chen_im.GetMultiFileReq)
  SharedDtor();
}

void GetMultiFileReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetMultiFileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMultiFileReq::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMultiFileReq& GetMultiFileReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_GetMultiFileReq.base);
  return *internal_default_instance();
}


void GetMultiFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetMultiFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_list_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetMultiFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetMultiFileReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetMultiFileReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetMultiFileReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetMultiFileReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string file_id_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file_id_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id_list(this->file_id_list_size() - 1).data(),
            static_cast<int>(this->file_id_list(this->file_id_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetMultiFileReq.file_id_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetMultiFileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetMultiFileReq)
  return false;
#undef DO_
}

void GetMultiFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetMultiFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // repeated string file_id_list = 4;
  for (int i = 0, n = this->file_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id_list(i).data(), static_cast<int>(this->file_id_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.file_id_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetMultiFileReq)
}

::google::protobuf::uint8* GetMultiFileReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetMultiFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // repeated string file_id_list = 4;
  for (int i = 0, n = this->file_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id_list(i).data(), static_cast<int>(this->file_id_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileReq.file_id_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->file_id_list(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetMultiFileReq)
  return target;
}

size_t GetMultiFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetMultiFileReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string file_id_list = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->file_id_list_size());
  for (int i = 0, n = this->file_id_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file_id_list(i));
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMultiFileReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetMultiFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMultiFileReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMultiFileReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetMultiFileReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetMultiFileReq)
    MergeFrom(*source);
  }
}

void GetMultiFileReq::MergeFrom(const GetMultiFileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetMultiFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_id_list_.MergeFrom(from.file_id_list_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void GetMultiFileReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetMultiFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiFileReq::CopyFrom(const GetMultiFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetMultiFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiFileReq::IsInitialized() const {
  return true;
}

void GetMultiFileReq::Swap(GetMultiFileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMultiFileReq::InternalSwap(GetMultiFileReq* other) {
  using std::swap;
  file_id_list_.InternalSwap(CastToBase(&other->file_id_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMultiFileReq::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

GetMultiFileRsp_FileDataEntry_DoNotUse::GetMultiFileRsp_FileDataEntry_DoNotUse() {}
GetMultiFileRsp_FileDataEntry_DoNotUse::GetMultiFileRsp_FileDataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GetMultiFileRsp_FileDataEntry_DoNotUse::MergeFrom(const GetMultiFileRsp_FileDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GetMultiFileRsp_FileDataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[3];
}
void GetMultiFileRsp_FileDataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GetMultiFileRsp::InitAsDefaultInstance() {
}
void GetMultiFileRsp::clear_file_data() {
  file_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMultiFileRsp::kRequestIdFieldNumber;
const int GetMultiFileRsp::kSuccessFieldNumber;
const int GetMultiFileRsp::kErrmsgFieldNumber;
const int GetMultiFileRsp::kFileDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMultiFileRsp::GetMultiFileRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_GetMultiFileRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.GetMultiFileRsp)
}
GetMultiFileRsp::GetMultiFileRsp(const GetMultiFileRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_data_.MergeFrom(from.file_data_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.GetMultiFileRsp)
}

void GetMultiFileRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

GetMultiFileRsp::~GetMultiFileRsp() {
  // @@protoc_insertion_point(destructor:chen_im.GetMultiFileRsp)
  SharedDtor();
}

void GetMultiFileRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetMultiFileRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMultiFileRsp::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMultiFileRsp& GetMultiFileRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_GetMultiFileRsp.base);
  return *internal_default_instance();
}


void GetMultiFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.GetMultiFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_data_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool GetMultiFileRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.GetMultiFileRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetMultiFileRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetMultiFileRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .chen_im.FileDownloadData> file_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          GetMultiFileRsp_FileDataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GetMultiFileRsp_FileDataEntry_DoNotUse,
              ::std::string, ::chen_im::FileDownloadData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData > > parser(&file_data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.GetMultiFileRsp.FileDataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.GetMultiFileRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.GetMultiFileRsp)
  return false;
#undef DO_
}

void GetMultiFileRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.GetMultiFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // map<string, .chen_im.FileDownloadData> file_data = 4;
  if (!this->file_data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "chen_im.GetMultiFileRsp.FileDataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->file_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->file_data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::const_iterator
          it = this->file_data().begin();
          it != this->file_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GetMultiFileRsp_FileDataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(file_data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GetMultiFileRsp_FileDataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::const_iterator
          it = this->file_data().begin();
          it != this->file_data().end(); ++it) {
        entry.reset(file_data_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.GetMultiFileRsp)
}

::google::protobuf::uint8* GetMultiFileRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.GetMultiFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.GetMultiFileRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // map<string, .chen_im.FileDownloadData> file_data = 4;
  if (!this->file_data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "chen_im.GetMultiFileRsp.FileDataEntry.key");
      }
    };

    if (deterministic &&
        this->file_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->file_data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::const_iterator
          it = this->file_data().begin();
          it != this->file_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GetMultiFileRsp_FileDataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(file_data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GetMultiFileRsp_FileDataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::const_iterator
          it = this->file_data().begin();
          it != this->file_data().end(); ++it) {
        entry.reset(file_data_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.GetMultiFileRsp)
  return target;
}

size_t GetMultiFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.GetMultiFileRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .chen_im.FileDownloadData> file_data = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->file_data_size());
  {
    ::std::unique_ptr<GetMultiFileRsp_FileDataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::chen_im::FileDownloadData >::const_iterator
        it = this->file_data().begin();
        it != this->file_data().end(); ++it) {
      entry.reset(file_data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMultiFileRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.GetMultiFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMultiFileRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMultiFileRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.GetMultiFileRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.GetMultiFileRsp)
    MergeFrom(*source);
  }
}

void GetMultiFileRsp::MergeFrom(const GetMultiFileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.GetMultiFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_data_.MergeFrom(from.file_data_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GetMultiFileRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.GetMultiFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiFileRsp::CopyFrom(const GetMultiFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.GetMultiFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiFileRsp::IsInitialized() const {
  return true;
}

void GetMultiFileRsp::Swap(GetMultiFileRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMultiFileRsp::InternalSwap(GetMultiFileRsp* other) {
  using std::swap;
  file_data_.Swap(&other->file_data_);
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMultiFileRsp::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PutSingleFileReq::InitAsDefaultInstance() {
  ::chen_im::_PutSingleFileReq_default_instance_._instance.get_mutable()->file_data_ = const_cast< ::chen_im::FileUploadData*>(
      ::chen_im::FileUploadData::internal_default_instance());
}
void PutSingleFileReq::clear_file_data() {
  if (GetArenaNoVirtual() == NULL && file_data_ != NULL) {
    delete file_data_;
  }
  file_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutSingleFileReq::kRequestIdFieldNumber;
const int PutSingleFileReq::kUserIdFieldNumber;
const int PutSingleFileReq::kSessionIdFieldNumber;
const int PutSingleFileReq::kFileDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutSingleFileReq::PutSingleFileReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_PutSingleFileReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.PutSingleFileReq)
}
PutSingleFileReq::PutSingleFileReq(const PutSingleFileReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_file_data()) {
    file_data_ = new ::chen_im::FileUploadData(*from.file_data_);
  } else {
    file_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.PutSingleFileReq)
}

void PutSingleFileReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_data_ = NULL;
}

PutSingleFileReq::~PutSingleFileReq() {
  // @@protoc_insertion_point(destructor:chen_im.PutSingleFileReq)
  SharedDtor();
}

void PutSingleFileReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_data_;
}

void PutSingleFileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PutSingleFileReq::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutSingleFileReq& PutSingleFileReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_PutSingleFileReq.base);
  return *internal_default_instance();
}


void PutSingleFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.PutSingleFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_data_ != NULL) {
    delete file_data_;
  }
  file_data_ = NULL;
  _internal_metadata_.Clear();
}

bool PutSingleFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.PutSingleFileReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutSingleFileReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutSingleFileReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutSingleFileReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.FileUploadData file_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.PutSingleFileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.PutSingleFileReq)
  return false;
#undef DO_
}

void PutSingleFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.PutSingleFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // .chen_im.FileUploadData file_data = 4;
  if (this->has_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_file_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.PutSingleFileReq)
}

::google::protobuf::uint8* PutSingleFileReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.PutSingleFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // .chen_im.FileUploadData file_data = 4;
  if (this->has_file_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_file_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.PutSingleFileReq)
  return target;
}

size_t PutSingleFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.PutSingleFileReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // .chen_im.FileUploadData file_data = 4;
  if (this->has_file_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutSingleFileReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.PutSingleFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PutSingleFileReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutSingleFileReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.PutSingleFileReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.PutSingleFileReq)
    MergeFrom(*source);
  }
}

void PutSingleFileReq::MergeFrom(const PutSingleFileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.PutSingleFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_file_data()) {
    mutable_file_data()->::chen_im::FileUploadData::MergeFrom(from.file_data());
  }
}

void PutSingleFileReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.PutSingleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSingleFileReq::CopyFrom(const PutSingleFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.PutSingleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSingleFileReq::IsInitialized() const {
  return true;
}

void PutSingleFileReq::Swap(PutSingleFileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutSingleFileReq::InternalSwap(PutSingleFileReq* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_data_, other->file_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PutSingleFileReq::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PutSingleFileRsp::InitAsDefaultInstance() {
  ::chen_im::_PutSingleFileRsp_default_instance_._instance.get_mutable()->file_info_ = const_cast< ::chen_im::FileMessageInfo*>(
      ::chen_im::FileMessageInfo::internal_default_instance());
}
void PutSingleFileRsp::clear_file_info() {
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutSingleFileRsp::kRequestIdFieldNumber;
const int PutSingleFileRsp::kSuccessFieldNumber;
const int PutSingleFileRsp::kErrmsgFieldNumber;
const int PutSingleFileRsp::kFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutSingleFileRsp::PutSingleFileRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_PutSingleFileRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.PutSingleFileRsp)
}
PutSingleFileRsp::PutSingleFileRsp(const PutSingleFileRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_file_info()) {
    file_info_ = new ::chen_im::FileMessageInfo(*from.file_info_);
  } else {
    file_info_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.PutSingleFileRsp)
}

void PutSingleFileRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&file_info_)) + sizeof(success_));
}

PutSingleFileRsp::~PutSingleFileRsp() {
  // @@protoc_insertion_point(destructor:chen_im.PutSingleFileRsp)
  SharedDtor();
}

void PutSingleFileRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_info_;
}

void PutSingleFileRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PutSingleFileRsp::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutSingleFileRsp& PutSingleFileRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_PutSingleFileRsp.base);
  return *internal_default_instance();
}


void PutSingleFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.PutSingleFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool PutSingleFileRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.PutSingleFileRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutSingleFileRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutSingleFileRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chen_im.FileMessageInfo file_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.PutSingleFileRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.PutSingleFileRsp)
  return false;
#undef DO_
}

void PutSingleFileRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.PutSingleFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // .chen_im.FileMessageInfo file_info = 4;
  if (this->has_file_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_file_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.PutSingleFileRsp)
}

::google::protobuf::uint8* PutSingleFileRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.PutSingleFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutSingleFileRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // .chen_im.FileMessageInfo file_info = 4;
  if (this->has_file_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_file_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.PutSingleFileRsp)
  return target;
}

size_t PutSingleFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.PutSingleFileRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // .chen_im.FileMessageInfo file_info = 4;
  if (this->has_file_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_info_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutSingleFileRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.PutSingleFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PutSingleFileRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutSingleFileRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.PutSingleFileRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.PutSingleFileRsp)
    MergeFrom(*source);
  }
}

void PutSingleFileRsp::MergeFrom(const PutSingleFileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.PutSingleFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_file_info()) {
    mutable_file_info()->::chen_im::FileMessageInfo::MergeFrom(from.file_info());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void PutSingleFileRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.PutSingleFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSingleFileRsp::CopyFrom(const PutSingleFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.PutSingleFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSingleFileRsp::IsInitialized() const {
  return true;
}

void PutSingleFileRsp::Swap(PutSingleFileRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutSingleFileRsp::InternalSwap(PutSingleFileRsp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_info_, other->file_info_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PutSingleFileRsp::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PutMultiFileReq::InitAsDefaultInstance() {
}
void PutMultiFileReq::clear_file_data() {
  file_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutMultiFileReq::kRequestIdFieldNumber;
const int PutMultiFileReq::kUserIdFieldNumber;
const int PutMultiFileReq::kSessionIdFieldNumber;
const int PutMultiFileReq::kFileDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutMultiFileReq::PutMultiFileReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_PutMultiFileReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.PutMultiFileReq)
}
PutMultiFileReq::PutMultiFileReq(const PutMultiFileReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      file_data_(from.file_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chen_im.PutMultiFileReq)
}

void PutMultiFileReq::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PutMultiFileReq::~PutMultiFileReq() {
  // @@protoc_insertion_point(destructor:chen_im.PutMultiFileReq)
  SharedDtor();
}

void PutMultiFileReq::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PutMultiFileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PutMultiFileReq::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutMultiFileReq& PutMultiFileReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_PutMultiFileReq.base);
  return *internal_default_instance();
}


void PutMultiFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.PutMultiFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_data_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PutMultiFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.PutMultiFileReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutMultiFileReq.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutMultiFileReq.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutMultiFileReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chen_im.FileUploadData file_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_file_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.PutMultiFileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.PutMultiFileReq)
  return false;
#undef DO_
}

void PutMultiFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.PutMultiFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileReq.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileReq.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // repeated .chen_im.FileUploadData file_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->file_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.PutMultiFileReq)
}

::google::protobuf::uint8* PutMultiFileReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.PutMultiFileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileReq.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileReq.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // repeated .chen_im.FileUploadData file_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->file_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.PutMultiFileReq)
  return target;
}

size_t PutMultiFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.PutMultiFileReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chen_im.FileUploadData file_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->file_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->file_data(static_cast<int>(i)));
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutMultiFileReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.PutMultiFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PutMultiFileReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutMultiFileReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.PutMultiFileReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.PutMultiFileReq)
    MergeFrom(*source);
  }
}

void PutMultiFileReq::MergeFrom(const PutMultiFileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.PutMultiFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_data_.MergeFrom(from.file_data_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void PutMultiFileReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.PutMultiFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutMultiFileReq::CopyFrom(const PutMultiFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.PutMultiFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutMultiFileReq::IsInitialized() const {
  return true;
}

void PutMultiFileReq::Swap(PutMultiFileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutMultiFileReq::InternalSwap(PutMultiFileReq* other) {
  using std::swap;
  CastToBase(&file_data_)->InternalSwap(CastToBase(&other->file_data_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PutMultiFileReq::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PutMultiFileRsp::InitAsDefaultInstance() {
}
void PutMultiFileRsp::clear_file_info() {
  file_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutMultiFileRsp::kRequestIdFieldNumber;
const int PutMultiFileRsp::kSuccessFieldNumber;
const int PutMultiFileRsp::kErrmsgFieldNumber;
const int PutMultiFileRsp::kFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutMultiFileRsp::PutMultiFileRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_PutMultiFileRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chen_im.PutMultiFileRsp)
}
PutMultiFileRsp::PutMultiFileRsp(const PutMultiFileRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      file_info_(from.file_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:chen_im.PutMultiFileRsp)
}

void PutMultiFileRsp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

PutMultiFileRsp::~PutMultiFileRsp() {
  // @@protoc_insertion_point(destructor:chen_im.PutMultiFileRsp)
  SharedDtor();
}

void PutMultiFileRsp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PutMultiFileRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PutMultiFileRsp::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutMultiFileRsp& PutMultiFileRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_PutMultiFileRsp.base);
  return *internal_default_instance();
}


void PutMultiFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chen_im.PutMultiFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_info_.Clear();
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool PutMultiFileRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chen_im.PutMultiFileRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutMultiFileRsp.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chen_im.PutMultiFileRsp.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chen_im.FileMessageInfo file_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chen_im.PutMultiFileRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chen_im.PutMultiFileRsp)
  return false;
#undef DO_
}

void PutMultiFileRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chen_im.PutMultiFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileRsp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileRsp.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .chen_im.FileMessageInfo file_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->file_info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chen_im.PutMultiFileRsp)
}

::google::protobuf::uint8* PutMultiFileRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chen_im.PutMultiFileRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileRsp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chen_im.PutMultiFileRsp.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .chen_im.FileMessageInfo file_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->file_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chen_im.PutMultiFileRsp)
  return target;
}

size_t PutMultiFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chen_im.PutMultiFileRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chen_im.FileMessageInfo file_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->file_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->file_info(static_cast<int>(i)));
    }
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutMultiFileRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chen_im.PutMultiFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PutMultiFileRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutMultiFileRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chen_im.PutMultiFileRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chen_im.PutMultiFileRsp)
    MergeFrom(*source);
  }
}

void PutMultiFileRsp::MergeFrom(const PutMultiFileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chen_im.PutMultiFileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_info_.MergeFrom(from.file_info_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void PutMultiFileRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chen_im.PutMultiFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutMultiFileRsp::CopyFrom(const PutMultiFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chen_im.PutMultiFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutMultiFileRsp::IsInitialized() const {
  return true;
}

void PutMultiFileRsp::Swap(PutMultiFileRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutMultiFileRsp::InternalSwap(PutMultiFileRsp* other) {
  using std::swap;
  CastToBase(&file_info_)->InternalSwap(CastToBase(&other->file_info_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PutMultiFileRsp::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

FileService::~FileService() {}

const ::google::protobuf::ServiceDescriptor* FileService::descriptor() {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_file_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* FileService::GetDescriptor() {
  return descriptor();
}

void FileService::GetSingleFile(::google::protobuf::RpcController* controller,
                         const ::chen_im::GetSingleFileReq*,
                         ::chen_im::GetSingleFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSingleFile() not implemented.");
  done->Run();
}

void FileService::GetMultiFile(::google::protobuf::RpcController* controller,
                         const ::chen_im::GetMultiFileReq*,
                         ::chen_im::GetMultiFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMultiFile() not implemented.");
  done->Run();
}

void FileService::PutSingleFile(::google::protobuf::RpcController* controller,
                         const ::chen_im::PutSingleFileReq*,
                         ::chen_im::PutSingleFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PutSingleFile() not implemented.");
  done->Run();
}

void FileService::PutMultiFile(::google::protobuf::RpcController* controller,
                         const ::chen_im::PutMultiFileReq*,
                         ::chen_im::PutMultiFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PutMultiFile() not implemented.");
  done->Run();
}

void FileService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_file_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetSingleFile(controller,
             ::google::protobuf::down_cast<const ::chen_im::GetSingleFileReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::GetSingleFileRsp*>(response),
             done);
      break;
    case 1:
      GetMultiFile(controller,
             ::google::protobuf::down_cast<const ::chen_im::GetMultiFileReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::GetMultiFileRsp*>(response),
             done);
      break;
    case 2:
      PutSingleFile(controller,
             ::google::protobuf::down_cast<const ::chen_im::PutSingleFileReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::PutSingleFileRsp*>(response),
             done);
      break;
    case 3:
      PutMultiFile(controller,
             ::google::protobuf::down_cast<const ::chen_im::PutMultiFileReq*>(request),
             ::google::protobuf::down_cast< ::chen_im::PutMultiFileRsp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FileService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::GetSingleFileReq::default_instance();
    case 1:
      return ::chen_im::GetMultiFileReq::default_instance();
    case 2:
      return ::chen_im::PutSingleFileReq::default_instance();
    case 3:
      return ::chen_im::PutMultiFileReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FileService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chen_im::GetSingleFileRsp::default_instance();
    case 1:
      return ::chen_im::GetMultiFileRsp::default_instance();
    case 2:
      return ::chen_im::PutSingleFileRsp::default_instance();
    case 3:
      return ::chen_im::PutMultiFileRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FileService_Stub::FileService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FileService_Stub::FileService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FileService_Stub::~FileService_Stub() {
  if (owns_channel_) delete channel_;
}

void FileService_Stub::GetSingleFile(::google::protobuf::RpcController* controller,
                              const ::chen_im::GetSingleFileReq* request,
                              ::chen_im::GetSingleFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FileService_Stub::GetMultiFile(::google::protobuf::RpcController* controller,
                              const ::chen_im::GetMultiFileReq* request,
                              ::chen_im::GetMultiFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FileService_Stub::PutSingleFile(::google::protobuf::RpcController* controller,
                              const ::chen_im::PutSingleFileReq* request,
                              ::chen_im::PutSingleFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FileService_Stub::PutMultiFile(::google::protobuf::RpcController* controller,
                              const ::chen_im::PutMultiFileReq* request,
                              ::chen_im::PutMultiFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetSingleFileReq* Arena::CreateMaybeMessage< ::chen_im::GetSingleFileReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetSingleFileReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetSingleFileRsp* Arena::CreateMaybeMessage< ::chen_im::GetSingleFileRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetSingleFileRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetMultiFileReq* Arena::CreateMaybeMessage< ::chen_im::GetMultiFileReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetMultiFileReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetMultiFileRsp_FileDataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::GetMultiFileRsp* Arena::CreateMaybeMessage< ::chen_im::GetMultiFileRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::GetMultiFileRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::PutSingleFileReq* Arena::CreateMaybeMessage< ::chen_im::PutSingleFileReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::PutSingleFileReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::PutSingleFileRsp* Arena::CreateMaybeMessage< ::chen_im::PutSingleFileRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::PutSingleFileRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::PutMultiFileReq* Arena::CreateMaybeMessage< ::chen_im::PutMultiFileReq >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::PutMultiFileReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chen_im::PutMultiFileRsp* Arena::CreateMaybeMessage< ::chen_im::PutMultiFileRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chen_im::PutMultiFileRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
