// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef PROTOBUF_INCLUDED_base_2eproto
#define PROTOBUF_INCLUDED_base_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto 

namespace protobuf_base_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_base_2eproto
namespace chen_im {
class ChatSessionInfo;
class ChatSessionInfoDefaultTypeInternal;
extern ChatSessionInfoDefaultTypeInternal _ChatSessionInfo_default_instance_;
class FileDownloadData;
class FileDownloadDataDefaultTypeInternal;
extern FileDownloadDataDefaultTypeInternal _FileDownloadData_default_instance_;
class FileMessageInfo;
class FileMessageInfoDefaultTypeInternal;
extern FileMessageInfoDefaultTypeInternal _FileMessageInfo_default_instance_;
class FileUploadData;
class FileUploadDataDefaultTypeInternal;
extern FileUploadDataDefaultTypeInternal _FileUploadData_default_instance_;
class ImageMessageInfo;
class ImageMessageInfoDefaultTypeInternal;
extern ImageMessageInfoDefaultTypeInternal _ImageMessageInfo_default_instance_;
class MessageContent;
class MessageContentDefaultTypeInternal;
extern MessageContentDefaultTypeInternal _MessageContent_default_instance_;
class MessageInfo;
class MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class SpeechMessageInfo;
class SpeechMessageInfoDefaultTypeInternal;
extern SpeechMessageInfoDefaultTypeInternal _SpeechMessageInfo_default_instance_;
class StringMessageInfo;
class StringMessageInfoDefaultTypeInternal;
extern StringMessageInfoDefaultTypeInternal _StringMessageInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace chen_im
namespace google {
namespace protobuf {
template<> ::chen_im::ChatSessionInfo* Arena::CreateMaybeMessage<::chen_im::ChatSessionInfo>(Arena*);
template<> ::chen_im::FileDownloadData* Arena::CreateMaybeMessage<::chen_im::FileDownloadData>(Arena*);
template<> ::chen_im::FileMessageInfo* Arena::CreateMaybeMessage<::chen_im::FileMessageInfo>(Arena*);
template<> ::chen_im::FileUploadData* Arena::CreateMaybeMessage<::chen_im::FileUploadData>(Arena*);
template<> ::chen_im::ImageMessageInfo* Arena::CreateMaybeMessage<::chen_im::ImageMessageInfo>(Arena*);
template<> ::chen_im::MessageContent* Arena::CreateMaybeMessage<::chen_im::MessageContent>(Arena*);
template<> ::chen_im::MessageInfo* Arena::CreateMaybeMessage<::chen_im::MessageInfo>(Arena*);
template<> ::chen_im::SpeechMessageInfo* Arena::CreateMaybeMessage<::chen_im::SpeechMessageInfo>(Arena*);
template<> ::chen_im::StringMessageInfo* Arena::CreateMaybeMessage<::chen_im::StringMessageInfo>(Arena*);
template<> ::chen_im::UserInfo* Arena::CreateMaybeMessage<::chen_im::UserInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chen_im {

enum MessageType {
  STRING = 0,
  IMAGE = 1,
  FILE = 2,
  SPEECH = 3,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = STRING;
const MessageType MessageType_MAX = SPEECH;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string phone = 4;
  void clear_phone();
  static const int kPhoneFieldNumber = 4;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // bytes avatar = 5;
  void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:chen_im.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatSessionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.ChatSessionInfo) */ {
 public:
  ChatSessionInfo();
  virtual ~ChatSessionInfo();

  ChatSessionInfo(const ChatSessionInfo& from);

  inline ChatSessionInfo& operator=(const ChatSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatSessionInfo(ChatSessionInfo&& from) noexcept
    : ChatSessionInfo() {
    *this = ::std::move(from);
  }

  inline ChatSessionInfo& operator=(ChatSessionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSessionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatSessionInfo* internal_default_instance() {
    return reinterpret_cast<const ChatSessionInfo*>(
               &_ChatSessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ChatSessionInfo* other);
  friend void swap(ChatSessionInfo& a, ChatSessionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatSessionInfo* New() const final {
    return CreateMaybeMessage<ChatSessionInfo>(NULL);
  }

  ChatSessionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatSessionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatSessionInfo& from);
  void MergeFrom(const ChatSessionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSessionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string single_chat_friend_id = 1;
  void clear_single_chat_friend_id();
  static const int kSingleChatFriendIdFieldNumber = 1;
  const ::std::string& single_chat_friend_id() const;
  void set_single_chat_friend_id(const ::std::string& value);
  #if LANG_CXX11
  void set_single_chat_friend_id(::std::string&& value);
  #endif
  void set_single_chat_friend_id(const char* value);
  void set_single_chat_friend_id(const char* value, size_t size);
  ::std::string* mutable_single_chat_friend_id();
  ::std::string* release_single_chat_friend_id();
  void set_allocated_single_chat_friend_id(::std::string* single_chat_friend_id);

  // string chat_session_id = 2;
  void clear_chat_session_id();
  static const int kChatSessionIdFieldNumber = 2;
  const ::std::string& chat_session_id() const;
  void set_chat_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_session_id(::std::string&& value);
  #endif
  void set_chat_session_id(const char* value);
  void set_chat_session_id(const char* value, size_t size);
  ::std::string* mutable_chat_session_id();
  ::std::string* release_chat_session_id();
  void set_allocated_chat_session_id(::std::string* chat_session_id);

  // string chat_session_name = 3;
  void clear_chat_session_name();
  static const int kChatSessionNameFieldNumber = 3;
  const ::std::string& chat_session_name() const;
  void set_chat_session_name(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_session_name(::std::string&& value);
  #endif
  void set_chat_session_name(const char* value);
  void set_chat_session_name(const char* value, size_t size);
  ::std::string* mutable_chat_session_name();
  ::std::string* release_chat_session_name();
  void set_allocated_chat_session_name(::std::string* chat_session_name);

  // bytes avatar = 5;
  void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // .chen_im.MessageInfo prev_message = 4;
  bool has_prev_message() const;
  void clear_prev_message();
  static const int kPrevMessageFieldNumber = 4;
  private:
  const ::chen_im::MessageInfo& _internal_prev_message() const;
  public:
  const ::chen_im::MessageInfo& prev_message() const;
  ::chen_im::MessageInfo* release_prev_message();
  ::chen_im::MessageInfo* mutable_prev_message();
  void set_allocated_prev_message(::chen_im::MessageInfo* prev_message);

  // @@protoc_insertion_point(class_scope:chen_im.ChatSessionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr single_chat_friend_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_session_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_session_name_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::chen_im::MessageInfo* prev_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringMessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.StringMessageInfo) */ {
 public:
  StringMessageInfo();
  virtual ~StringMessageInfo();

  StringMessageInfo(const StringMessageInfo& from);

  inline StringMessageInfo& operator=(const StringMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringMessageInfo(StringMessageInfo&& from) noexcept
    : StringMessageInfo() {
    *this = ::std::move(from);
  }

  inline StringMessageInfo& operator=(StringMessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringMessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringMessageInfo* internal_default_instance() {
    return reinterpret_cast<const StringMessageInfo*>(
               &_StringMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StringMessageInfo* other);
  friend void swap(StringMessageInfo& a, StringMessageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringMessageInfo* New() const final {
    return CreateMaybeMessage<StringMessageInfo>(NULL);
  }

  StringMessageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringMessageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringMessageInfo& from);
  void MergeFrom(const StringMessageInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMessageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:chen_im.StringMessageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageMessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.ImageMessageInfo) */ {
 public:
  ImageMessageInfo();
  virtual ~ImageMessageInfo();

  ImageMessageInfo(const ImageMessageInfo& from);

  inline ImageMessageInfo& operator=(const ImageMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageMessageInfo(ImageMessageInfo&& from) noexcept
    : ImageMessageInfo() {
    *this = ::std::move(from);
  }

  inline ImageMessageInfo& operator=(ImageMessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageMessageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageMessageInfo*>(
               &_ImageMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ImageMessageInfo* other);
  friend void swap(ImageMessageInfo& a, ImageMessageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageMessageInfo* New() const final {
    return CreateMaybeMessage<ImageMessageInfo>(NULL);
  }

  ImageMessageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageMessageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageMessageInfo& from);
  void MergeFrom(const ImageMessageInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMessageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // bytes image_content = 2;
  void clear_image_content();
  static const int kImageContentFieldNumber = 2;
  const ::std::string& image_content() const;
  void set_image_content(const ::std::string& value);
  #if LANG_CXX11
  void set_image_content(::std::string&& value);
  #endif
  void set_image_content(const char* value);
  void set_image_content(const void* value, size_t size);
  ::std::string* mutable_image_content();
  ::std::string* release_image_content();
  void set_allocated_image_content(::std::string* image_content);

  // @@protoc_insertion_point(class_scope:chen_im.ImageMessageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr image_content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileMessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FileMessageInfo) */ {
 public:
  FileMessageInfo();
  virtual ~FileMessageInfo();

  FileMessageInfo(const FileMessageInfo& from);

  inline FileMessageInfo& operator=(const FileMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileMessageInfo(FileMessageInfo&& from) noexcept
    : FileMessageInfo() {
    *this = ::std::move(from);
  }

  inline FileMessageInfo& operator=(FileMessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileMessageInfo* internal_default_instance() {
    return reinterpret_cast<const FileMessageInfo*>(
               &_FileMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FileMessageInfo* other);
  friend void swap(FileMessageInfo& a, FileMessageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileMessageInfo* New() const final {
    return CreateMaybeMessage<FileMessageInfo>(NULL);
  }

  FileMessageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileMessageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileMessageInfo& from);
  void MergeFrom(const FileMessageInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMessageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes file_contents = 4;
  void clear_file_contents();
  static const int kFileContentsFieldNumber = 4;
  const ::std::string& file_contents() const;
  void set_file_contents(const ::std::string& value);
  #if LANG_CXX11
  void set_file_contents(::std::string&& value);
  #endif
  void set_file_contents(const char* value);
  void set_file_contents(const void* value, size_t size);
  ::std::string* mutable_file_contents();
  ::std::string* release_file_contents();
  void set_allocated_file_contents(::std::string* file_contents);

  // int64 file_size = 2;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::int64 file_size() const;
  void set_file_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:chen_im.FileMessageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_contents_;
  ::google::protobuf::int64 file_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeechMessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.SpeechMessageInfo) */ {
 public:
  SpeechMessageInfo();
  virtual ~SpeechMessageInfo();

  SpeechMessageInfo(const SpeechMessageInfo& from);

  inline SpeechMessageInfo& operator=(const SpeechMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeechMessageInfo(SpeechMessageInfo&& from) noexcept
    : SpeechMessageInfo() {
    *this = ::std::move(from);
  }

  inline SpeechMessageInfo& operator=(SpeechMessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechMessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechMessageInfo* internal_default_instance() {
    return reinterpret_cast<const SpeechMessageInfo*>(
               &_SpeechMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SpeechMessageInfo* other);
  friend void swap(SpeechMessageInfo& a, SpeechMessageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeechMessageInfo* New() const final {
    return CreateMaybeMessage<SpeechMessageInfo>(NULL);
  }

  SpeechMessageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeechMessageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeechMessageInfo& from);
  void MergeFrom(const SpeechMessageInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechMessageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // bytes file_contents = 2;
  void clear_file_contents();
  static const int kFileContentsFieldNumber = 2;
  const ::std::string& file_contents() const;
  void set_file_contents(const ::std::string& value);
  #if LANG_CXX11
  void set_file_contents(::std::string&& value);
  #endif
  void set_file_contents(const char* value);
  void set_file_contents(const void* value, size_t size);
  ::std::string* mutable_file_contents();
  ::std::string* release_file_contents();
  void set_allocated_file_contents(::std::string* file_contents);

  // @@protoc_insertion_point(class_scope:chen_im.SpeechMessageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr file_contents_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageContent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.MessageContent) */ {
 public:
  MessageContent();
  virtual ~MessageContent();

  MessageContent(const MessageContent& from);

  inline MessageContent& operator=(const MessageContent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageContent(MessageContent&& from) noexcept
    : MessageContent() {
    *this = ::std::move(from);
  }

  inline MessageContent& operator=(MessageContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageContent& default_instance();

  enum MsgContentCase {
    kStringMessage = 2,
    kFileMessage = 3,
    kSpeechMessage = 4,
    kImageMessage = 5,
    MSG_CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageContent* internal_default_instance() {
    return reinterpret_cast<const MessageContent*>(
               &_MessageContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MessageContent* other);
  friend void swap(MessageContent& a, MessageContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageContent* New() const final {
    return CreateMaybeMessage<MessageContent>(NULL);
  }

  MessageContent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageContent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageContent& from);
  void MergeFrom(const MessageContent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chen_im.MessageType message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::chen_im::MessageType message_type() const;
  void set_message_type(::chen_im::MessageType value);

  // .chen_im.StringMessageInfo string_message = 2;
  bool has_string_message() const;
  void clear_string_message();
  static const int kStringMessageFieldNumber = 2;
  private:
  const ::chen_im::StringMessageInfo& _internal_string_message() const;
  public:
  const ::chen_im::StringMessageInfo& string_message() const;
  ::chen_im::StringMessageInfo* release_string_message();
  ::chen_im::StringMessageInfo* mutable_string_message();
  void set_allocated_string_message(::chen_im::StringMessageInfo* string_message);

  // .chen_im.FileMessageInfo file_message = 3;
  bool has_file_message() const;
  void clear_file_message();
  static const int kFileMessageFieldNumber = 3;
  private:
  const ::chen_im::FileMessageInfo& _internal_file_message() const;
  public:
  const ::chen_im::FileMessageInfo& file_message() const;
  ::chen_im::FileMessageInfo* release_file_message();
  ::chen_im::FileMessageInfo* mutable_file_message();
  void set_allocated_file_message(::chen_im::FileMessageInfo* file_message);

  // .chen_im.SpeechMessageInfo speech_message = 4;
  bool has_speech_message() const;
  void clear_speech_message();
  static const int kSpeechMessageFieldNumber = 4;
  private:
  const ::chen_im::SpeechMessageInfo& _internal_speech_message() const;
  public:
  const ::chen_im::SpeechMessageInfo& speech_message() const;
  ::chen_im::SpeechMessageInfo* release_speech_message();
  ::chen_im::SpeechMessageInfo* mutable_speech_message();
  void set_allocated_speech_message(::chen_im::SpeechMessageInfo* speech_message);

  // .chen_im.ImageMessageInfo image_message = 5;
  bool has_image_message() const;
  void clear_image_message();
  static const int kImageMessageFieldNumber = 5;
  private:
  const ::chen_im::ImageMessageInfo& _internal_image_message() const;
  public:
  const ::chen_im::ImageMessageInfo& image_message() const;
  ::chen_im::ImageMessageInfo* release_image_message();
  ::chen_im::ImageMessageInfo* mutable_image_message();
  void set_allocated_image_message(::chen_im::ImageMessageInfo* image_message);

  void clear_msg_content();
  MsgContentCase msg_content_case() const;
  // @@protoc_insertion_point(class_scope:chen_im.MessageContent)
 private:
  void set_has_string_message();
  void set_has_file_message();
  void set_has_speech_message();
  void set_has_image_message();

  inline bool has_msg_content() const;
  inline void clear_has_msg_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int message_type_;
  union MsgContentUnion {
    MsgContentUnion() {}
    ::chen_im::StringMessageInfo* string_message_;
    ::chen_im::FileMessageInfo* file_message_;
    ::chen_im::SpeechMessageInfo* speech_message_;
    ::chen_im::ImageMessageInfo* image_message_;
  } msg_content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.MessageInfo) */ {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageInfo(MessageInfo&& from) noexcept
    : MessageInfo() {
    *this = ::std::move(from);
  }

  inline MessageInfo& operator=(MessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MessageInfo* other);
  friend void swap(MessageInfo& a, MessageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageInfo* New() const final {
    return CreateMaybeMessage<MessageInfo>(NULL);
  }

  MessageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // string chat_session_id = 2;
  void clear_chat_session_id();
  static const int kChatSessionIdFieldNumber = 2;
  const ::std::string& chat_session_id() const;
  void set_chat_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_session_id(::std::string&& value);
  #endif
  void set_chat_session_id(const char* value);
  void set_chat_session_id(const char* value, size_t size);
  ::std::string* mutable_chat_session_id();
  ::std::string* release_chat_session_id();
  void set_allocated_chat_session_id(::std::string* chat_session_id);

  // .chen_im.UserInfo sender = 4;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 4;
  private:
  const ::chen_im::UserInfo& _internal_sender() const;
  public:
  const ::chen_im::UserInfo& sender() const;
  ::chen_im::UserInfo* release_sender();
  ::chen_im::UserInfo* mutable_sender();
  void set_allocated_sender(::chen_im::UserInfo* sender);

  // .chen_im.MessageContent message = 5;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  private:
  const ::chen_im::MessageContent& _internal_message() const;
  public:
  const ::chen_im::MessageContent& message() const;
  ::chen_im::MessageContent* release_message();
  ::chen_im::MessageContent* mutable_message();
  void set_allocated_message(::chen_im::MessageContent* message);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:chen_im.MessageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_session_id_;
  ::chen_im::UserInfo* sender_;
  ::chen_im::MessageContent* message_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileDownloadData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FileDownloadData) */ {
 public:
  FileDownloadData();
  virtual ~FileDownloadData();

  FileDownloadData(const FileDownloadData& from);

  inline FileDownloadData& operator=(const FileDownloadData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileDownloadData(FileDownloadData&& from) noexcept
    : FileDownloadData() {
    *this = ::std::move(from);
  }

  inline FileDownloadData& operator=(FileDownloadData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileDownloadData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDownloadData* internal_default_instance() {
    return reinterpret_cast<const FileDownloadData*>(
               &_FileDownloadData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FileDownloadData* other);
  friend void swap(FileDownloadData& a, FileDownloadData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileDownloadData* New() const final {
    return CreateMaybeMessage<FileDownloadData>(NULL);
  }

  FileDownloadData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileDownloadData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileDownloadData& from);
  void MergeFrom(const FileDownloadData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // bytes file_content = 2;
  void clear_file_content();
  static const int kFileContentFieldNumber = 2;
  const ::std::string& file_content() const;
  void set_file_content(const ::std::string& value);
  #if LANG_CXX11
  void set_file_content(::std::string&& value);
  #endif
  void set_file_content(const char* value);
  void set_file_content(const void* value, size_t size);
  ::std::string* mutable_file_content();
  ::std::string* release_file_content();
  void set_allocated_file_content(::std::string* file_content);

  // @@protoc_insertion_point(class_scope:chen_im.FileDownloadData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr file_content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileUploadData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chen_im.FileUploadData) */ {
 public:
  FileUploadData();
  virtual ~FileUploadData();

  FileUploadData(const FileUploadData& from);

  inline FileUploadData& operator=(const FileUploadData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileUploadData(FileUploadData&& from) noexcept
    : FileUploadData() {
    *this = ::std::move(from);
  }

  inline FileUploadData& operator=(FileUploadData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileUploadData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUploadData* internal_default_instance() {
    return reinterpret_cast<const FileUploadData*>(
               &_FileUploadData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FileUploadData* other);
  friend void swap(FileUploadData& a, FileUploadData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileUploadData* New() const final {
    return CreateMaybeMessage<FileUploadData>(NULL);
  }

  FileUploadData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileUploadData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileUploadData& from);
  void MergeFrom(const FileUploadData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes file_content = 3;
  void clear_file_content();
  static const int kFileContentFieldNumber = 3;
  const ::std::string& file_content() const;
  void set_file_content(const ::std::string& value);
  #if LANG_CXX11
  void set_file_content(::std::string&& value);
  #endif
  void set_file_content(const char* value);
  void set_file_content(const void* value, size_t size);
  ::std::string* mutable_file_content();
  ::std::string* release_file_content();
  void set_allocated_file_content(::std::string* file_content);

  // int64 file_size = 2;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::int64 file_size() const;
  void set_file_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:chen_im.FileUploadData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_content_;
  ::google::protobuf::int64 file_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string user_id = 1;
inline void UserInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:chen_im.UserInfo.user_id)
  return user_id_.GetNoArena();
}
inline void UserInfo::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserInfo.user_id)
}
#if LANG_CXX11
inline void UserInfo::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserInfo.user_id)
}
#endif
inline void UserInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserInfo.user_id)
}
inline void UserInfo::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserInfo.user_id)
}
inline ::std::string* UserInfo::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserInfo.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:chen_im.UserInfo.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserInfo.user_id)
}

// string nickname = 2;
inline void UserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:chen_im.UserInfo.nickname)
  return nickname_.GetNoArena();
}
inline void UserInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserInfo.nickname)
}
#if LANG_CXX11
inline void UserInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserInfo.nickname)
}
#endif
inline void UserInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserInfo.nickname)
}
inline void UserInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserInfo.nickname)
}
inline ::std::string* UserInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:chen_im.UserInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserInfo.nickname)
}

// string description = 3;
inline void UserInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::description() const {
  // @@protoc_insertion_point(field_get:chen_im.UserInfo.description)
  return description_.GetNoArena();
}
inline void UserInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserInfo.description)
}
#if LANG_CXX11
inline void UserInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserInfo.description)
}
#endif
inline void UserInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserInfo.description)
}
inline void UserInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserInfo.description)
}
inline ::std::string* UserInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_description() {
  // @@protoc_insertion_point(field_release:chen_im.UserInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserInfo.description)
}

// string phone = 4;
inline void UserInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::phone() const {
  // @@protoc_insertion_point(field_get:chen_im.UserInfo.phone)
  return phone_.GetNoArena();
}
inline void UserInfo::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserInfo.phone)
}
#if LANG_CXX11
inline void UserInfo::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserInfo.phone)
}
#endif
inline void UserInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserInfo.phone)
}
inline void UserInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserInfo.phone)
}
inline ::std::string* UserInfo::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_phone() {
  // @@protoc_insertion_point(field_release:chen_im.UserInfo.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserInfo.phone)
}

// bytes avatar = 5;
inline void UserInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::avatar() const {
  // @@protoc_insertion_point(field_get:chen_im.UserInfo.avatar)
  return avatar_.GetNoArena();
}
inline void UserInfo::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.UserInfo.avatar)
}
#if LANG_CXX11
inline void UserInfo::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.UserInfo.avatar)
}
#endif
inline void UserInfo::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.UserInfo.avatar)
}
inline void UserInfo::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.UserInfo.avatar)
}
inline ::std::string* UserInfo::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.UserInfo.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:chen_im.UserInfo.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:chen_im.UserInfo.avatar)
}

// -------------------------------------------------------------------

// ChatSessionInfo

// string single_chat_friend_id = 1;
inline void ChatSessionInfo::clear_single_chat_friend_id() {
  single_chat_friend_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionInfo::single_chat_friend_id() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionInfo.single_chat_friend_id)
  return single_chat_friend_id_.GetNoArena();
}
inline void ChatSessionInfo::set_single_chat_friend_id(const ::std::string& value) {
  
  single_chat_friend_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionInfo.single_chat_friend_id)
}
#if LANG_CXX11
inline void ChatSessionInfo::set_single_chat_friend_id(::std::string&& value) {
  
  single_chat_friend_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionInfo.single_chat_friend_id)
}
#endif
inline void ChatSessionInfo::set_single_chat_friend_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  single_chat_friend_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionInfo.single_chat_friend_id)
}
inline void ChatSessionInfo::set_single_chat_friend_id(const char* value, size_t size) {
  
  single_chat_friend_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionInfo.single_chat_friend_id)
}
inline ::std::string* ChatSessionInfo::mutable_single_chat_friend_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionInfo.single_chat_friend_id)
  return single_chat_friend_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionInfo::release_single_chat_friend_id() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionInfo.single_chat_friend_id)
  
  return single_chat_friend_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionInfo::set_allocated_single_chat_friend_id(::std::string* single_chat_friend_id) {
  if (single_chat_friend_id != NULL) {
    
  } else {
    
  }
  single_chat_friend_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), single_chat_friend_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionInfo.single_chat_friend_id)
}

// string chat_session_id = 2;
inline void ChatSessionInfo::clear_chat_session_id() {
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionInfo::chat_session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionInfo.chat_session_id)
  return chat_session_id_.GetNoArena();
}
inline void ChatSessionInfo::set_chat_session_id(const ::std::string& value) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionInfo.chat_session_id)
}
#if LANG_CXX11
inline void ChatSessionInfo::set_chat_session_id(::std::string&& value) {
  
  chat_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionInfo.chat_session_id)
}
#endif
inline void ChatSessionInfo::set_chat_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionInfo.chat_session_id)
}
inline void ChatSessionInfo::set_chat_session_id(const char* value, size_t size) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionInfo.chat_session_id)
}
inline ::std::string* ChatSessionInfo::mutable_chat_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionInfo.chat_session_id)
  return chat_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionInfo::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionInfo.chat_session_id)
  
  return chat_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionInfo::set_allocated_chat_session_id(::std::string* chat_session_id) {
  if (chat_session_id != NULL) {
    
  } else {
    
  }
  chat_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionInfo.chat_session_id)
}

// string chat_session_name = 3;
inline void ChatSessionInfo::clear_chat_session_name() {
  chat_session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionInfo::chat_session_name() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionInfo.chat_session_name)
  return chat_session_name_.GetNoArena();
}
inline void ChatSessionInfo::set_chat_session_name(const ::std::string& value) {
  
  chat_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionInfo.chat_session_name)
}
#if LANG_CXX11
inline void ChatSessionInfo::set_chat_session_name(::std::string&& value) {
  
  chat_session_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionInfo.chat_session_name)
}
#endif
inline void ChatSessionInfo::set_chat_session_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionInfo.chat_session_name)
}
inline void ChatSessionInfo::set_chat_session_name(const char* value, size_t size) {
  
  chat_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionInfo.chat_session_name)
}
inline ::std::string* ChatSessionInfo::mutable_chat_session_name() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionInfo.chat_session_name)
  return chat_session_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionInfo::release_chat_session_name() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionInfo.chat_session_name)
  
  return chat_session_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionInfo::set_allocated_chat_session_name(::std::string* chat_session_name) {
  if (chat_session_name != NULL) {
    
  } else {
    
  }
  chat_session_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_session_name);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionInfo.chat_session_name)
}

// .chen_im.MessageInfo prev_message = 4;
inline bool ChatSessionInfo::has_prev_message() const {
  return this != internal_default_instance() && prev_message_ != NULL;
}
inline void ChatSessionInfo::clear_prev_message() {
  if (GetArenaNoVirtual() == NULL && prev_message_ != NULL) {
    delete prev_message_;
  }
  prev_message_ = NULL;
}
inline const ::chen_im::MessageInfo& ChatSessionInfo::_internal_prev_message() const {
  return *prev_message_;
}
inline const ::chen_im::MessageInfo& ChatSessionInfo::prev_message() const {
  const ::chen_im::MessageInfo* p = prev_message_;
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionInfo.prev_message)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::MessageInfo*>(
      &::chen_im::_MessageInfo_default_instance_);
}
inline ::chen_im::MessageInfo* ChatSessionInfo::release_prev_message() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionInfo.prev_message)
  
  ::chen_im::MessageInfo* temp = prev_message_;
  prev_message_ = NULL;
  return temp;
}
inline ::chen_im::MessageInfo* ChatSessionInfo::mutable_prev_message() {
  
  if (prev_message_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::MessageInfo>(GetArenaNoVirtual());
    prev_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionInfo.prev_message)
  return prev_message_;
}
inline void ChatSessionInfo::set_allocated_prev_message(::chen_im::MessageInfo* prev_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prev_message_;
  }
  if (prev_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prev_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prev_message, submessage_arena);
    }
    
  } else {
    
  }
  prev_message_ = prev_message;
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionInfo.prev_message)
}

// bytes avatar = 5;
inline void ChatSessionInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatSessionInfo::avatar() const {
  // @@protoc_insertion_point(field_get:chen_im.ChatSessionInfo.avatar)
  return avatar_.GetNoArena();
}
inline void ChatSessionInfo::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ChatSessionInfo.avatar)
}
#if LANG_CXX11
inline void ChatSessionInfo::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ChatSessionInfo.avatar)
}
#endif
inline void ChatSessionInfo::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ChatSessionInfo.avatar)
}
inline void ChatSessionInfo::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ChatSessionInfo.avatar)
}
inline ::std::string* ChatSessionInfo::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ChatSessionInfo.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatSessionInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:chen_im.ChatSessionInfo.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatSessionInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ChatSessionInfo.avatar)
}

// -------------------------------------------------------------------

// StringMessageInfo

// string content = 1;
inline void StringMessageInfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StringMessageInfo::content() const {
  // @@protoc_insertion_point(field_get:chen_im.StringMessageInfo.content)
  return content_.GetNoArena();
}
inline void StringMessageInfo::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.StringMessageInfo.content)
}
#if LANG_CXX11
inline void StringMessageInfo::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.StringMessageInfo.content)
}
#endif
inline void StringMessageInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.StringMessageInfo.content)
}
inline void StringMessageInfo::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.StringMessageInfo.content)
}
inline ::std::string* StringMessageInfo::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.StringMessageInfo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMessageInfo::release_content() {
  // @@protoc_insertion_point(field_release:chen_im.StringMessageInfo.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringMessageInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:chen_im.StringMessageInfo.content)
}

// -------------------------------------------------------------------

// ImageMessageInfo

// string file_id = 1;
inline void ImageMessageInfo::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMessageInfo::file_id() const {
  // @@protoc_insertion_point(field_get:chen_im.ImageMessageInfo.file_id)
  return file_id_.GetNoArena();
}
inline void ImageMessageInfo::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ImageMessageInfo.file_id)
}
#if LANG_CXX11
inline void ImageMessageInfo::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ImageMessageInfo.file_id)
}
#endif
inline void ImageMessageInfo::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ImageMessageInfo.file_id)
}
inline void ImageMessageInfo::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ImageMessageInfo.file_id)
}
inline ::std::string* ImageMessageInfo::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ImageMessageInfo.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMessageInfo::release_file_id() {
  // @@protoc_insertion_point(field_release:chen_im.ImageMessageInfo.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMessageInfo::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ImageMessageInfo.file_id)
}

// bytes image_content = 2;
inline void ImageMessageInfo::clear_image_content() {
  image_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMessageInfo::image_content() const {
  // @@protoc_insertion_point(field_get:chen_im.ImageMessageInfo.image_content)
  return image_content_.GetNoArena();
}
inline void ImageMessageInfo::set_image_content(const ::std::string& value) {
  
  image_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.ImageMessageInfo.image_content)
}
#if LANG_CXX11
inline void ImageMessageInfo::set_image_content(::std::string&& value) {
  
  image_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.ImageMessageInfo.image_content)
}
#endif
inline void ImageMessageInfo::set_image_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.ImageMessageInfo.image_content)
}
inline void ImageMessageInfo::set_image_content(const void* value, size_t size) {
  
  image_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.ImageMessageInfo.image_content)
}
inline ::std::string* ImageMessageInfo::mutable_image_content() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.ImageMessageInfo.image_content)
  return image_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMessageInfo::release_image_content() {
  // @@protoc_insertion_point(field_release:chen_im.ImageMessageInfo.image_content)
  
  return image_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMessageInfo::set_allocated_image_content(::std::string* image_content) {
  if (image_content != NULL) {
    
  } else {
    
  }
  image_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_content);
  // @@protoc_insertion_point(field_set_allocated:chen_im.ImageMessageInfo.image_content)
}

// -------------------------------------------------------------------

// FileMessageInfo

// string file_id = 1;
inline void FileMessageInfo::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMessageInfo::file_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FileMessageInfo.file_id)
  return file_id_.GetNoArena();
}
inline void FileMessageInfo::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FileMessageInfo.file_id)
}
#if LANG_CXX11
inline void FileMessageInfo::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FileMessageInfo.file_id)
}
#endif
inline void FileMessageInfo::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FileMessageInfo.file_id)
}
inline void FileMessageInfo::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FileMessageInfo.file_id)
}
inline ::std::string* FileMessageInfo::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FileMessageInfo.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMessageInfo::release_file_id() {
  // @@protoc_insertion_point(field_release:chen_im.FileMessageInfo.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMessageInfo::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FileMessageInfo.file_id)
}

// int64 file_size = 2;
inline void FileMessageInfo::clear_file_size() {
  file_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileMessageInfo::file_size() const {
  // @@protoc_insertion_point(field_get:chen_im.FileMessageInfo.file_size)
  return file_size_;
}
inline void FileMessageInfo::set_file_size(::google::protobuf::int64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:chen_im.FileMessageInfo.file_size)
}

// string file_name = 3;
inline void FileMessageInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMessageInfo::file_name() const {
  // @@protoc_insertion_point(field_get:chen_im.FileMessageInfo.file_name)
  return file_name_.GetNoArena();
}
inline void FileMessageInfo::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FileMessageInfo.file_name)
}
#if LANG_CXX11
inline void FileMessageInfo::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FileMessageInfo.file_name)
}
#endif
inline void FileMessageInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FileMessageInfo.file_name)
}
inline void FileMessageInfo::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FileMessageInfo.file_name)
}
inline ::std::string* FileMessageInfo::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FileMessageInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMessageInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:chen_im.FileMessageInfo.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMessageInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FileMessageInfo.file_name)
}

// bytes file_contents = 4;
inline void FileMessageInfo::clear_file_contents() {
  file_contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMessageInfo::file_contents() const {
  // @@protoc_insertion_point(field_get:chen_im.FileMessageInfo.file_contents)
  return file_contents_.GetNoArena();
}
inline void FileMessageInfo::set_file_contents(const ::std::string& value) {
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FileMessageInfo.file_contents)
}
#if LANG_CXX11
inline void FileMessageInfo::set_file_contents(::std::string&& value) {
  
  file_contents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FileMessageInfo.file_contents)
}
#endif
inline void FileMessageInfo::set_file_contents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FileMessageInfo.file_contents)
}
inline void FileMessageInfo::set_file_contents(const void* value, size_t size) {
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FileMessageInfo.file_contents)
}
inline ::std::string* FileMessageInfo::mutable_file_contents() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FileMessageInfo.file_contents)
  return file_contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMessageInfo::release_file_contents() {
  // @@protoc_insertion_point(field_release:chen_im.FileMessageInfo.file_contents)
  
  return file_contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMessageInfo::set_allocated_file_contents(::std::string* file_contents) {
  if (file_contents != NULL) {
    
  } else {
    
  }
  file_contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_contents);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FileMessageInfo.file_contents)
}

// -------------------------------------------------------------------

// SpeechMessageInfo

// string file_id = 1;
inline void SpeechMessageInfo::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpeechMessageInfo::file_id() const {
  // @@protoc_insertion_point(field_get:chen_im.SpeechMessageInfo.file_id)
  return file_id_.GetNoArena();
}
inline void SpeechMessageInfo::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SpeechMessageInfo.file_id)
}
#if LANG_CXX11
inline void SpeechMessageInfo::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SpeechMessageInfo.file_id)
}
#endif
inline void SpeechMessageInfo::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SpeechMessageInfo.file_id)
}
inline void SpeechMessageInfo::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SpeechMessageInfo.file_id)
}
inline ::std::string* SpeechMessageInfo::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SpeechMessageInfo.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpeechMessageInfo::release_file_id() {
  // @@protoc_insertion_point(field_release:chen_im.SpeechMessageInfo.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpeechMessageInfo::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SpeechMessageInfo.file_id)
}

// bytes file_contents = 2;
inline void SpeechMessageInfo::clear_file_contents() {
  file_contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpeechMessageInfo::file_contents() const {
  // @@protoc_insertion_point(field_get:chen_im.SpeechMessageInfo.file_contents)
  return file_contents_.GetNoArena();
}
inline void SpeechMessageInfo::set_file_contents(const ::std::string& value) {
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.SpeechMessageInfo.file_contents)
}
#if LANG_CXX11
inline void SpeechMessageInfo::set_file_contents(::std::string&& value) {
  
  file_contents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.SpeechMessageInfo.file_contents)
}
#endif
inline void SpeechMessageInfo::set_file_contents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.SpeechMessageInfo.file_contents)
}
inline void SpeechMessageInfo::set_file_contents(const void* value, size_t size) {
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.SpeechMessageInfo.file_contents)
}
inline ::std::string* SpeechMessageInfo::mutable_file_contents() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.SpeechMessageInfo.file_contents)
  return file_contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpeechMessageInfo::release_file_contents() {
  // @@protoc_insertion_point(field_release:chen_im.SpeechMessageInfo.file_contents)
  
  return file_contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpeechMessageInfo::set_allocated_file_contents(::std::string* file_contents) {
  if (file_contents != NULL) {
    
  } else {
    
  }
  file_contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_contents);
  // @@protoc_insertion_point(field_set_allocated:chen_im.SpeechMessageInfo.file_contents)
}

// -------------------------------------------------------------------

// MessageContent

// .chen_im.MessageType message_type = 1;
inline void MessageContent::clear_message_type() {
  message_type_ = 0;
}
inline ::chen_im::MessageType MessageContent::message_type() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageContent.message_type)
  return static_cast< ::chen_im::MessageType >(message_type_);
}
inline void MessageContent::set_message_type(::chen_im::MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:chen_im.MessageContent.message_type)
}

// .chen_im.StringMessageInfo string_message = 2;
inline bool MessageContent::has_string_message() const {
  return msg_content_case() == kStringMessage;
}
inline void MessageContent::set_has_string_message() {
  _oneof_case_[0] = kStringMessage;
}
inline void MessageContent::clear_string_message() {
  if (has_string_message()) {
    delete msg_content_.string_message_;
    clear_has_msg_content();
  }
}
inline const ::chen_im::StringMessageInfo& MessageContent::_internal_string_message() const {
  return *msg_content_.string_message_;
}
inline ::chen_im::StringMessageInfo* MessageContent::release_string_message() {
  // @@protoc_insertion_point(field_release:chen_im.MessageContent.string_message)
  if (has_string_message()) {
    clear_has_msg_content();
      ::chen_im::StringMessageInfo* temp = msg_content_.string_message_;
    msg_content_.string_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::StringMessageInfo& MessageContent::string_message() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageContent.string_message)
  return has_string_message()
      ? *msg_content_.string_message_
      : *reinterpret_cast< ::chen_im::StringMessageInfo*>(&::chen_im::_StringMessageInfo_default_instance_);
}
inline ::chen_im::StringMessageInfo* MessageContent::mutable_string_message() {
  if (!has_string_message()) {
    clear_msg_content();
    set_has_string_message();
    msg_content_.string_message_ = CreateMaybeMessage< ::chen_im::StringMessageInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.MessageContent.string_message)
  return msg_content_.string_message_;
}

// .chen_im.FileMessageInfo file_message = 3;
inline bool MessageContent::has_file_message() const {
  return msg_content_case() == kFileMessage;
}
inline void MessageContent::set_has_file_message() {
  _oneof_case_[0] = kFileMessage;
}
inline void MessageContent::clear_file_message() {
  if (has_file_message()) {
    delete msg_content_.file_message_;
    clear_has_msg_content();
  }
}
inline const ::chen_im::FileMessageInfo& MessageContent::_internal_file_message() const {
  return *msg_content_.file_message_;
}
inline ::chen_im::FileMessageInfo* MessageContent::release_file_message() {
  // @@protoc_insertion_point(field_release:chen_im.MessageContent.file_message)
  if (has_file_message()) {
    clear_has_msg_content();
      ::chen_im::FileMessageInfo* temp = msg_content_.file_message_;
    msg_content_.file_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::FileMessageInfo& MessageContent::file_message() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageContent.file_message)
  return has_file_message()
      ? *msg_content_.file_message_
      : *reinterpret_cast< ::chen_im::FileMessageInfo*>(&::chen_im::_FileMessageInfo_default_instance_);
}
inline ::chen_im::FileMessageInfo* MessageContent::mutable_file_message() {
  if (!has_file_message()) {
    clear_msg_content();
    set_has_file_message();
    msg_content_.file_message_ = CreateMaybeMessage< ::chen_im::FileMessageInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.MessageContent.file_message)
  return msg_content_.file_message_;
}

// .chen_im.SpeechMessageInfo speech_message = 4;
inline bool MessageContent::has_speech_message() const {
  return msg_content_case() == kSpeechMessage;
}
inline void MessageContent::set_has_speech_message() {
  _oneof_case_[0] = kSpeechMessage;
}
inline void MessageContent::clear_speech_message() {
  if (has_speech_message()) {
    delete msg_content_.speech_message_;
    clear_has_msg_content();
  }
}
inline const ::chen_im::SpeechMessageInfo& MessageContent::_internal_speech_message() const {
  return *msg_content_.speech_message_;
}
inline ::chen_im::SpeechMessageInfo* MessageContent::release_speech_message() {
  // @@protoc_insertion_point(field_release:chen_im.MessageContent.speech_message)
  if (has_speech_message()) {
    clear_has_msg_content();
      ::chen_im::SpeechMessageInfo* temp = msg_content_.speech_message_;
    msg_content_.speech_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::SpeechMessageInfo& MessageContent::speech_message() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageContent.speech_message)
  return has_speech_message()
      ? *msg_content_.speech_message_
      : *reinterpret_cast< ::chen_im::SpeechMessageInfo*>(&::chen_im::_SpeechMessageInfo_default_instance_);
}
inline ::chen_im::SpeechMessageInfo* MessageContent::mutable_speech_message() {
  if (!has_speech_message()) {
    clear_msg_content();
    set_has_speech_message();
    msg_content_.speech_message_ = CreateMaybeMessage< ::chen_im::SpeechMessageInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.MessageContent.speech_message)
  return msg_content_.speech_message_;
}

// .chen_im.ImageMessageInfo image_message = 5;
inline bool MessageContent::has_image_message() const {
  return msg_content_case() == kImageMessage;
}
inline void MessageContent::set_has_image_message() {
  _oneof_case_[0] = kImageMessage;
}
inline void MessageContent::clear_image_message() {
  if (has_image_message()) {
    delete msg_content_.image_message_;
    clear_has_msg_content();
  }
}
inline const ::chen_im::ImageMessageInfo& MessageContent::_internal_image_message() const {
  return *msg_content_.image_message_;
}
inline ::chen_im::ImageMessageInfo* MessageContent::release_image_message() {
  // @@protoc_insertion_point(field_release:chen_im.MessageContent.image_message)
  if (has_image_message()) {
    clear_has_msg_content();
      ::chen_im::ImageMessageInfo* temp = msg_content_.image_message_;
    msg_content_.image_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::chen_im::ImageMessageInfo& MessageContent::image_message() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageContent.image_message)
  return has_image_message()
      ? *msg_content_.image_message_
      : *reinterpret_cast< ::chen_im::ImageMessageInfo*>(&::chen_im::_ImageMessageInfo_default_instance_);
}
inline ::chen_im::ImageMessageInfo* MessageContent::mutable_image_message() {
  if (!has_image_message()) {
    clear_msg_content();
    set_has_image_message();
    msg_content_.image_message_ = CreateMaybeMessage< ::chen_im::ImageMessageInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chen_im.MessageContent.image_message)
  return msg_content_.image_message_;
}

inline bool MessageContent::has_msg_content() const {
  return msg_content_case() != MSG_CONTENT_NOT_SET;
}
inline void MessageContent::clear_has_msg_content() {
  _oneof_case_[0] = MSG_CONTENT_NOT_SET;
}
inline MessageContent::MsgContentCase MessageContent::msg_content_case() const {
  return MessageContent::MsgContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MessageInfo

// string message_id = 1;
inline void MessageInfo::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageInfo::message_id() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageInfo.message_id)
  return message_id_.GetNoArena();
}
inline void MessageInfo::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.MessageInfo.message_id)
}
#if LANG_CXX11
inline void MessageInfo::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.MessageInfo.message_id)
}
#endif
inline void MessageInfo::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.MessageInfo.message_id)
}
inline void MessageInfo::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.MessageInfo.message_id)
}
inline ::std::string* MessageInfo::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.MessageInfo.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageInfo::release_message_id() {
  // @@protoc_insertion_point(field_release:chen_im.MessageInfo.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageInfo.message_id)
}

// string chat_session_id = 2;
inline void MessageInfo::clear_chat_session_id() {
  chat_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageInfo::chat_session_id() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageInfo.chat_session_id)
  return chat_session_id_.GetNoArena();
}
inline void MessageInfo::set_chat_session_id(const ::std::string& value) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.MessageInfo.chat_session_id)
}
#if LANG_CXX11
inline void MessageInfo::set_chat_session_id(::std::string&& value) {
  
  chat_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.MessageInfo.chat_session_id)
}
#endif
inline void MessageInfo::set_chat_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.MessageInfo.chat_session_id)
}
inline void MessageInfo::set_chat_session_id(const char* value, size_t size) {
  
  chat_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.MessageInfo.chat_session_id)
}
inline ::std::string* MessageInfo::mutable_chat_session_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.MessageInfo.chat_session_id)
  return chat_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageInfo::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:chen_im.MessageInfo.chat_session_id)
  
  return chat_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_chat_session_id(::std::string* chat_session_id) {
  if (chat_session_id != NULL) {
    
  } else {
    
  }
  chat_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_session_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageInfo.chat_session_id)
}

// int64 timestamp = 3;
inline void MessageInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:chen_im.MessageInfo.timestamp)
  return timestamp_;
}
inline void MessageInfo::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:chen_im.MessageInfo.timestamp)
}

// .chen_im.UserInfo sender = 4;
inline bool MessageInfo::has_sender() const {
  return this != internal_default_instance() && sender_ != NULL;
}
inline void MessageInfo::clear_sender() {
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
}
inline const ::chen_im::UserInfo& MessageInfo::_internal_sender() const {
  return *sender_;
}
inline const ::chen_im::UserInfo& MessageInfo::sender() const {
  const ::chen_im::UserInfo* p = sender_;
  // @@protoc_insertion_point(field_get:chen_im.MessageInfo.sender)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::UserInfo*>(
      &::chen_im::_UserInfo_default_instance_);
}
inline ::chen_im::UserInfo* MessageInfo::release_sender() {
  // @@protoc_insertion_point(field_release:chen_im.MessageInfo.sender)
  
  ::chen_im::UserInfo* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline ::chen_im::UserInfo* MessageInfo::mutable_sender() {
  
  if (sender_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::UserInfo>(GetArenaNoVirtual());
    sender_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.MessageInfo.sender)
  return sender_;
}
inline void MessageInfo::set_allocated_sender(::chen_im::UserInfo* sender) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sender_;
  }
  if (sender) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sender = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageInfo.sender)
}

// .chen_im.MessageContent message = 5;
inline bool MessageInfo::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void MessageInfo::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::chen_im::MessageContent& MessageInfo::_internal_message() const {
  return *message_;
}
inline const ::chen_im::MessageContent& MessageInfo::message() const {
  const ::chen_im::MessageContent* p = message_;
  // @@protoc_insertion_point(field_get:chen_im.MessageInfo.message)
  return p != NULL ? *p : *reinterpret_cast<const ::chen_im::MessageContent*>(
      &::chen_im::_MessageContent_default_instance_);
}
inline ::chen_im::MessageContent* MessageInfo::release_message() {
  // @@protoc_insertion_point(field_release:chen_im.MessageInfo.message)
  
  ::chen_im::MessageContent* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::chen_im::MessageContent* MessageInfo::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::chen_im::MessageContent>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chen_im.MessageInfo.message)
  return message_;
}
inline void MessageInfo::set_allocated_message(::chen_im::MessageContent* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chen_im.MessageInfo.message)
}

// -------------------------------------------------------------------

// FileDownloadData

// string file_id = 1;
inline void FileDownloadData::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDownloadData::file_id() const {
  // @@protoc_insertion_point(field_get:chen_im.FileDownloadData.file_id)
  return file_id_.GetNoArena();
}
inline void FileDownloadData::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FileDownloadData.file_id)
}
#if LANG_CXX11
inline void FileDownloadData::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FileDownloadData.file_id)
}
#endif
inline void FileDownloadData::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FileDownloadData.file_id)
}
inline void FileDownloadData::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FileDownloadData.file_id)
}
inline ::std::string* FileDownloadData::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FileDownloadData.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDownloadData::release_file_id() {
  // @@protoc_insertion_point(field_release:chen_im.FileDownloadData.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDownloadData::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FileDownloadData.file_id)
}

// bytes file_content = 2;
inline void FileDownloadData::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDownloadData::file_content() const {
  // @@protoc_insertion_point(field_get:chen_im.FileDownloadData.file_content)
  return file_content_.GetNoArena();
}
inline void FileDownloadData::set_file_content(const ::std::string& value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FileDownloadData.file_content)
}
#if LANG_CXX11
inline void FileDownloadData::set_file_content(::std::string&& value) {
  
  file_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FileDownloadData.file_content)
}
#endif
inline void FileDownloadData::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FileDownloadData.file_content)
}
inline void FileDownloadData::set_file_content(const void* value, size_t size) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FileDownloadData.file_content)
}
inline ::std::string* FileDownloadData::mutable_file_content() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FileDownloadData.file_content)
  return file_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDownloadData::release_file_content() {
  // @@protoc_insertion_point(field_release:chen_im.FileDownloadData.file_content)
  
  return file_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDownloadData::set_allocated_file_content(::std::string* file_content) {
  if (file_content != NULL) {
    
  } else {
    
  }
  file_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FileDownloadData.file_content)
}

// -------------------------------------------------------------------

// FileUploadData

// string file_name = 1;
inline void FileUploadData::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileUploadData::file_name() const {
  // @@protoc_insertion_point(field_get:chen_im.FileUploadData.file_name)
  return file_name_.GetNoArena();
}
inline void FileUploadData::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FileUploadData.file_name)
}
#if LANG_CXX11
inline void FileUploadData::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FileUploadData.file_name)
}
#endif
inline void FileUploadData::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FileUploadData.file_name)
}
inline void FileUploadData::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FileUploadData.file_name)
}
inline ::std::string* FileUploadData::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FileUploadData.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileUploadData::release_file_name() {
  // @@protoc_insertion_point(field_release:chen_im.FileUploadData.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileUploadData::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FileUploadData.file_name)
}

// int64 file_size = 2;
inline void FileUploadData::clear_file_size() {
  file_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileUploadData::file_size() const {
  // @@protoc_insertion_point(field_get:chen_im.FileUploadData.file_size)
  return file_size_;
}
inline void FileUploadData::set_file_size(::google::protobuf::int64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:chen_im.FileUploadData.file_size)
}

// bytes file_content = 3;
inline void FileUploadData::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileUploadData::file_content() const {
  // @@protoc_insertion_point(field_get:chen_im.FileUploadData.file_content)
  return file_content_.GetNoArena();
}
inline void FileUploadData::set_file_content(const ::std::string& value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chen_im.FileUploadData.file_content)
}
#if LANG_CXX11
inline void FileUploadData::set_file_content(::std::string&& value) {
  
  file_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chen_im.FileUploadData.file_content)
}
#endif
inline void FileUploadData::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chen_im.FileUploadData.file_content)
}
inline void FileUploadData::set_file_content(const void* value, size_t size) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chen_im.FileUploadData.file_content)
}
inline ::std::string* FileUploadData::mutable_file_content() {
  
  // @@protoc_insertion_point(field_mutable:chen_im.FileUploadData.file_content)
  return file_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileUploadData::release_file_content() {
  // @@protoc_insertion_point(field_release:chen_im.FileUploadData.file_content)
  
  return file_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileUploadData::set_allocated_file_content(::std::string* file_content) {
  if (file_content != NULL) {
    
  } else {
    
  }
  file_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:chen_im.FileUploadData.file_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chen_im

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chen_im::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chen_im::MessageType>() {
  return ::chen_im::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_base_2eproto
